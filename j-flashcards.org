* J flashcards
** Verbs
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
=
#+end_src
**** Name (monadic • dyadic)
Self-Classify • Equal
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm
#+begin_example
 
 Self-Classify                        =  _ 0 0                                Equal
 
 =y classifies the items of the nub of y    x=y is 1 if x is equal to y , and is   
 (that is, [[file:///Applications/j64-806/addons/docs/help/dictionary/d221.htm][~.y]]) according to equality       otherwise 0 .                          
 with the items of y , producing a                                                 
 boolean table of shape #~.y by #y . For    If x or y is a finite floating-point or
 example:                                   complex number, the comparison is made 
                                            with a tolerance t , normally 2 to the 
    y=: 3 3 $ 'abcdef'                      power _44 but also controlled by the   
    y ; (~.y) ; (=y)                        fit conjunction !. , as in x=!.0 y .   
 +---+---+-----+                            Formally, x=y is 1 if the magnitude of 
 |abc|abc|1 0 1|                            x-y does not exceed t times the larger 
 |def|def|0 1 0|                            of the magnitudes of x and y .         
 |abc|   |     |                                                                   
 +---+---+-----+                            Tolerance applies similarly to other   
                                            verbs as indicated for each, notably to
                                            [[file:///Applications/j64-806/addons/docs/help/dictionary/d122.htm][Match (-:)]], to [[file:///Applications/j64-806/addons/docs/help/dictionary/d011.htm][Floor (<.)]], and to      
                                            [[file:///Applications/j64-806/addons/docs/help/dictionary/d110.htm][Signum (*)]], but not to [[file:///Applications/j64-806/addons/docs/help/dictionary/d422.htm][Grade (/:)]].     
 
 Both the monadic and dyadic cases of the verb = apply to nouns of any rank, and to
 boxed as well as simple nouns. For example:
 
    ]a=: ;: 'Try and try and try again.'
 +---+---+---+---+---+------+
 |Try|and|try|and|try|again.|
 +---+---+---+---+---+------+
 
    ~. a
 +---+---+---+------+
 |Try|and|try|again.|
 +---+---+---+------+
 
    =a
 1 0 0 0 0 0
 0 1 0 1 0 0
 0 0 1 0 1 0
 0 0 0 0 0 1
 
    a = <'and'
 0 1 0 1 0 0
 
 Because of the limited precision of the computer, results which should agree (such
 as 144*(13%144) and 13) may not; the tolerant comparison allows such a comparison
 to show agreement (a result 1). More or less stringent comparisons may be made by
 using the conjunction !. to specify a tolerance t , as in the function eq=: =!.t .
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
<
#+end_src
**** Name (monadic • dyadic)
Box • Less Than
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d010.htm
#+begin_example
 
 Box                                 <  _ 0 0                           Less Than  
 
 <y is an atomic encoding of y , as         x<y is 1 if x is tolerantly less than y
 discussed in [[file:///Applications/j64-806/addons/docs/help/dictionary/dicta.htm][Section II A]]. The result      . See [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]] for a definition of    
 has rank 0, and is decoded by > .          tolerance. <!.t uses tolerance t .     
 
 Boxing is also effected by verbs such as Link (;) and Word Formation (;:):
 
    (<'abc'),(<5 7),(<i.2 3)
 +---+---+-----+
 |abc|5 7|0 1 2|
 |   |   |3 4 5|
 +---+---+-----+
 
    ;: 'Now is the time'
 +---+--+---+----+
 |Now|is|the|time|
 +---+--+---+----+
  
    ] a=: 2;3 5;7 11 13
 +-+---+-------+
 |2|3 5|7 11 13|
 +-+---+-------+
 
    >a
 2  0  0
 3  5  0
 7 11 13
 
 [[file:///Applications/j64-806/addons/docs/help/dictionary/d331.htm][Cut (;.)]] with < has several uses (chosen by the right argument); the phrase <@v
 avoids the padding (and some domain errors) that may result from applying v alone:
 
    <;._1 '/i sing/of olaf/'
 +------+-------++
 |i sing|of olaf||
 +------+-------++
 
    i."(0) 2 3 4
 0 1 0 0
 0 1 2 0
 0 1 2 3
                 
    <@i."(0) 2 3 4
 +---+-----+-------+
 |0 1|0 1 2|0 1 2 3|
 +---+-----+-------+
 
 If y is a high-rank array, <"_1 y or <"_2 y often gives a more intelligible
 display than y itself. The display of a boxed array would normally be corrupted by
 control characters (such as carriage returns and linefeeds) occurring therein; in
 the display such characters are replaced by spaces. For example, try < 8 32 $ a.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
<.
#+end_src
**** Name (monadic • dyadic)
Floor • Lesser Of (Min)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d011.htm
#+begin_example
 
 Floor                               <.  0 0 0                      Lesser Of (Min)
 
 <.y gives the floor of y , that is, the    x<.y is the lesser of x and y . For    
 largest integer less than or equal to y    example:                               
 . Thus:                                                                           
                                               3 <. 4 _4                           
    <. 4.6 4 _4 _4.6                        3 _4                                   
 4 4 _4 _5                                                                         
                                               <./7 8 5 9 2                        
 The implied comparison with integers is    2                                      
 tolerant, as discussed under [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]],                                           
 and is controlled by <.!.t . See below        <./\7 8 5 9 2                       
 for complex arguments.                     7 7 5 5 2                              
 
 For a complex argument, the definition of <. is modelled by:
 
    floor=: j./@(ip+(c2>c1),c1+:c2)
    '`c1 c2 fp ip'=:(1:>+/@fp)`(>:/@fp)`(+.-ip)`(<.@+.)
 
 As developed by [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#10][McDonnell {10}]], this function has the following properties:
 
 Convexity:        If (<.z1)=(<.z2) and z3 lies on the line between z1 to z2, then 
                   (<.z3)=(<.z1) .                                                 
 Translatability:  If z4 is a Gaussian integer, then (z4+<.z5)=(<.z4+z5) .         
 Compatibility:    (<.x j.0)=((<.x)j.0) and (<.0 j.x)=(0 j.(<.x))                  
 
 The function <. can be viewed as a tiling by rectangles of unit area, all
 arguments within a rectangle sharing the same floor. One rectangle has vertices at
 1j0 and 0j1, with the other side passing through the origin. Rectangles along
 successive diagonals are displaced by one-half the length.
 
 The phrase j./@ip “floors” the individual parts of a complex argument. Moreover,
 the floor <.y is equivalent to ->.-y . In other words, it is the dual of ceiling
 with respect to (that is, under) arithmetic negation: <. ↔ >.&.- and >. ↔ <.&.- .
 Thus:
 
    (>.&.- ; <.) 4.6 4 _4 _4.6
 +---------+---------+
 |4 4 _4 _5|4 4 _4 _5|
 +---------+---------+
 
 The expression <.x+0.5 gives the integer nearest to the real argument x . The
 number of digits needed to represent a positive integer is given by one plus the
 floor of its base ten logarithm:
 
    a ,. (,. 1:+<.) 10^. a=: 9 10 11 99 100 101
   9 0.954243 1
  10        1 2
  11  1.04139 2
  99  1.99564 2
 100        2 3
 101  2.00432 3
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
<:
#+end_src
**** Name (monadic • dyadic)
Decrement • Less Or Equal
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d012.htm
#+begin_example
 
 Decrement                           <:  0 0 0                   Less than or Equal
 
 <:y is y-1 . For example:                  x<:y is 1 if x is less than or equal to
                                            y , and is otherwise 0 . See [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]] 
    <: 2 3 5 7                              for a discussion of tolerance. The fit 
 1 2 4 6                                    conjunction (!.) applies to <: .       
                                                                                   
 Also see [[file:///Applications/j64-806/addons/docs/help/dictionary/d121.htm][Not (-.)]] .                                                               
 
 The inverse of <: is >: (Increment). For example:
 
    n=: 5
 
    <: ^: _1 n
 6
         
    <:^: 0 1 2 n               NB. Here ^: applies to a noun right argument (0 1 2)
 5 4 3
 
    <: ^: i. n                 NB. Here ^: applies to a verb right argument (i.)
 5 4 3 2 1
 
    */ <: ^: i. n
 120
             
    f=: */ @ (<: ^: i.)
    f n
 120
             
    f"0 i. n
 1 1 2 6 24
 
    (f"0 = !) i. n
 1 1 1 1 1
   
    <:/ ~ i. 5                 NB. Table of the dyad <:
 1 1 1 1 1
 0 1 1 1 1
 0 0 1 1 1
 0 0 0 1 1
 0 0 0 0 1
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
>
#+end_src
**** Name (monadic • dyadic)
Open • Larger Than
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d020.htm
#+begin_example
 
 Open                                >  0 0 0                           Larger Than
 
 Open is the inverse of box, that is, >     x>y is 1 if x is tolerantly larger than
 <y is y . When applied to an open array    y . See [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]] for a discussion of  
 (that has no boxed elements), open has     tolerance. For example:                
 no effect. Opened atoms are brought to                                            
 a common shape as discussed in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm][Section]]        1 2 3 4 5  >  5 4 3 2 1             
 [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm][II B]].                                      0 0 0 1 1                              
                                                                                   
                                            Tolerance t is provided by >!.t .      
 
 Since the rank of open is 0, it applies to each atom of its argument. For example:
 
    ]a=: 1 2 3;4 5 6;7 8 9
 +-----+-----+-----+
 |1 2 3|4 5 6|7 8 9|
 +-----+-----+-----+
 
    >a
 1 2 3
 4 5 6
 7 8 9
 
 Results of different shapes are padded as defined in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm][Section II B]]. For example:
 
    (>1;2 3;4 5 6); (>'a';'bc';'def'); (<\i.4); (><\i.4)
 +-----+---+---------------------+-------+
 |1 0 0|a  |+-+---+-----+-------+|0 0 0 0|
 |2 3 0|bc ||0|0 1|0 1 2|0 1 2 3||0 1 0 0|
 |4 5 6|def|+-+---+-----+-------+|0 1 2 0|
 |     |   |                     |0 1 2 3|
 +-----+---+---------------------+-------+
                   
    </~ i.5                    NB. Table of the dyad <:
 0 1 1 1 1
 0 0 1 1 1
 0 0 0 1 1
 0 0 0 0 1
 0 0 0 0 0
                   
    1 < 1+10^-8+i.15           NB. Tolerant comparison
 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0
                   
    1 <!.(0) 1+10^-8+i.15      NB. Exact comparison (0-tolerance)
 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
>.
#+end_src
**** Name (monadic • dyadic)
Ceiling • Larger of (Max)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d021.htm
#+begin_example
 
 Ceiling                             >. 0 0 0                       Larger Of (Max)
 
 >.y gives the ceiling of y , that is,      x>.y is the larger of x and y . For    
 the smallest integer greater than or       example:                               
 equal to y . Thus:                                                                
                                               3>.4 _4                             
    >. 4.6 4 _4 _4.6                        4 3                                    
 5 4 _4 _4                                                                         
                                               >./7 8 5 9 2                        
 The implied comparison with integers is    9                                      
 tolerant, as discussed under [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]],                                           
 and is controlled by >.!.t . See [[file:///Applications/j64-806/addons/docs/help/dictionary/d011.htm][Floor]]        >./\7 8 5 9 2                       
 [[file:///Applications/j64-806/addons/docs/help/dictionary/d011.htm][(<.)]] and [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#10][McDonnell {10}]] for complex        7 8 8 9 9                              
 arguments.                                                                        
 
 The comparison x = >. x determines whether x is an integer. Thus:
 
    Integer_test=: ] = >.      NB. See the definition of fork in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictf.htm][Section II F]].
    Integer_test 3 3.14 _5
 1 0 1
 
    f=: = >.                   NB. The same function may be defined by a hook.
    f 3 3.14 _5
 1 0 1
 
 The ceiling >. y is equivalent to -<.-y . In other words, it is the dual of floor
 with respect to (that is, under) arithmetic negation: >. ↔ <.&.- and <. ↔ >.&.- .
 For example:
 
    (<.&.- ; >.) 4.6 4 _4 _4.6
 +---------+---------+
 |5 4 _4 _4|5 4 _4 _4|
 +---------+---------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
>:
#+end_src
**** Name (monadic • dyadic)
Increment • Larger Or Equal
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d022.htm
#+begin_example
 
 Increment                           >:  0 0 0                      Larger or Equal
 
 >:y is y+1 . For example:                  x>:y is 1 if x is tolerantly greater   
                                            than or equal to y.                    
    >: 2 3 5 7                                                                     
 3 4 6 8                                    See [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]] for a discussion of      
                                            tolerance. >:!.t uses tolerance t .    
 Also see [[file:///Applications/j64-806/addons/docs/help/dictionary/d121.htm][Not (-.)]] .                                                               
 
    +: i. 6                    NB. Even numbers
 0 2 4 6 8 10
 
    >: +: i. 6                 NB. Odd numbers
 1 3 5 7 9 11
 
    odds=: >:@+:@i.
    odds 10
 1 3 5 7 9 11 13 15 17 19
 
    +/ odds 10
 100
 
    (+/@odds , *:) 10          NB. Sum of first n odds equals the square of n
 100 100
 
    >:/ ~ i. 5                 NB. Table of the dyad >:
 1 0 0 0 0
 1 1 0 0 0
 1 1 1 0 0
 1 1 1 1 0
 1 1 1 1 1
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
_:
#+end_src
**** Name (monadic • dyadic)
Infinity • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d032.htm
#+begin_example
 
 Infinity                            _:  _ _ _                            Infinity
 
 _: is a constant function that yields      _: is a constant function that yields  
 an infinite result, that is, _: y is _     an infinite result, that is, x _: y is 
                                            _                                      
 
 For example:
 
    y=: 1 2 3 4
    _: y
 _
 
    _:"0 y                     NB. Rank zero applies to each element
 _ _ _ _
 
 Other [[file:///Applications/j64-806/addons/docs/help/dictionary/dconsf.htm][constant functions]] include _9: and _8: etc. to 9: . More generally, the
 expression x"r defines a constant function of rank r that yields the constant
 value x . For example:
 
    3.14"0 y
 3.14 3.14 3.14 3.14
 
    3.14"1 y
 3.14
 
 The specific constant functions mentioned can therefore be written alternatively
 as _"_ and _9"_ and 0"_ and 9"_ , etc.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
+
#+end_src
**** Name (monadic • dyadic)
Conjugate • Plus
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d100.htm
#+begin_example
 
 Conjugate                            +  0 0 0                                 Plus
 
 + y is the conjugate of y . For            + is defined as in elementary          
 example, +3j4 is 3j_4 .                    arithmetic, and is extended to complex 
                                            numbers as usual.                      
 
 A complex number y multiplied by its conjugate produces a real number equal to the
 square of its magnitude |y . For example:
 
    3j4 * 3j_4
 25
 
 The [[file:///Applications/j64-806/addons/docs/help/dictionary/djdot.htm][function j.]] multiplies its argument by the square root of negative one:
 
    ]i=: i. 5
 0 1 2 3 4
 
    j. i
 0 0j1 0j2 0j3 0j4
 
    ]y=: i + 2 * j. i
 0 1j2 2j4 3j6 4j8
 
    +y
 0 1j_2 2j_4 3j_6 4j_8
 
    y * +y
 0 5 20 45 80
 
    %: y * +y
 0 2.23607 4.47214 6.7082 8.94427
 
    |y
 0 2.23607 4.47214 6.7082 8.94427
 
 The conjugate of y can also be expressed as (|y*y)%y . For example:
 
    (|y*y)%y
 0 1j_2 2j_4 3j_6 4j_8
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
+.
#+end_src
**** Name (monadic • dyadic)
Real / Imaginary • GCD (Or)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d101.htm
#+begin_example
 
 Real / Imaginary                     +.  0 0 0                            GCD (Or)
 
 +.y yields a two-element list of the       x+.y is the greatest common divisor of 
 real and imaginary parts of its            x and y . If the arguments are boolean 
 argument. For example, +.3j5 is 3 5,       (0 or 1), the functions +. and *. are  
 and +.3 is 3 0 .                           equivalent to logical or and and. The  
                                            [[file:///Applications/j64-806/addons/docs/help/dictionary/d121.htm][function -.]] similarly restricted is not
                                            .                                      
 
    ]y=: i+2*j. i=: i.4
 0 1j2 2j4 3j6
 
    +. y
 0 0
 1 2
 2 4
 3 6
 
 The greatest common divisor divides both of its arguments x and y to produce
 results that have no common factor, that is, the GCD of the quotients is 1.
 Moreover, these quotients represent the fraction x%y in lowest form. For example:
 
    x=: 24 [ y=: 60
    x;y;(x +. y);((x , y) % (x +. y))
 +--+--+--+---+
 |24|60|12|2 5|
 +--+--+--+---+
 
    lff=: , % +.               Gives lowest form of fraction
    x;y;(x lff y);(%/x lff y);(%/x,y);(+./x lff y)
 +--+--+---+---+---+-+
 |24|60|2 5|0.4|0.4|1|
 +--+--+---+---+---+-+
 
 Since the functions =| and =<. (tests for non-negative and for integer) produce
 boolean results, the phrase (=|)+.(=<.) is a test for non-negative or integer:
 
    (test=: (=|) +. (=<.)) _2 _2.4 3 3.5
 1 0 1 1
 
 The duality of or and and may be shown as follows:
 
    d (+./ ; *.&.-./ ; *./ ; +.&.-./) d=: 0 1
 +---+---+---+---+
 |0 1|0 1|0 0|0 0|
 |1 1|1 1|0 1|0 1|
 +---+---+---+---+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
+:
#+end_src
**** Name (monadic • dyadic)
Double • Not-Or
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d102.htm
#+begin_example
 
 Double                              +:  0 0 0                              Not-Or
 
 +: y is twice y . For example:             x +: y is the negation of x or y . For 
                                            example, 0 +: 0 is 1 .                 
    +: 3 0 _2                                                                      
 6 0 _4                                                                            
 
 Since the square of the sum of two arguments equals the sum of their squares and 
 twice their product, the following functions are equivalent:
 
    f=: + * +
    g=: *:@[ + +:@* + *:@]
 
 For example:
 
    x=: 7 6 3 [ y=: 6 5 3
    x (f ; g ; (f=g) ; (f-:g)) y
 +----------+----------+-----+-+
 |169 121 36|169 121 36|1 1 1|1|
 +----------+----------+-----+-+
 
 Since the domain of not-or is limited to zero and one, its entire behaviour can be
 seen in the following function tables:
 
    d=: 0 1                    NB. Domain of nor
    d +:/ d                    NB. Table of nor
 1 0
 0 0
                   
    d +./ d                    NB. Table of or
 0 1
 1 1
 
    -. d +./ d                 NB. Negation of table of or
 1 0
 0 0
                
    (+:&.-./~d) ; (*:/~d)      NB. Nand and nor are duals under not
 +---+---+
 |1 1|1 1|
 |1 0|1 0|
 +---+---+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
*
#+end_src
**** Name (monadic • dyadic)
Signum • Times
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d110.htm
#+begin_example
 
 Signum                               *  0 0 0                                Times
 
 *y is _1 if y is negative, 0 if it is      * denotes multiplication, defined as in
 zero, 1 if it is positive; more            elementary mathematics and extended to 
 generally, *y is the intersection of       complex numbers as usual:              
 the unit circle with the line from the                                            
 origin through the argument y in the          t=:+.x,y [ x=:2j4 [ y=:5j3          
 complex plane. For example:                   r=:-/*/t [ i=:+/ . * t              
                                               (x,:y);t;r;i;(r j. i);(x*y)         
    *_3 0 5 3j4                             +---+---+--+--+-----+-----+            
 _1 0 1 0.6j0.8                             |2j4|2 4|_2|26|_2j26|_2j26|            
                                            |5j3|5 3|  |  |     |     |            
 The comparison with zero is tolerant,      +---+---+--+--+-----+-----+            
 as defined by the phrase (y%|y)*t<:|y                                             
 where t denotes the tolerance. The fit                                            
 conjunction applies to signum, as in                                              
 *!.t .                                                                            
 
 Signum is useful in effecting selections. For example:
 
    * y=: _4 0 4
 _1 0 1
 
    >:@* y
 0 1 2
 
    f=: %:
    f ^: * " 0 y               NB. Inverse of f, Identity, or f
 16 0 2
 
    (* y) { ;:'Yes No Maybe'   NB. Select using [[file:///Applications/j64-806/addons/docs/help/dictionary/d520.htm][Indexing ({)]]
 +-----+---+--+
 |Maybe|Yes|No|
 +-----+---+--+
 
    g=: <:`-:`+:@.*"0          NB. See [[file:///Applications/j64-806/addons/docs/help/dictionary/d621.htm][Agenda (@.)]]
    g y
 _8 _1 2
 
 The dyad * used on a list and a table illustrates the significance of agreement,
 as discussed in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm][Section II B]]:
 
    m=: i. 3 4 [ v=: 3 2 1
 
    m ; (v*m) ; (m*v) ; (+/ m*v) ; (v +/ . * m)
 +---------+----------+----------+-----------+-----------+
 |0 1  2  3|0  3  6  9|0  3  6  9|16 22 28 34|16 22 28 34|
 |4 5  6  7|8 10 12 14|8 10 12 14|           |           |
 |8 9 10 11|8  9 10 11|8  9 10 11|           |           |
 +---------+----------+----------+-----------+-----------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
*.
#+end_src
**** Name (monadic • dyadic)
Length/Angle • LCM (And)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d111.htm
#+begin_example
 
 Length / Angle                       *.  0 0 0                           LCM (And)
 
 *.y is a two-element list of the length    x*.y is the least common multiple of x 
 and angle (in radians) of the              and y . For boolean arguments (0 and 1)
 hypotenuse of a triangle with base and     it is equivalent to and. Thus:         
 altitude equal to the real and                                                    
 imaginary parts y . For example, *. 3j4       0 1 *./ 0 1                         
 is 5 0.927295.                             0 0                                    
                                            0 1                                    
 
 Some properties of the length / angle are illustrated in the following, including
 the fact that the length (i.e. magnitude) of the product of two complex numbers is
 the product of their lengths, and the angle of the product is the sum of their
 angles:
 
    (| ; *. ; r./@*.) y=: 3j4
 +-+----------+---+
 |5|5 0.927295|3j4|
 +-+----------+---+
 
    x=: 2j_6
    *. x,y                               NB. Polar coordinates
 6.32456 _1.24905
       5 0.927295
 
    f=: */@:({."1) , +/@:(}."1)          NB. Product over first col and sum over last
    f *. x , y
 31.6228 _0.321751
 
    *. x * y                             NB. Length and angle of product
 31.6228 _0.321751
 
 The least common multiple is the product divided by the GCD. For example:
 
    24 *. 60
 120
    24 +. 60
 12
    (24 * 60) % (24 +. 60)
 120
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
*:
#+end_src
**** Name (monadic • dyadic)
Square • Not-And
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d112.htm
#+begin_example
 
 Square                              *:  0 0 0                              Not-And
 
 *: y is the square of y .                  x *: y is the negation of x and y . For
                                            example 0 *: 0 is 1 .                  
 
 The inverse of the square is the square root. For example:
 
    *: ^: _1 (_2 _1 0 1 2)
 0j1.41421 0j1 0 1 1.41421
 
    3 +&.*: 4                  NB. Hypotenuse of triangle with sides 3 and 4
 5
 
 Since the domain of nand is limited to zero and one, its entire behaviour can be
 seen in the following function tables:
 
    d=: 0 1                    NB. Domain of nand
    d *:/ d                    NB. Table of nand
 1 1
 1 0
 
    d *./ d                    NB. Table of and
 0 0
 0 1
           
    -. d *./ d
 1 1
 1 0
 
 Nand, Not and, and the dual of Nor all agree, as illustrated below:
 
    (*:/~ ; -.@*./~ ; +:&.-./~) d
 +---+---+---+
 |1 1|1 1|1 1|
 |1 0|1 0|1 0|
 +---+---+---+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
-
#+end_src
**** Name (monadic • dyadic)
Negate • Minus
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d120.htm
#+begin_example
 
 Negate                               -  0 0 0                                Minus
 
 -y is the negative of y . That is, it      - is defined as in elementary          
 is defined as 0 - y . Thus, -2 0 _2 is     arithmetic, and is extended to complex 
 _2 0 2 .                                   numbers as usual.                      
 
 The function - is self-inverse, that is, -^:_1 is - itself.
 
 Although -2 may often be used instead of _2, it is important to understand that
 the former is the application of a function to the number 2, whereas the symbol _
 is an indivisible part of the number representation, just as the period is an
 indivisible part of a number such as 8.9.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
-.
#+end_src
**** Name (monadic • dyadic)
Not • Less
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d121.htm
#+begin_example
 
 Not                                 -.  0 _ _                                 Less
 
 -.y is 1-y ; for a boolean argument it     x-.y includes all items of x except for
 is the complement (not); for a             those that are cells of y .            
 probability, it is the complementary                                              
 probability.                               Tolerance t is provided by -.!.t .     
 
 The function less applies to any conformable pair of arguments. For example:
 
    (i. 9) -. 2 3 5 7
 0 1 4 6 8
                 
    'abcdefghij' -. 'aeiou'
 bcdfghj
 
    ]m=: i. 4 5 
  0  1  2  3  4
  5  6  7  8  9
 10 11 12 13 14
 15 16 17 18 19
 
    m -. 5 6 7 8 9
  0  1  2  3  4
 10 11 12 13 14
 15 16 17 18 19
  
    b=: <\ 'abcdefg'
    b
 +-+--+---+----+-----+------+-------+
 |a|ab|abc|abcd|abcde|abcdef|abcdefg|
 +-+--+---+----+-----+------+-------+
 
    b -. 'abc';'abcde';'cba'
 +-+--+----+------+-------+
 |a|ab|abcd|abcdef|abcdefg|
 +-+--+----+------+-------+
 
    2 3 4 5 -. 'abcdef'
 2 3 4 5
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
-:
#+end_src
**** Name (monadic • dyadic)
Halve • Match
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d122.htm
#+begin_example
 
 Halve                               -:  0 _ _                               Match
 
 -:y is one half of y . For example:        x -: y yields 1 if its arguments match:
                                            in shapes, boxing, and elements; but   
    -: i. 5                                 using tolerant comparison. See [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal]]   
 0 0.5 1 1.5 2                              [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][(=)]].                                   
                                                                                   
                                            Matching with a tolerance t can be     
                                            obtained using the verb -: !. t .      
 
 For example:
 
    x=: 0 1 2 3 4 5
    ,.&.> (] ; -: ; +:@-: ; (%&2) ; (2: %~ ])) x
 +-+---+-+---+---+
 |0|  0|0|  0|  0|
 |1|0.5|1|0.5|0.5|
 |2|  1|2|  1|  1|
 |3|1.5|3|1.5|1.5|
 |4|  2|4|  2|  2|
 |5|2.5|5|2.5|2.5|
 +-+---+-+---+---+
       
    x = +: -: x
 1 1 1 1 1 1
 
    x -: +: -: x
 1
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
%
#+end_src
**** Name (monadic • dyadic)
Reciprocal • Divide
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d130.htm
#+begin_example
 
 Reciprocal                          %  0 0 0                           Divided by
 
 % y is the reciprocal of y , that is,      x % y is division of x by y as defined 
 1%y . For example, %4 ↔ 0.25 .             in elementary math, except that 0%0 is 
                                            0 . See [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#11][McDonnell {11}]], and the        
                                            resulting pattern in the middle column 
                                            and middle row of the table below.     
 
 We will illustrate the divide function by tables, using a function to generate
 lists symmetric about zero:
 
    ] a=: i: 3
 _3 _2 _1 0 1 2 3
 
    (] ; *) |. a%/a
 +--------------------------------------+--------------------+
 |       _1 _1.5 _3  _  3  1.5         1|_1 _1 _1  1  1  1  1|
 |_0.666667   _1 _2  _  2    1  0.666667|_1 _1 _1  1  1  1  1|
 |_0.333333 _0.5 _1  _  1  0.5  0.333333|_1 _1 _1  1  1  1  1|
 |        0    0  0  0  0    0         0| 0  0  0  0  0  0  0|
 | 0.333333  0.5  1 __ _1 _0.5 _0.333333| 1  1  1 _1 _1 _1 _1|
 | 0.666667    1  2 __ _2   _1 _0.666667| 1  1  1 _1 _1 _1 _1|
 |        1  1.5  3 __ _3 _1.5        _1| 1  1  1 _1 _1 _1 _1|
 +--------------------------------------+--------------------+
 
    6j2 ": |. a %/ a
  _1.00 _1.50 _3.00     _  3.00  1.50  1.00
  _0.67 _1.00 _2.00     _  2.00  1.00  0.67
  _0.33 _0.50 _1.00     _  1.00  0.50  0.33
   0.00  0.00  0.00  0.00  0.00  0.00  0.00
   0.33  0.50  1.00    __ _1.00 _0.50 _0.33
   0.67  1.00  2.00    __ _2.00 _1.00 _0.67
   1.00  1.50  3.00    __ _3.00 _1.50 _1.00
 
 The final use of the format function gives a more readable result, with a width of
 six spaces per column and a uniform two digits after the decimal point.
 
    |. a %/ x: a
   _1 _3r2 _3  _  3  3r2    1
 _2r3   _1 _2  _  2    1  2r3
 _1r3 _1r2 _1  _  1  1r2  1r3
    0    0  0  0  0    0    0
  1r3  1r2  1 __ _1 _1r2 _1r3
  2r3    1  2 __ _2   _1 _2r3
    1  3r2  3 __ _3 _3r2   _1
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
%.
#+end_src
**** Name (monadic • dyadic)
Matrix Inverse • Matrix Divide
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d131.htm
#+begin_example
 
 Matrix Inverse                       %.  2 _ 2                       Matrix Divide
 
 If y is a non-singular matrix, then %.y     If y is non-singular, then x%.y is     
 is the inverse of y . For example:          (%.y) mp x . More generally, if the    
                                             columns of y are linearly independent  
    mp=: +/ . *         NB. [[file:///Applications/j64-806/addons/docs/help/dictionary/d300.htm][Matrix product]]   and if #x and #y agree, then x%.y      
    (%. ; ] ; %. mp ]) i. 2 2                minimizes the difference:              
 +--------+---+---+                                                                 
 |_1.5 0.5|0 1|1 0|                             d=: x - y mp x %. y                 
 |   1   0|2 3|0 1|                                                                 
 +--------+---+---+                          in the sense that the magnitudes +/d*+d
                                             are minimized. Scalar and vector cases 
 More generally, %.y is defined in terms     of y are treated as the one-column     
 of the dyadic case, with the left           matrix ,.y .                           
 argument =i.{:$y (an identity matrix) or,                                          
 equally, by the relation (%.y)mp x ↔ x %.   Geometrically, y mp x%.y is the        
 y .                                         projection of the vector x on the      
                                             column space of y, the point nearest to
 The shape of %.y is |.$y .                  x in the space spanned by the columns  
                                             of y .                                 
 The vector and scalar cases are defined                                            
 by using the matrix ,.y, but the shape of   Common uses of %. are in the solution  
 the result is $y .                          of linear equations and in the         
                                             approximation of functions by          
 For a non-zero vector y, the result of      polynomials, as in c=: (f x)%. x ^ /   
 %.y is a vector collinear with y whose      i.4 .                                  
 length is the reciprocal of that of y; it                                          
 is called the reflection of y in the unit                                          
 circle (or sphere). Thus:                                                          
 
    (%. ,: ] % %.) 2 3 4                                                            
 0.0689655 0.103448 0.137931                                                        
        29       29       29                                                        
 
 We will illustrate the use of %. in function fitting by the sine function,
 showing, in particular, the maximum over the magnitudes of the differences from
 the function being approximated:
 
    sin=: 1&o.                      NB. Function to be approximated
    x=: 5 %~ i. 6     
    c=: (sin x) %. x ^/ i.4         NB. Use of matrix divide
    ,.&.>@(] ; c"_ ; sin ; c&p. ; >./@:|@(sin-c&p.)) x
 +---+-----------+--------+-----------+-----------+
 |  0|_5.30503e_5|       0|_5.30503e_5|0.000167992|
 |0.2|    1.00384|0.198669|   0.198826|           |
 |0.4|  _0.018453|0.389418|   0.389321|           |
 |0.6|  _0.143922|0.564642|   0.564523|           |
 |0.8|           |0.717356|   0.717524|           |
 |  1|           |0.841471|   0.841416|           |
 +---+-----------+--------+-----------+-----------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
%:
#+end_src
**** Name (monadic • dyadic)
Square Root • Root
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d132.htm
#+begin_example
 
 Square Root                          %:  0 0 0                                Root
 
 %: y is the square root of y . If y is     x %: y is the x root of y . Thus, 3%:8 
 negative, the result is an imaginary       is 2, and 2%:y is %:y . In general, x  
 number. For example, %:-4 ↔ 0j2 .          %: y ↔ y^%x .                          
 
 For example:
 
    y=: i. 7
    y
 0 1 2 3 4 5 6
 
    2 %: y
 0 1 1.41421 1.73205 2 2.23607 2.44949
 
    %: y
 0 1 1.41421 1.73205 2 2.23607 2.44949
 
    r=: 1 2 3 4
    z=: r %:/ y
    z
 0 1       2       3       4       5       6
 0 1 1.41421 1.73205       2 2.23607 2.44949
 0 1 1.25992 1.44225  1.5874 1.70998 1.81712
 0 1 1.18921 1.31607 1.41421 1.49535 1.56508
           
    r ^~ z                     See agreement in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm][Section II B]], and note use of [[file:///Applications/j64-806/addons/docs/help/dictionary/d220v.htm][~]]
 0 1 2 3 4 5 6
 0 1 2 3 4 5 6
 0 1 2 3 4 5 6
 0 1 2 3 4 5 6
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
^
#+end_src
**** Name (monadic • dyadic)
Exponential • Power
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d200.htm
#+begin_example
 
 Exponential                          ^  0 0 0                                Power
 
 ^y is equivalent to e^y, where e is        x^2 and x^3 and x^0.5 are the square,  
 Euler’s number ^1 (approximately           cube, and square root of x .           
 2.71828). The natural logarithm (^.) is                                           
 inverse to ^ (that is, y=^.^y and y=^      In general, x^y is ^y*^.x, applying for
 ^.y).                                      complex numbers as well as real.       
                                                                                   
 The monad x&^ is inverse to the monad x    For a non-negative integer y, the      
 &^. . For example:                         phrasex ^ y is equivalent to */y # x;  
                                            in particular, */ on an empty list is  
    10&^ 10&^. 1 2 3 4 5                    1, and x^0 is 1 for any x, including 0 
 1 2 3 4 5                                  .                                      
                                                                                   
    10&^. 10&^ 1 2 3 4 5                    The fit conjunction applies to ^ to    
 1 2 3 4 5                                  yield a stope defined as follows: x^!.k
                                            n is */x + k*i. n . In particular,     
                                            ^!._1 is the falling factorial         
                                            function.                              
 
 The last result in the first example below illustrates the falling factorial
 function, formed by the fit conjunction. See [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#14][Chapter 5 of {14}]] for the use of
 stope functions, stope polynomials, and Stirling numbers in the difference
 calculus:
 
    e=: ^ 1 [ x=: 4 [ y=: 0 1 2 3
    ,.&.> x (e"_ ; e&^@] ; ^ ; ^@(] * ^.@]) ; (]^]) ; ^!._1) y
 +-------+-------+--+--+--+--+
 |2.71828|      1| 1| _| 1| 1|
 |       |2.71828| 4| 1| 1| 4|
 |       |7.38906|16| 4| 4|12|
 |       |20.0855|64|27|27|24|
 +-------+-------+--+--+--+--+
 
    S2=: %.@S1=: (^!._1/~ %. ^/~) @ i. @ x:
    (S1;S2) 8
 +---------------------------+-------------------+
 |1 0  0  0  0   0    0     0|1 0 0 0 0  0  0   0|
 |0 1 _1  2 _6  24 _120   720|0 1 1 1 1  1  1   1|
 |0 0  1 _3 11 _50  274 _1764|0 0 1 3 7 15 31  63|
 |0 0  0  1 _6  35 _225  1624|0 0 0 1 6 25 90 301|
 |0 0  0  0  1 _10   85  _735|0 0 0 0 1 10 65 350|
 |0 0  0  0  0   1  _15   175|0 0 0 0 0  1 15 140|
 |0 0  0  0  0   0    1   _21|0 0 0 0 0  0  1  21|
 |0 0  0  0  0   0    0     1|0 0 0 0 0  0  0   1|
 +---------------------------+-------------------+
 
 S1 gives (signed) Stirling numbers of the first kind and S2 gives Stirling numbers
 of the second kind. They can be used to transform between ordinary and stope
 polynomials. Note that [[file:///Applications/j64-806/addons/docs/help/dictionary/dxco.htm][x:]] gives [[file:///Applications/j64-806/addons/docs/help/dictionary/dictg.htm][extended precision]].
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
^.
#+end_src
**** Name (monadic • dyadic)
Natural Log • Logarithm
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d201.htm
#+begin_example
 
 Natural Log                          ^.  0 0 0                           Logarithm
 
 The natural logarithm (^.) is inverse      The base-x logarithm x^.y is the       
 to the exponential ^ (i.e., y=^.^y and     inverse of power (^) in the sense that 
 y=^^.y).                                   y = x^.x^y and y = x^x^.y .            
 
 Certain properties of logarithms are illustrated below:
 
    x=: 4 [ y=: 0 1 2 3
    (x^y);(x^.x^y);(x^.y);(x^x^.y)
 +---------+-------+-----------------+-------+
 |1 4 16 64|0 1 2 3|__ 0 0.5 0.792481|0 1 2 3|
 +---------+-------+-----------------+-------+
 
    logtable=: ^./~@i.
    <6j2 ": logtable 6
 +------------------------------------+
 |    _.  0.00  0.00  0.00  0.00  0.00|
 |    __  0.00     _     _     _     _|
 |    __  0.00  1.00  1.58  2.00  2.32|
 |    __  0.00  0.63  1.00  1.26  1.46|
 |    __  0.00  0.50  0.79  1.00  1.16|
 |    __  0.00  0.43  0.68  0.86  1.00|
 +------------------------------------+
 
 The first derivative of the natural logarithm is the reciprocal. For example:
 
    ^. d. 1 y=: 0 1 2 3 4 5 6
 _ 1 0.5 0.333333 0.25 0.2 0.166667
 
    % ^. d. 1 y
 0 1 2 3 4 5 6
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
$
#+end_src
**** Name (monadic • dyadic)
Shape Of • Shape
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d210.htm
#+begin_example
 
 Shape Of                             $  _ 1 _                                Shape
 
 $ y yields the shape of y as defined in    The shape of x$y is x,siy where siy is 
 [[file:///Applications/j64-806/addons/docs/help/dictionary/dicta.htm][Section II A]]. For example, the shape of    the shape of an item of y; x$y gives a 
 a 2-by-3 matrix is 2 3, and the shape      length error if y is empty and x,siy   
 of the scalar 3 is an empty list (whose    does not contain a zero. For example:  
 shape is 0).                                                                      
                                               y=: 3 4$'abcdefghijkl'              
 The rank of an argument y is #@$ y .          y ; 2 2$ y                          
 For example:                               +----+----+                            
                                            |abcd|abcd|                            
    rank=: #@$                              |efgh|efgh|                            
    (rank 3) , (rank ,3)                    |ijkl|    |                            
 0 1                                        |    |ijkl|                            
                                            |    |abcd|                            
    (rank 3 4),(rank i. 2 3 4)              +----+----+                            
 1 3                                                                               
                                            This example shows how the result is   
                                            formed from the items of y , the last  
                                            1-cell (abcd) showing that the         
                                            selection is cyclic.                   
                                                                                   
                                            The fit conjunction ($!.f) provides    
                                            fill specified by the atom f , or the  
                                            normal fill defined under [[file:///Applications/j64-806/addons/docs/help/dictionary/d521.htm][Take ({.)]] if 
                                            f is an empty vector.                  
 
 Since x $ y uses items from y, it is sometimes useful to ravel the right argument,
 as in x $ ,y. For example (using the y defined above):
 
    2 3 $ ,y
 abc
 def
 
 The fit conjunction is often useful for appending zeros or spaces. For example:
 
    8 $!.0 (2 3 4)
 2 3 4 0 0 0 0 0
 
    ]z=: 8$!.'*' 'abc'
 abc*****
             
    |. z
 *****cba
 
    2 5$!.a: ;: 'zero one two three four five six'
 +----+---+---+-----+----+
 |zero|one|two|three|four|
 +----+---+---+-----+----+
 |five|six|   |     |    |
 +----+---+---+-----+----+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
$.
#+end_src
**** Name (monadic • dyadic)
Sparse • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm
#+begin_example
 
 Sparse                              $.  _ _ _                              Sparse
 
 $.y converts a dense array to sparse,      0$.y applies $. or $.^:_1 as           
 and conversely $.^:_1 y converts a         appropriate; that is, converts a dense 
 sparse array to dense.                     array to sparse and a sparse array to  
                                            dense.                                 
 The identities f -: f&.$. and f -: f&.                                            
 ($.^:_1) hold for any function f , with    1$.sh;a;e produces a sparse array. sh  
 the possible exception of those (like      specifies the shape. a specifies the   
 overtake {.) which use the sparse          sparse axes; negative indexing may be  
 element as the fill.                       used. e specifies the “zero” element,  
                                            and its type determines the type of the
                                            array. The argument may also be sh;a (e
                                            is assumed to be a floating point 0) or
                                            just sh (a is assumed to be i.#sh — all
                                            axes are sparse — and e a floating     
                                            point 0).                              
                                                                                   
                                            2$.y gives the sparse axes (the a      
                                            part);                                 
                                            (2;a)$.y (re-)specifies the sparse     
                                            axes;                                  
                                            (2 1;a)$.y gives the number of bytes   
                                            required for (2;a)$.y ;                
                                            (2 2;a)$.y gives the number of items in
                                            the i part for the specified sparse    
                                            axes a (that is, #4$.(2;a)$.y ).       
                                                                                   
                                            3$.y gives the sparse element (the e   
                                            part); (3;e)$.y respecifies the sparse 
                                            element.                               
                                                                                   
                                            4$.y gives the index matrix (the i     
                                            part).                                 
                                                                                   
                                            5$.y gives the value array (the x      
                                            part).                                 
                                                                                   
                                            7$.y gives the number of non-sparse    
                                            entries in array y; that is, #4$.y or #
                                            5$.y.                                  
                                                                                   
                                            8$.y removes any completely “zero”     
                                            value cells and the corresponding rows 
                                            in the index matrix.                   
                                                                                   
                                            The inverse of n&$. is (-n)&$. .       
 
 The remainder of this text is divided into the following sections: [[file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm#introduction][Introduction]], 
 [[file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm#representation][Representation]], [[file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm#assertions][Assertions]], [[file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm#further%20examples][Further Examples]], [[file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm#sparse%20linear%20algebra][Sparse Linear Algebra]], and 
 [[file:///Applications/j64-806/addons/docs/help/dictionary/d211.htm#implementation%20status][Implementation Status]].
 
 Introduction
 
 We describe a sparse array extension to J using a representation that “does not
 store zeros”. One new verb $. is defined to create and manipulate sparse arrays,
 and existing primitives are extended to operate on such arrays. These ideas are
 illustrated in following examples:
 
    ] d=: (?. 3 4$2) * ?. 3 4$100
 0 55 79  0
 0 39  0 57
 0  0  0  0
 
    ] s=: $. d                  convert d to sparse and assign to s
 0 1 | 55
 0 2 | 79                       the display of s gives the indices of the
 1 1 | 39                       “non-zero” cells and the corresponding values
 1 3 | 57
 
    d -: s                      d and s match
 1
 
    o. s                        π times s
 0 1 | 172.788
 0 2 | 248.186
 1 1 | 122.522
 1 3 | 179.071
 
    o. d                        π times d
 0 172.788 248.186       0
 0 122.522       0 179.071
 0       0       0       0
 
    (o. s) -: o. d              function results independent of representation
 1
 
    0.5 + o. s
 0 1 | 173.288
 0 2 | 248.686
 1 1 | 123.022
 1 3 | 179.571
 
    <. 0.5 + o. s
 0 1 | 173
 0 2 | 248
 1 1 | 123
 1 3 | 179
 
    (<. 0.5 + o. s) -: <. 0.5 + o. d
 1
 
    d + s                       function arguments can be dense or sparse
 0 1 | 110
 0 2 | 158
 1 1 |  78
 1 3 | 114
 
    (d + s) -: 2*s              familiar algebraic properties are preserved
 1
 
    (d + s) -: 2*d
 1
 
    +/ s
 1 | 94
 2 | 79
 3 | 57
    
    +/"1 s
 0 | 134
 1 |  96
 
    |. s                        reverse
 1 1 | 39
 1 3 | 57
 2 1 | 55
 2 2 | 79
 
    |."1 s
 0 1 | 79
 0 2 | 55
 1 0 | 57
 1 2 | 39
 
    |: s                        transpose
 1 0 | 55
 1 1 | 39
 2 0 | 79
 3 1 | 57
 
    $ |: s
 4 3
 
    $.^:_1 |: s                 $.^:_1 converts a sparse array to dense
  0  0 0
 55 39 0
 79  0 0
  0 57 0
 
    (|:s) -: |:d
 1
 
    , s                         ravel; a sparse vector
 1 | 55
 2 | 79
 5 | 39
 7 | 57
 
    $ , s
 12
 
 Representation
 
 A sparse array y may be boolean, integer, floating point, complex, literal, or
 boxed, and has the (internal) parts sh;a;e;i;x where:
 
 sh   Shape, $y . Elements of the shape must be less than 2^31 , but the product   
      over the shape may be larger than 2^31 .                                     
 a    Axe(s), a vector of the sorted sparse (indexed) axes.                        
 e    Sparse element (“zero”). e is also used as the fill in any overtake of the   
      array.                                                                       
 i    Indices, an integer matrix of indices for the sparse axes.                   
 x    Values, a (dense) array of usually non-zero cells for the non-sparse axes    
      corresponding to the index matrix i .                                        
 
 For the sparse matrix s used in the introduction,
 
    ] d=: (?. 3 4$2) * ?. 3 4$100
 0 55 79  0
 0 39  0 57
 0  0  0  0
     
    ] s=: $. d
 0 1 | 55
 0 2 | 79
 1 1 | 39
 1 3 | 57
 
 The shape is 3 4 ; the sparse axes are 0 1 ; the sparse element is 0; the indices
 are the first two columns of numbers in the display of s ; and the values are the
 last column.
 
 Scalars continue to be represented as before (densely). All primitives accept
 sparse or dense arrays as arguments (e.g. sparse+dense or sparse$sparse). The
 display of a sparse array is a display of the index matrix (the i part), a blank
 column, a column of vertical lines, another blank column, and the corresponding
 value cells (the x part).
 
 Letting the sparse element be variable rather than fixed at zero makes many more
 functions closed on sparse arrays (e.g. ^y or 10+y), and familiar results can be
 produced by familiar phrases (e.g. <.0.5+y for rounding to the nearest integer).
 
 Assertions
 
 The following assertions hold for a sparse array, and displaying a sparse array
 invokes these consistency checks on it.
 
 imax =: _1+2^IF64{31   the largest internal integer                               
 63                                                                                
 rank =: #@$            rank                                                       
 type =: 3!:0           internal type                                              
                                                                                   
 1 = rank sh            vector                                                     
 sh -: <. sh            integral                                                   
 imax >: #sh            at most imax elements                                      
 (0<:sh) *. (sh<:imax)  bounded by 0 and imax                                      
                                                                                   
 1 = rank a             vector                                                     
 a e. i.#sh             bounded by 0 and rank-1                                    
 a -: ~. a              elements are unique                                        
 a -: /:~ a             sorted                                                     
                                                                                   
 0 = rank e             atomic                                                     
 (type e) = type x      has the same internal type as x                            
                                                                                   
 2 = rank i             matrix                                                     
 4 = type i             integral                                                   
 (#i) = #x              as many rows as the number of items in x                   
 ({:$i) = #a            as many columns as there are sparse axes                   
 (#i) <: */a{sh         # rows bounded by product over sparse axes lengths         
 imax >: */$i           # elements is bounded by imax                              
 (0<:i) *. (i <"1 a{sh) i bounded by 0 and the lengths of the sparse axes          
 i -: ~.i               rows are unique                                            
 i -: /:~ i             rows are sorted                                            
                                                                                   
 (rank x) = 1+(#sh)-#a  rank equals 1 plus the number of dense axes                
 imax >: */$x           # elements is bounded by imax                              
 (}.$x)-:((i.#sh)-.a){s item shape are elements of the shape corresponding to the  
                        dense axes                                                 
 (type x) e. 1 2 4 8 16 internal type is boolean, character, integer, real,        
 32                     complex, or boxed                                          
 
 Further Examples
 
    ] d=: (0=?. 2 3 4$3) * ?. 2 3 4$100
 46  0  0  0
  0 39  0  0
  0  0 46  0
 
  0  0  0  0
  0 60  0 62
  0  0 60 64
 
    ] s=: $. d                  convert d to sparse and assign to s
 0 0 0 | 46
 0 1 1 | 39
 0 2 2 | 46
 1 1 1 | 60
 1 1 3 | 62
 1 2 2 | 60
 1 2 3 | 64
 
    d -: s                      match is independent of representation
 1
 
    2 $. s                      sparse axes
 0 1 2
 
    3 $. s                      sparse element
 0
 
    4 $. s                      index matrix; columns correspond to the sparse axes
 0 0 0
 0 1 1
 0 2 2
 1 1 1
 1 1 3
 1 2 2
 1 2 3
 
    5 $. s                      corresponding values
 46 39 46 60 62 60 64
 
    ] u=: (2;2)$.s              make 2 be the sparse axis
 0 | 46  0  0
   |  0  0  0
   |         
 1 |  0 39  0
   |  0 60  0
   |         
 2 |  0  0 46
   |  0  0 60
   |         
 3 |  0  0  0
   |  0 62 64
 
    4 $. u                      index matrix
 0
 1
 2
 3
 
    5 $. u                      corresponding values
 46  0  0
  0  0  0
 
  0 39  0
  0 60  0
 
  0  0 46
  0  0 60
 
  0  0  0
  0 62 64
 
    ] t=: (2;0 1)$.s            make 0 1 be the sparse axes
 0 0 | 46  0  0  0
 0 1 |  0 39  0  0
 0 2 |  0  0 46  0
 1 1 |  0 60  0 62
 1 2 |  0  0 60 64
 
    7 {. t                      take
 0 0 | 46  0  0  0
 0 1 |  0 39  0  0
 0 2 |  0  0 46  0
 1 1 |  0 60  0 62
 1 2 |  0  0 60 64
 
    $ 7 {. t
 7 3 4
 
    7{."1 t                     take with rank
 0 0 | 46  0  0  0 0 0 0
 0 1 |  0 39  0  0 0 0 0
 0 2 |  0  0 46  0 0 0 0
 1 1 |  0 60  0 62 0 0 0
 1 2 |  0  0 60 64 0 0 0
 
    0 = t
 0 0 | 0 1 1 1
 0 1 | 1 0 1 1
 0 2 | 1 1 0 1
 1 1 | 1 0 1 0
 1 2 | 1 1 0 0
 
    3 $. 0 = t                  the sparse element of 0=t is 1
 1
 
    +/ , 0 = t
 17
 
    +/ , 0 = d                  answers are independent of representation
 17
 
    0 { t                       from
 0 | 46  0  0 0
 1 |  0 39  0 0
 2 |  0  0 46 0
 
    _2 (<1 2 3)}t               amend
 0 0 | 46  0  0  0
 0 1 |  0 39  0  0
 0 2 |  0  0 46  0
 1 1 |  0 60  0 62
 1 2 |  0  0 60 _2
 
    s=: 1 $. 20 50 1000 75 366
    $ s                         20 countries, 50 regions, 1000 salespersons,
 20 50 1000 75 366              75 products, 366 days in a year
 
    */ $ s                      the product over the shape can be greater than 2^31
 2.745e10
 
    r=: ?. 1e5 $ 1e6            revenues
    i=: ?. 1e5 5 $ $ s          corresponding locations
    s=: r (<"1 i)} s            assign revenues to corresponding locations
 
    7 {. ": s                   the first 7 rows in the display of s
  0  0  20 48 150 | 395543      the first row says that for country 0, region 0,
  0  0  39 40  67 | 316198      salesperson 20, product 48, day 150,
  0  0  47 37 172 | 650782      the revenue was 395543
  0  0  52 32 358 | 789844
  0  0  54 62  82 | 923413
  0  0  67 17 103 | 567367
  0  0  91 13 295 | 470919
 
    +/ , s                      total revenue
 |limit error                   the expression failed on ,s because it would
 | +/    ,s                     have required a vector of length 2.745e10
 
    +/@, s                      total revenue
 4.98338e10                     f/@, is supported by special code
 
    +/+/+/+/+/ s                total revenue
 4.98338e10
 
    +/^:5 s
 4.98338e10
 
    +/^:_ s
 4.98338e10
 
    +/ r
 4.98338e10
 
    +/"1^:4 s                   total revenue by country
  0 | 2.49298e9
  1 | 2.35118e9
  2 | 2.49324e9
  3 | 2.44974e9
  4 | 2.45138e9
  5 | 2.47689e9
  6 | 2.55936e9
  7 | 2.47153e9
  8 | 2.45907e9
  9 | 2.50249e9
 10 | 2.52785e9
 11 | 2.49482e9
 12 | 2.57532e9
 13 | 2.46509e9
 14 | 2.54962e9
 15 | 2.48942e9
 16 | 2.50503e9
 17 | 2.52147e9
 18 | 2.50127e9
 19 | 2.49603e9
 
    t=: +/^:2 +/"1^:2 s         total revenue by salesperson
 
    $t
 1000
 
    7{.t
 0 | 5.08254e7
 1 | 5.61577e7
 2 | 4.19914e7
 3 | 5.90514e7
 4 | 6.08208e7
 5 | 4.10632e7
 6 | 4.36616e7
 
 Sparse Linear Algebra
 
 Currently, only sparse matrix multiplication and the solutions of tri-diagonal
 linear system are implemented. For example:
 
    f=: }. @ }: @ (,/) @ (,."_1 +/&_1 0 1) @ i.
 
    f 5                         indices for a 5 by 5 tri-diagonal matrix
 0 0
 0 1
 1 0
 1 1
 1 2
 2 1
 2 2
 2 3
 3 2
 3 3
 3 4
 4 3
 4 4
 
    s=: (?. 13$100) (<"1 f 5)} 1 $. 5 5;0 1
    $s
 5 5
 
 The phrase 1$.5 5;0 1 makes a sparse array with shape 5 5 and sparse axes 0 1 ;
 <"1 f 5 makes boxed indices; and x (<"1 f 5)}y amends by x the locations in y
 indicated by the indices (scattered amendment).
 
    s
 0 0 | 46
 0 1 | 55
 1 0 | 79
 1 1 | 52
 1 2 | 54
 2 1 | 39
 2 2 | 60
 2 3 | 57
 3 2 | 60
 3 3 | 94
 3 4 | 46
 4 3 | 78
 4 4 | 13
 
    ] d=: $.^:_1 s              the dense representation of s
 46 55  0  0  0
 79 52 54  0  0
  0 39 60 57  0
  0  0 60 94 46
  0  0  0 78 13
 
    ] y=: ?. 5$80
 66 75 79 52 54
 
    y %. s
 0.352267 0.905377 0.00169115 0.764716 _0.434452
 
    y %. d                      answers are independent of representation
 0.352267 0.905377 0.00169115 0.764716 _0.434452
 
    s=: (?. (_2+3*1e5)$1000) (<"1 f 1e5)} 1 $. 1e5 1e5;0 1
 
    $ s                         s is a 1e5 by 1e5 matrix
 100000 100000
 
    y=: ?. 1e5$1000
 
    ts=: 6!:2 , 7!:2@]          time and space for execution
 
    ts 'y %. s'
 0.0550291 5.24358e6            0.056 seconds; 5.2 megabytes (Pentium III 500 Mhz)
 
 Implementation Status
 
 As of 2005-12-17, the following facilities support sparse arrays:
 
 =       =.      =: 
 < d     <.      <: 
 >       >.      >: 
 _       _.      _:
 
 +       +.      +:
 *       *.      *:
 -       -.      -:
 %       %. d    %:
 
 ^       ^.
 $       $.      $:
 ~       ~.      ~:
 |       |.      |:
 
         ..      .:
 :       :.      ::
 ,       ,.      ,:
         ;.
 
 #
 !       !.      !:
 / m     /. d    /: m
 \ m     \. m    \: m
 
 [               [:
 ]         
 { d     {.      {:
 } d     }.      }:
 
 "       ".      ": m
 `               `:
 @       @.      @:
 &       &.      &:
 
 e. d
 i.
 i:
 j.
 o.
 r.
 _9: to 9:
 
 3!:0 
 3!:1
 3!:2
 3!:3
 4!:55
 
 Notes:
 
   * Sparse literal and boxed arrays not yet implemented.
   * The dyad %. only implements the case of triadiagonal matrices.
   * Boxed left arguments for |: (diagonal slices) not yet implemented.
   * The monads f/ and f/"r are only implemented for + * >. <. +. *. = ~: , (and
     only boolean arguments for = and ~:); on an axis of length 2, the monads f/
     and f/"r are implemented for any function.
   * The monads f/@, (and f/@:, and f/&, and f/&:,) are supported by special code.
   * { and } only accept the following index arguments: integer arrays, <"1 on
     integer arrays, and scalar boxed indices (respectively, item indexing,
     scattered indexing, and index lists a0;a1;a2;...); and ({ only) sparse arrays.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
$:
#+end_src
**** Name (monadic • dyadic)
Self-Reference • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d212.htm
#+begin_example
 
 Self Reference                       $:  _ _ _                                    
 
 $: denotes the longest verb that contains it.                                     
 
 Example 1:
 
    1:`(] * $:@<:)@.* 5
 120
 
 In the foregoing expression, the agenda (@.) chooses the verb ] * $:@<: as long as
 the argument (reduced by one each time by the application of the decrement)
 remains non-zero. When the argument becomes zero, the result of the right argument
 of @. is zero, and the constant function 1: is chosen.
 
 If $:@ were omitted from the expression, it would execute once only as follows:
 
    1:`(] * <:)@.* 5
 20
 
 The inclusion of self-reference ensures that the entire function is re-executed
 after decrementing the argument.
 
 Example 2: In quicksort, a “pivot” is chosen at random from the list to be sorted.
 The overall result is the sorted result of the part less than the pivot, catenated
 to the part equal to the pivot, catenated to the sorted result of the part greater
 than the pivot.
 
    quicksort=: (($:@(<#[) , (=#[) , $:@(>#[)) ({~ ?@#)) ^: (1<#)
 
    ] v=: 20 ?.@$ 13
 10 3 3 6 11 11 4 0 10 2 5 6 2 0 1 3 12 10 11 5
    quicksort v
 0 0 1 2 2 3 3 3 4 5 5 6 6 10 10 10 11 11 11 12
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
~.
#+end_src
**** Name (monadic • dyadic)
Nub • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d221.htm
#+begin_example
 
 Nub                                    ~.  _                                      
 
 ~.y selects the nub of y , that is, all                                           
 of its distinct items. For example:                                               
                                                                                   
    y=: 3 3 $ 'ABCABCDEF'                                                          
    y;(~.y);(~.3);($~.3)                                                           
 +---+---+-+-+                                                                     
 |ABC|ABC|3|1|                                                                     
 |ABC|DEF| | |                                                                     
 |DEF|   | | |                                                                     
 +---+---+-+-+                                                                     
 
 More precisely, the nub is found by selecting the leading item, suppressing from
 the argument all items tolerantly equal to it, selecting the next remaining item,
 and so on. The fit conjunction applies to nub to specify the tolerance used.
 
 If f is a costly function, it may be quicker to evaluate f y by first evaluating
 f~. y (which yields all of the distinct results required), and then distributing
 them to their appropriate positions. The inner product with the
 self-classification table (produced by =) can be used to effect this distribution.
 For example:
 
    f=: *:
    f y=: 2 7 1 8 2 8 1 8
 4 49 1 64 4 64 1 64
 
    ,.&.>(~. ; f@~. ; = ; (f@~.(+/ .*)=) ; f)y
 +-+--+---------------+--+--+
 |2| 4|1 0 0 0 1 0 0 0| 4| 4|
 |7|49|0 1 0 0 0 0 0 0|49|49|
 |1| 1|0 0 1 0 0 0 1 0| 1| 1|
 |8|64|0 0 0 1 0 1 0 1|64|64|
 | |  |               | 4| 4|
 | |  |               |64|64|
 | |  |               | 1| 1|
 | |  |               |64|64|
 +-+--+---------------+--+--+
 
    NUB=: 1 : 'x@~. +/ . * ='           NB. Adverb
    *: NUB y
 4 49 1 64 4 64 1 64
 
    nubindex=: ~. i. ]
    (nubindex ; (nubindex { ~.)) y
 +---------------+---------------+
 |0 1 2 3 0 3 2 3|2 7 1 8 2 8 1 8|
 +---------------+---------------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
~:
#+end_src
**** Name (monadic • dyadic)
Nub Sieve • Not-Equal
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d222.htm
#+begin_example
 
 Nub Sieve                           ~:  _ 0 0                           Not Equal
 
 ~:y is the boolean list b such that b#y    x~:y is 1 if x is tolerantly unequal to
 is the nub of y . For example:             y . See [[file:///Applications/j64-806/addons/docs/help/dictionary/d000.htm][Equal (=)]].                     
                                                                                   
    ~: 'Mississippi'                        The fit conjunction may be used to     
 1 1 1 0 0 0 0 0 1 0 0                      specify tolerance, as in ~:!.t .       
 
 The result of nub-sieve can be used to select the nub as follows:
 
    y=: 8 1 8 2 8 1 7 2
    ~. y
 8 1 2 7
 
    ~: y 
 1 1 0 1 0 0 1 0
 
    (~: y) # y
 8 1 2 7
 
    y #~ ~: y
 8 1 2 7
 
 The dyad ~: applies to any argument, but for booleans it is called exclusive-or.
 For example:
 
    d=: 0 1
    d ~:/ d
 0 1
 1 0
 
 Not-equal, not equal, and the dual of equal with respect to not, all agree as
 illustrated below.
 
    (~:/ ; -.@=/ ; =&.-./)~ d
 +---+---+---+
 |0 1|0 1|0 1|
 |1 0|1 0|1 0|
 +---+---+---+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
|
#+end_src
**** Name (monadic • dyadic)
Magnitude • Residue
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d230.htm
#+begin_example
 
 Magnitude                            |  0 0 0                              Residue
 
 |y ↔ %:y*+y . For example:                 The familiar use of residue is in      
                                            determining the remainder on dividing a
    | 6 _6 3j4                              non-negative integer by a positive:    
 6 6 5                                                                             
                                               3 | 0 1 2 3 4 5 6 7                 
                                            0 1 2 0 1 2 0 1                        
 
 The definition y-x*<. y % x+0=x extends the residue to a zero left argument, and
 to negative and fractional finite arguments. For example:
 
    over =: ({. ,.@; }.)@":@,
    by   =: ' '&;@,.@[ ,. ]
 
    x=: 3 2 1 0 _1 _2 _3 
    y=: 0 1 2 3 4 5 6 7 8
 
    x by y over x |/ y
 +--+------------------------+
 |  |0  1  2  3  4  5 6  7  8|
 +--+------------------------+
 | 3|0  1  2  0  1  2 0  1  2|
 | 2|0  1  0  1  0  1 0  1  0|
 | 1|0  0  0  0  0  0 0  0  0|
 | 0|0  1  2  3  4  5 6  7  8|
 |_1|0  0  0  0  0  0 0  0  0|
 |_2|0 _1  0 _1  0 _1 0 _1  0|
 |_3|0 _2 _1  0 _2 _1 0 _2 _1|
 +--+------------------------+
 
 To produce a true zero for cases such as (%3)|(2%3) the residue is made tolerant
 as shown in the definition of res below:
 
    res=: f`g@.agenda"0
       agenda=: ([ = 0:) +. (<. = >.)@S
          S=: ] % [ + [ = 0:
       f=: ] - [ * <.@S 
       g=: ] * [ = 0:
 
    0.1 res 2.5 3.64 2 _1.6
 0 0.04 0 0
 
    (,. ; res/~ ; |/~) a=: 2 -~ i.5
 +--+------------+------------+
 |_2| 0 _1 0 _1 0| 0 _1 0 _1 0|
 |_1| 0  0 0  0 0| 0  0 0  0 0|
 | 0|_2 _1 0  1 2|_2 _1 0  1 2|
 | 1| 0  0 0  0 0| 0  0 0  0 0|
 | 2| 0  1 0  1 0| 0  1 0  1 0|
 +--+------------+------------+
 
 The dyad | applies to complex numbers. Moreover, the fit conjunction may be
 applied to control the tolerance used. The dyad m&|@^ on integer arguments is
 computed in a way that avoids large intermediate numbers. For example: 2 (1e6&|@^)
 10^100x
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
|.
#+end_src
**** Name (monadic • dyadic)
Reverse • Rotate (Shift)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d231.htm
#+begin_example
 
 Reverse                              |.  _ 1 _                              Rotate
 
 |. y reverses the order of the items of    x|.y rotates successive axes of y by   
 y . For example:                           successive elements of x . Thus:       
                                                                                   
    |. t=: 'abcdefg'                           1 2 |. i. 3 5                       
 gfedcba                                     7  8  9  5  6                         
                                            12 13 14 10 11                         
 The right shift is the monad |.!.f ,        2  3  4  0  1                         
 equivalent to the dyad |.!.f with a                                               
 left argument _1 . For example:            The phrase x |.!.f y produces a shift: 
                                            the items normally brought around by   
    |.!.'#' t                               the cyclic rotation are replaced by the
 #abcdef                                    atom f unless f is empty (0=#f), in    
                                            which case they are replaced by the    
    |.!.10 i.3 3                            normal fill defined under [[file:///Applications/j64-806/addons/docs/help/dictionary/d521.htm][Take ({.)]]:   
 10 10 10                                                                          
  0  1  2                                      2 _2 |.!.'#'"0 1 t                  
  3  4  5                                   cdefg##                                
                                            ##abcde                                
 
    y=: a.{~ (a. i. 'A') + i. 5 6
 
    (] ; 2&|. ; _2&|. ; 2&|."1  ; 2&(|.!.'*'"1)) y
 +------+------+------+------+------+
 |ABCDEF|MNOPQR|STUVWX|CDEFAB|CDEF**|
 |GHIJKL|STUVWX|YZ[\]^|IJKLGH|IJKL**|
 |MNOPQR|YZ[\]^|ABCDEF|OPQRMN|OPQR**|
 |STUVWX|ABCDEF|GHIJKL|UVWXST|UVWX**|
 |YZ[\]^|GHIJKL|MNOPQR|[\]^YZ|[\]^**|
 +------+------+------+------+------+
 
    (] ; |. ; |."1 ; |.!.'*'"1  ; (2: |. ])) y
 +------+------+------+------+------+
 |ABCDEF|YZ[\]^|FEDCBA|*ABCDE|MNOPQR|
 |GHIJKL|STUVWX|LKJIHG|*GHIJK|STUVWX|
 |MNOPQR|MNOPQR|RQPONM|*MNOPQ|YZ[\]^|
 |STUVWX|GHIJKL|XWVUTS|*STUVW|ABCDEF|
 |YZ[\]^|ABCDEF|^]\[ZY|*YZ[\]|GHIJKL|
 +------+------+------+------+------+
 
    1 _2 |. !. '*' 3{. y
 **GHIJ
 **MNOP
 ******
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
|:
#+end_src
**** Name (monadic • dyadic)
Transpose • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d232.htm
#+begin_example
 
 Transpose                           |:  _ 1 _                           Transpose
 
 |: reverses the order of the axes of       x|:y moves axes x to the tail end. If x
 its argument. For example:                 is boxed, the axes in each box are run 
                                            together to produce a single axis:     
    (] ; |:) i. 3 4                                                                
 +---------+------+                            y=: 3 4$'abcdefghijkl'              
 |0 1  2  3|0 4  8|                            y;(1 0|:y);(0|:y);((<0 1)|:y)       
 |4 5  6  7|1 5  9|                         +----+---+---+---+                     
 |8 9 10 11|2 6 10|                         |abcd|aei|aei|afk|                     
 |         |3 7 11|                         |efgh|bfj|bfj|   |                     
 +---------+------+                         |ijkl|cgk|cgk|   |                     
                                            |    |dhl|dhl|   |                     
                                            +----+---+---+---+                     
 
 For example:
 
    y=: a.{~ (a. i. 'a') + i. 2 3 4
    z=: y;(2 1 |: y);((<2 1) |: y);(|: i. 4 5)
    z ,&< |:&.> z
 +------------------------+-------------------------+
 |+----+---+---+---------+|+--+--+--+--------------+|
 ||abcd|aei|afk|0 5 10 15|||am|am|am| 0  1  2  3  4||
 ||efgh|bfj|mrw|1 6 11 16|||eq|bn|fr| 5  6  7  8  9||
 ||ijkl|cgk|   |2 7 12 17|||iu|co|kw|10 11 12 13 14||
 ||    |dhl|   |3 8 13 18|||  |dp|  |15 16 17 18 19||
 ||mnop|   |   |4 9 14 19|||bn|  |  |              ||
 ||qrst|mqu|   |         |||fr|eq|  |              ||
 ||uvwx|nrv|   |         |||jv|fr|  |              ||
 ||    |osw|   |         |||  |gs|  |              ||
 ||    |ptx|   |         |||co|ht|  |              ||
 |+----+---+---+---------+||gs|  |  |              ||
 |                        ||kw|iu|  |              ||
 |                        ||  |jv|  |              ||
 |                        ||dp|kw|  |              ||
 |                        ||ht|lx|  |              ||
 |                        ||lx|  |  |              ||
 |                        |+--+--+--+--------------+|
 +------------------------+-------------------------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
,
#+end_src
**** Name (monadic • dyadic)
Ravel • Append
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d320.htm
#+begin_example
 
 Ravel                               ,  _ _ _                                Append
 
 ,y gives a list of the atoms of y in       x,y appends items of y to items of x   
 “normal” order: the result is ordered      after:                                 
 by items, by items within items, etc.                                             
 The result shape is 1$*/$ y . Thus:                                               
                                            1. Reshaping an atomic argument to the 
    y=: 2 4 $ 'abcdefgh'                       shape of the items of the other,    
                                            2. Bringing the arguments to a common  
    y                                          rank (of at least 1) by repeatedly  
 abcd                                          [[file:///Applications/j64-806/addons/docs/help/dictionary/d322.htm][itemizing (,:)]] any of lower rank,   
 efgh                                          and                                 
                                            3. Bringing them to a common shape by  
    ,y                                         padding with fill elements in the   
 abcdefgh                                      manner described in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm#fill][Section II B]].   
 
                                            The fit conjunction (,!.f) provides    
                                            fill specified by the atom f .         
 
    ]a=: i. 2 3 3
  0  1  2
  3  4  5
  6  7  8
 
  9 10 11
 12 13 14
 15 16 17
 
    ,a
 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
 
    ,"2 a
 0  1  2  3  4  5  6  7  8
 9 10 11 12 13 14 15 16 17
 
 The following examples illustrate the dyadic case:
 
    ('abc','de');('abc',"0/'de');(5 6 7,i.2 3);(7,i.2 3)
 +-----+--+-----+-----+
 |abcde|ad|5 6 7|7 7 7|
 |     |ae|0 1 2|0 1 2|
 |     |  |3 4 5|3 4 5|
 |     |bd|     |     |
 |     |be|     |     |
 |     |  |     |     |
 |     |cd|     |     |
 |     |ce|     |     |
 +-----+--+-----+-----+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
,.
#+end_src
**** Name (monadic • dyadic)
Ravel Items • Stitch
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d321.htm
#+begin_example
 
 Ravel Items                          ,.  _ _ _                              Stitch
 
 If y is an atom, then ,.y is 1 1$y ;       x,.y is equivalent to x,"_1 y . In     
 otherwise, ,.y is ,"_1 y , the table       other words, items of x are stitched to
 formed by ravelling each item of y .       corresponding items of y .             
                                                                                   
                                            The fit conjunction (,.!.f) provides   
                                            fill specified by the atom f .         
 
 For example:
 
    a=: i. 2 3 2
    ($,.3) ; (,.2 3 5 7 11) ; ($,.<'abcd') ; a ; (,.a)
 +---+--+---+-----+-------------+
 |1 1| 2|1 1| 0  1|0 1 2 3  4  5|
 |   | 3|   | 2  3|6 7 8 9 10 11|
 |   | 5|   | 4  5|             |
 |   | 7|   |     |             |
 |   |11|   | 6  7|             |
 |   |  |   | 8  9|             |
 |   |  |   |10 11|             |
 +---+--+---+-----+-------------+
 
 The following examples illustrate the dyadic case:
 
    b=:3 4$'abcdefghijkl' [ c=:3 4$'ABCDEFGHIJKL'
    b ; c ; (b,.c) ; (b,c) ; a ; (a ,. |."1 a) ; (,/a) ; (,./a)
 +----+----+--------+----+-----+-----+-----+---------+
 |abcd|ABCD|abcdABCD|abcd| 0  1| 0  1| 0  1|0 1  6  7|
 |efgh|EFGH|efghEFGH|efgh| 2  3| 2  3| 2  3|2 3  8  9|
 |ijkl|IJKL|ijklIJKL|ijkl| 4  5| 4  5| 4  5|4 5 10 11|
 |    |    |        |ABCD|     | 1  0| 6  7|         |
 |    |    |        |EFGH| 6  7| 3  2| 8  9|         |
 |    |    |        |IJKL| 8  9| 5  4|10 11|         |
 |    |    |        |    |10 11|     |     |         |
 |    |    |        |    |     | 6  7|     |         |
 |    |    |        |    |     | 8  9|     |         |
 |    |    |        |    |     |10 11|     |         |
 |    |    |        |    |     | 7  6|     |         |
 |    |    |        |    |     | 9  8|     |         |
 |    |    |        |    |     |11 10|     |         |
 +----+----+--------+----+-----+-----+-----+---------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
,:
#+end_src
**** Name (monadic • dyadic)
Itemize • Laminate
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d322.htm
#+begin_example
 
 Itemize                             ,:  _ _ _                             Laminate
 
 ,:y adds a leading unit axis to y ,        An atomic argument in x,:y is first    
 giving a result of shape 1,$y . Thus:      reshaped to the shape of the other (or 
                                            to a list if the other argument is also
    $ ,: 2 3 4                              atomic); the results are then itemized 
 1 3                                        and catenated, as in (,:x),(,:y) .     
                                                                                   
                                            The fit conjunction (,:!.f) provides   
                                            fill specified by the atom f , or the  
                                            normal fill defined under [[file:///Applications/j64-806/addons/docs/help/dictionary/d521.htm][Take ({.)]] if 
                                            f is an empty vector.                  
 
    s=: 3 [ v=: 2 3 4 [ m=: i. 3 3
    (,:s); ($,: s); (,:v); ($,:v); ($,:m); ($,:^:4 v)
 +-+-+-----+---+-----+---------+
 |3|1|2 3 4|1 3|1 3 3|1 1 1 1 3|
 +-+-+-----+---+-----+---------+
 
 The following examples compare the dyadic cases of Append and Laminate:
 
    a=: 'abcd' [ A=: 'ABCD' [ b=: 'abcdef'
    (a,A) ; (a,:A) ; (a,:b) ; (m,m) ; (m ,: m)
 +--------+----+------+-----+-----+
 |abcdABCD|abcd|abcd  |0 1 2|0 1 2|
 |        |ABCD|abcdef|3 4 5|3 4 5|
 |        |    |      |6 7 8|6 7 8|
 |        |    |      |0 1 2|     |
 |        |    |      |3 4 5|0 1 2|
 |        |    |      |6 7 8|3 4 5|
 |        |    |      |     |6 7 8|
 +--------+----+------+-----+-----+
 
    t=: i. 3 2 2
    t ; (,/t) ; (,./t) ; (,:/t)
 +-----+-----+-------------+-----+
 | 0  1| 0  1|0 1 4 5  8  9| 0  1|
 | 2  3| 2  3|2 3 6 7 10 11| 2  3|
 |     | 4  5|             |     |
 | 4  5| 6  7|             | 0  0|
 | 6  7| 8  9|             | 0  0|
 |     |10 11|             |     |
 | 8  9|     |             |     |
 |10 11|     |             | 4  5|
 |     |     |             | 6  7|
 |     |     |             |     |
 |     |     |             | 8  9|
 |     |     |             |10 11|
 +-----+-----+-------------+-----+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
;
#+end_src
**** Name (monadic • dyadic)
Raze • Link
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d330.htm
#+begin_example
 
 Raze                                ;  _ _ _                                 Link
 
 ;y assembles along a leading axis the      x;y is (<x),y if y is boxed, and (<x), 
 opened elements of the ravel of y . The    <y if y is open.                       
 fit conjunction (;!.f) provides fill                                              
 specified by the atom f .                                                         
 
    ]bv=: 1 2 3;4 5 6;7 8 9
 +-----+-----+-----+
 |1 2 3|4 5 6|7 8 9|
 +-----+-----+-----+
 
    ;bv
 1 2 3 4 5 6 7 8 9
 
    ]m=: >bv
 1 2 3
 4 5 6
 7 8 9
 
    ;/ m
 +-----+-----+-----+
 |1 2 3|4 5 6|7 8 9|
 +-----+-----+-----+
 
    (;/1 2 3 4 5) ,&< (;/i. 3 4)
 +-----------+---------------------------+
 |+-+-+-+-+-+|+-------+-------+---------+|
 ||1|2|3|4|5|||0 1 2 3|4 5 6 7|8 9 10 11||
 |+-+-+-+-+-+|+-------+-------+---------+|
 +-----------+---------------------------+
 
    ]txt=: '3 %: 4 ^. 5'
 3 %: 4 ^. 5
             
    ]s=: ;: txt                 NB. Word formation
 +-+--+-+--+-+
 |3|%:|4|^.|5|
 +-+--+-+--+-+
 
    ;s
 3%:4^.5
             
    (boxifopen=: <^:(< -: {:@;~)) 3 4
 +---+
 |3 4|
 +---+
 
    (<3 4) = boxifopen <3 4
 1
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
;:
#+end_src
**** Name (monadic • dyadic)
Words • Sequential Machine
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d332.htm
#+begin_example
 
 Words                               ;:  1 _ _                   Sequential Machine
 
 ;:y is the list of boxed words in the list y according to     x;:y implements a sequential machine 
 the rhematic rules of [[file:///Applications/j64-806/addons/docs/help/dictionary/dict1.htm][Part I]] and the rules regarding NB. .    (finite state machine, finite state  
 The function also applies reasonably well to ordinary text.   automaton). x is the specification   
                                                               of a machine, including the state    
 For a suitable left argument x , the result of x;:y is        transition table, and y is the       
 equivalent to ;:y . Thus:                                     input. A sequential machine solves   
                                                               the problem of recognizing the       
 mj=: 256$0                     NB. X other                    “words” in the input. The machine    
 mj=: 1 (9,a.i.' ')}mj          NB. S space and tab            starts in some initial state and     
 mj=: 2 ((a.i.'Aa')+/i.26)}mj   NB. A A-Z a-z excluding N B    processes the input one item at a    
 mj=: 3 (a.i.'N')}mj            NB. N the letter N             time; given the current state and    
 mj=: 4 (a.i.'B')}mj            NB. B the letter B             input item, the new state and output 
 mj=: 5 (a.i.'0123456789_')}mj  NB. 9 digits and _             are determined by the state          
 mj=: 6 (a.i.'.')}mj            NB. D .                        transition table. The machine then   
 mj=: 7 (a.i.':')}mj            NB. C :                        proceeds to process the next input   
 mj=: 8 (a.i.'''')}mj           NB. Q quote                    item. In detail:                     
                                                                                                    
 sj=: _2]\"1 }.".;._2 (0 : 0)                                  y is any array and x=.f;s;m;ijrd is  
 ' X    S    A    N    B    9    D    C    Q ']0               a boxed list from which ijrd or both 
  1 1  0 0  2 1  3 1  2 1  6 1  1 1  1 1  7 1  NB. 0 space     m and ijrd may be elided.            
  1 2  0 3  2 2  3 2  2 2  6 2  1 0  1 0  7 2  NB. 1 other                                          
  1 2  0 3  2 0  2 0  2 0  2 0  1 0  1 0  7 2  NB. 2 alp/num   f is a function code, an integer     
  1 2  0 3  2 0  2 0  4 0  2 0  1 0  1 0  7 2  NB. 3 N         between 0 and 5. (Explained below.)  
  1 2  0 3  2 0  2 0  2 0  2 0  5 0  1 0  7 2  NB. 4 NB                                             
  9 0  9 0  9 0  9 0  9 0  9 0  1 0  1 0  9 0  NB. 5 NB.       m is a list of the input mapping;    
  1 4  0 5  6 0  6 0  6 0  6 0  6 0  1 0  7 4  NB. 6 num       each box of m contains the items of  
  7 0  7 0  7 0  7 0  7 0  7 0  7 0  7 0  8 0  NB. 7 '         y that are mapped to the same index. 
  1 2  0 3  2 2  3 2  2 2  6 2  1 2  1 2  7 0  NB. 8 ''        That is, the mapped input is my=.    
  9 0  9 0  9 0  9 0  9 0  9 0  9 0  9 0  9 0  NB. 9 comment   (y i.~;m) { (#m),~(#&>m)#i.#m . If y 
 )                                                             is a string (a list of literals), m  
                                                               may also be a list of non-negative   
    x=: 0;sj;mj                                                integers corresponding to each atom  
    y=: 'sum=. (i.3 4)+/ .*0j4+pru 4'                          of the alphabet a. , and the mapped  
                                                               input is my=.(a.i.y){m . Finally, if 
    x ;: y                                                     m is the empty list or is elided     
 +---+--+-+--+---+-+-+-+-+-+---+-+---+-+                       (and y is a numeric list), then the  
 |sum|=.|(|i.|3 4|)|+|/|.|*|0j4|+|pru|4|                       mapped input my is just y itself.    
 +---+--+-+--+---+-+-+-+-+-+---+-+---+-+                                                            
    (x ;: y) -: ;: y                                           s is a 3-dimensional, 2-column array 
 1                                                             of non-negative integers of the      
                                                               state transition and output table.   
    (5;sj;mj) ;: y                                             It has shape p,q,2 where p bounds    
  0 _1 0 2 2 1                                                 the states and q bounds the mapped   
  1  0 2 2 2 0                                                 inputs. That is, p>0{"1 s , and q>#m 
  2  0 2 2 2 0                                                 if m is a list of boxes or q>m if m  
  3  0 2 0 1 2                                                 is a list of integers.               
  4  3 1 6 1 0                                                                                      
  5  3 1 1 0 3                                                 ijrd is an integer parameter list    
  6 _1 0 0 1 1                                                 with up to 4 elements. i is the      
  7  6 1 2 2 2                                                 initial iteration counter and index  
  8  7 2 6 1 0                                                 into the input y , r is the initial  
  9  7 1 5 6 2                                                 state, j is the initial index of the 
 10  9 6 1 0 5                                                 current word, and d is an            
 11 _1 0 5 6 1                                                 end-of-input action parameter (see   
 12 11 6 0 1 4                                                 below). It is required that (0<:i)   
 13 12 1 0 1 2                                                 *.i<#y and (_1=j)+.(0<:j)*.j<i . If  
 14 13 1 0 1 2                                                 ijrd is elided, then the defaults    
 15 14 1 1 0 3                                                 are 0 _1 0 _1 .                      
 16 _1 0 6 1 1                                                                                      
 17 16 1 0 1 2                                                 x;:y iterates over the atoms of my,  
 18 17 1 5 6 2                                                 the mapped input. r is the current   
 19 18 6 2 6 0                                                 state and j is the beginning index   
 20 18 6 5 6 0                                                 of a word; initially, r is 0 and j   
 21 18 6 0 1 4                                                 is _1 (or as specified by ijr). At   
 22 21 1 2 2 2                                                 iteration i , the current mapped     
 23 22 2 2 2 0                                                 input is c=.i{my and the relevant    
 24 22 2 2 2 0                                                 state table entry is e=.s{~<r,c (a   
 25 22 2 1 0 3                                                 2-element integer list). The new     
 26 _1 0 5 6 1                                                 state is 0{e , and the output code 1 
                                                               {e signifies one of the following:   
                                                                 0    no output                     
                                                                 1    j=.i                          
                                                                 2    j=.i  [ ew(i,j,r,c)           
                                                                 3    j=._1 [ ew(i,j,r,c)           
                                                                 4    j=.i  [ ev(i,j,r,c)           
                                                                 5    j=._1 [ ev(i,j,r,c)           
                                                                 6    stop                          
                                                                                                    
                                                               ew(i,j,r,c) (“emit word”) signals    
                                                               index error if j is _1 , and         
                                                               accumulates to the result            
                                                               information on the current word      
                                                               according to the function code f :   
                                                                                                    
                                                                 0    <y{~j+i.i-j    the word boxed 
                                                                 1    y{~j+i.i-j     the word       
                                                                 2    j,i-j          word index and 
                                                                                     length         
                                                                 3    c+q*r          state table    
                                                                                     index          
                                                                 4    j,             both 2 and 3   
                                                                      (i-j),c+q*r    above          
                                                                 5    i,j,r,c,s{~    trace          
                                                                      <r,c                          
                                                                                                    
                                                               ev(i,j,r,c) (“emit vector”) is       
                                                               similiar, but the current word and   
                                                               any intervening items are catenated  
                                                               to the previous word if the previous 
                                                               emit was ev and the state at that    
                                                               time was r.                          
                                                                                                    
                                                               After the last atom of my has been   
                                                               processed, i is #y , and the         
                                                               end-of-input action, if any, is      
                                                               performed: If d=.3{ijrd is           
                                                               non-negative, the action is a single 
                                                               iteration with c=.d ; if d is        
                                                               negative and j is not _1 , then      
                                                               ev(j,i,r,c) is evaluated.            
                                                                                                    
                                                               Function code f=5 specifies trace;   
                                                               the result of x;:y is a 6-column     
                                                               integer matrix, and for each         
                                                               iteration there is a row i,j,r,c,s{~ 
                                                               <r,c . This matrix usually has #y    
                                                               rows, but can have fewer if output   
                                                               code 6 was encountered or if any of  
                                                               output codes 2 to 5 were encountered 
                                                               and j was _1 .                       
                                                                                                    
                                                               Thus (0;s;m);:y is a list of boxed   
                                                               items of y and (2;s;m);:y is a       
                                                               2-column integer table of indices    
                                                               and lengths, and:                    
                                                                                                    
                                                               ((0;s;m);:y) -: (2;s;m) (,"0@;: <;.0 
                                                               ]) y                                 
 
    s=: '*: @ -: @ i. 2 3'
    do=: ".
    do s
    0 0.25    1
 2.25    4 6.25
 
    ;: s
 +--+-+--+-+--+---+
 |*:|@|-:|@|i.|2 3|
 +--+-+--+-+--+---+
 
    ; ;: s
 *:@-:@i.2 3
 
    p=: 'When eras die, their legacies/'
    q=: 'are left to strange police'
    r=: 'Professors in New England guard'
    s=: 'the glory that was Greece'
 
    ;: p
 +----+----+---+-+-----+--------+-+
 |When|eras|die|,|their|legacies|/|
 +----+----+---+-+-----+--------+-+
 
    > ;: p,q
 When    
 eras    
 die     
 ,       
 their   
 legacies
 /       
 are     
 left    
 to      
 strange 
 police 
 
    |.&.;: p
 / legacies their , die eras When
 
 The following examples of the dyad ;: separate quotes from non-quotes. The quote
 character is mapped to 1 and other characters are mapped to 0; column 0 of the
 state table is for “other” (non-quotes) and column 1 is for the quote.
 
    sq=: 4 2 2$ 1 1 2 1  1 0 2 2  2 0 3 0  1 2 2 0
    <"1 sq
 +---+---+
 |1 1|2 1|
 +---+---+
 |1 0|2 2|
 +---+---+
 |2 0|3 0|
 +---+---+
 |1 2|2 0|
 +---+---+
    ] y=: '''The Power of the Powerless'' by Havel and ''1984'' by Orwell'
 'The Power of the Powerless' by Havel and '1984' by Orwell
    (0;sq;''''=a.) ;: y
 +----------------------------+--------------+------+----------+
 |'The Power of the Powerless'| by Havel and |'1984'| by Orwell|
 +----------------------------+--------------+------+----------+
    (2;sq;''''=a.) ;: y
  0 28
 28 14
 42  6
 48 10
    (3;sq;''''=a.) ;: y
 6 3 6 2
    (4;sq;''''=a.) ;: y
  0 28 6
 28 14 3
 42  6 6
 48 10 2
 
    sqx=: 4 2 2 $ 1 1 2 0  1 0 2 3  2 0 3 0  1 1 2 0
    <"1 sqx
 +---+---+
 |1 1|2 0|
 +---+---+
 |1 0|2 3|
 +---+---+
 |2 0|3 0|
 +---+---+
 |1 1|2 0|
 +---+---+
    (1;sqx;''''=a.) ;: y
  by Havel and  by Orwell
 
    f=: (1;sqx;''''=a.)&;:
    g=: (+: ~:/\)@(''''&=) # ]
    (f -: g) y
 1
 
 A similar machine can be used to extract only the quoted strings. To prevent an
 unmatched quote from being recognized as the start of a quoted string, the ijrd
 field can be used to treat the end-of-string as a non-quote character:
 
    ] y=: '''Preposterous!''  He couldn''t go on.'
 'Preposterous!'  He couldn't go on.
    sq=: 4 2 2$ 1 1 2 1  1 0 2 1  2 0 3 0  1 3 2 0
    (0;sq;''''=a.) ;: y
 +---------------+---------+
 |'Preposterous!'|'t go on.|
 +---------------+---------+
    (0;sq;(''''=a.);0 _1 0 0) ;: y
 +---------------+
 |'Preposterous!'|
 +---------------+
 
 The labs “Sequential Machines” and “Huffman Coding” contain further examples on
 the use of sequential machines.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
#
#+end_src
**** Name (monadic • dyadic)
Tally • Copy
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d400.htm
#+begin_example
 
 Tally                                #  _ 1 _                                 Copy
 
 #y is the number of items in y . Thus:     If the arguments have an equal number  
                                            of items, then x#y copies +/x items    
    (#'');(#'a');(#'octothorpe')            from y, with i{x repetitions of item i 
 +-+-+--+                                   {y . Otherwise, if one is an atom it is
 |0|1|10|                                   repeated to make the item count of the 
 +-+-+--+                                   arguments equal.                       
                                                                                   
    (#3);(#,3);(# 3 4)                      The complex left argument a j. b copies
 +-+-+-+                                    a items followed by b fills. The fit   
 |1|1|2|                                    conjunction provides specified fills,  
 +-+-+-+                                    as in #!.f .                           
                                                                                   
    (#i.4 5 6);(#$i.4 5 6)                                                         
 +-+-+                                                                             
 |4|3|                                                                             
 +-+-+                                                                             
 
 Copy is illustrated by the following examples:
 
    0 1 2 3 4 5 # 0 1 2 3 4 5
 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 
 
    t=: 3 4 $'abcdefghijkl' [ n=: i. 3 4
    t ; n ; (3 0 1 # t) ; (3 0 1 # n) ; (3 1 4 2 #"1 t)
 +----+---------+----+---------+----------+
 |abcd|0 1  2  3|abcd|0 1  2  3|aaabccccdd|
 |efgh|4 5  6  7|abcd|0 1  2  3|eeefgggghh|
 |ijkl|8 9 10 11|abcd|0 1  2  3|iiijkkkkll|
 |    |         |ijkl|8 9 10 11|          |
 +----+---------+----+---------+----------+
 
    k=: 2j1 0 1j2
    (k # t);(k # n);(k  #!.'*' t);(k #!.4 n)
 +----+---------+----+---------+
 |abcd|0 1  2  3|abcd|0 1  2  3|
 |abcd|0 1  2  3|abcd|0 1  2  3|
 |    |0 0  0  0|****|4 4  4  4|
 |ijkl|8 9 10 11|ijkl|8 9 10 11|
 |    |0 0  0  0|****|4 4  4  4|
 |    |0 0  0  0|****|4 4  4  4|
 +----+---------+----+---------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
#.
#+end_src
**** Name (monadic • dyadic)
Base 2 • Base
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d401.htm
#+begin_example
 
 Base Two                             #.  1 1 1                                Base
 
 #.y is the base-2 value of y, that is,     x#.y is a weighted sum of the items of 
 2#.y . For example:                        y ; that is, +/w*y , where w is the    
                                            product scan */\.}.x,1 . An atomic     
    #. 1 0 1 0                              argument is reshaped to the shape of   
 10                                         the other argument.                    
                                                                                   
    #. 2 3$ 0 0 1,1 0 1                                                            
 1 5                                                                               
 
    ]a=: i. 3 4
 0 1  2  3
 4 5  6  7
 8 9 10 11
 
    10 #.a
 123 4567 9011
 
    8 #. a
 83 2423 4763
 
    ]time=: 0 1 3,1 1 3,:2 4 6
 0 1 3
 1 1 3
 2 4 6
 
    x=: 24 60 60
    x #. time
 63 3663 7446
 
    x,1
 24 60 60 1
 
    ]w=: */\.}. x,1
 3600 60 1
 
    w *"1 time
    0  60 3
 3600  60 3
 7200 240 6
 
    +/"1 w *"1 time
 63 3663 7446
 
    w +/@:* "1 time
 63 3663 7446
 
    c=: 3 1 4 2 [ y=: 0 1 2 3 4 5
    c p. y                    Polynomial with coefficients c
 3 10 37 96 199 358
 
    y #."0 1 |.c
 3 10 37 96 199 358
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
#:
#+end_src
**** Name (monadic • dyadic)
Antibase 2 • Antibase
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d402.htm
#+begin_example
 
 Antibase Two                         #:  _ 1 0                            Antibase
 
 #: y is the binary representation of y     In simple cases r&#: is inverse to r&#.
 , and is equivalent to (m#2)#:y , where    . Thus:                                
 m is the maximum of the number of                                                 
 digits needed to represent the atoms of       r=: 24 60 60                        
 y in base 2 . For example:                    r #: r #. 2 3 4                     
                                            2 3 4                                  
    i. 8                                                                           
 0 1 2 3 4 5 6 7                            But if r #. y exceeds (*/r)-1 (the     
                                            largest integer representable in the   
    #: i. 8                                 radix r), then the result of r#:y is   
 0 0 0                                      reduced modulo */r . For example:      
 0 0 1                                                                             
 0 1 0                                         r #: r #. 29 3 4                    
 0 1 1                                      5 3 4                                  
 1 0 0                                                                             
 1 0 1                                                                             
 1 1 0                                                                             
 1 1 1                                                                             
 
 A representation in an arbitrary base that is analogous to the base-2
 representation provided by the monadic use of #: may be provided as illustrated
 below:
 
    ndr=: 1 + <.@^.             Number of digits required
 
    10 ndr y=: 9 10 11 100 99 100
 1 2 2 3 2 3
 
    (y#:~10 #~ >./10 ndr y);(y#:~8 #~ >./8 ndr y)
 +-----+-----+
 |0 0 9|0 1 1|
 |0 1 0|0 1 2|
 |0 1 1|0 1 3|
 |1 0 0|1 4 4|
 |0 9 9|1 4 3|
 |1 0 0|1 4 4|
 +-----+-----+
 
    (10&#.^:_1 ; 8&#.^:_1) y
 +-----+-----+
 |0 0 9|0 1 1|
 |0 1 0|0 1 2|
 |0 1 1|0 1 3|
 |1 0 0|1 4 4|
 |0 9 9|1 4 3|
 |1 0 0|1 4 4|
 +-----+-----+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
!
#+end_src
**** Name (monadic • dyadic)
Factorial • Out Of
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d410.htm
#+begin_example
 
 Factorial                        !  0 0 0                    Out Of (Combinations)
 
 For a non-negative integer argument y,     For non-negative arguments x!y is the  
 the definition is */>:i.y . In general,    number of ways that x things can be    
 !y is Γ(1+y) (the gamma function).         chosen out of y . More generally, x!y  
 Thus:                                      is (!y)%(!x)*(!y-x) . Thus:            
                                                                                   
    (*/1 2 3 4 5) , (!5)                       3!5                                 
 120 120                                    10                                     
                                               (!5)%(!3)*(!5-3)                    
    ]x=: 2 %~ 3 -~ i. 2 4                   10                                     
 _1.5 _1 _0.5 0                                1j2 ! 3.5                           
  0.5  1  1.5 2                             8.64269j16.9189                        
                                                                                   
    !x                                         ]y=:2&!^:_1 (45 4.1 30 123)         
 _3.54491 _ 1.77245 1                       10 3.40689 8.26209 16.1924             
 0.886227 1 1.32934 2                          2 ! y                               
                                            45 4.1 30 123                          
    ]fi=:!^:_1(24 25 2.1 9876)                                                     
 4 4.02705 2.05229 7.33019                     ]x=:!&10^:_1 (2.5 45)               
                                            0.3433618 2                            
    ! fi                                       x ! 10                              
 24 25 2.1 9876                             2.5 45                                 
 
 The first table below illustrates the relation between the dyad ! and the table of
 binomial coefficients; the last two illustrate its relation to the figurate
 numbers:
 
    h=: 0,i=: i.5 [ j=: -1+i.5 [ k=: 5#1
    tables=: (,.h);(i,i!/i);(j,i!/j);(k,i(+/\^:)k)
    format=: ({. ,:&< }.)@":&.>
    format tables
 +---+-----------+-------------------+--------------+
 |+-+|+---------+|+-----------------+|+------------+|
 ||0|||0 1 2 3 4|||_1 _2  _3  _4  _5|||1 1  1  1  1||
 |+-+|+---------+|+-----------------+|+------------+|
 ||0|||1 1 1 1 1||| 1  1   1   1   1|||1 1  1  1  1||
 ||1|||0 1 2 3 4|||_1 _2  _3  _4  _5|||1 2  3  4  5||
 ||2|||0 0 1 3 6||| 1  3   6  10  15|||1 3  6 10 15||
 ||3|||0 0 0 1 4|||_1 _4 _10 _20 _35|||1 4 10 20 35||
 ||4|||0 0 0 0 1||| 1  5  15  35  70|||1 5 15 35 70||
 |+-+|+---------+|+-----------------+|+------------+|
 +---+-----------+-------------------+--------------+
 
 Figurate numbers of order zero are all ones; those of higher orders result from
 successive applications of subtotals (that is, sums over prefixes, or +/\). Those
 of order two are the triangular numbers, resulting from subtotals over the
 integers beginning with one.
 
 m comb n generates all size m combinations of i.n :
 
    seed=: [: i.@(,&0)&.> <:@- {. 1:
    cf  =: i.@# ,.&.> ,&.>/\.@:(>:&.>)
    comb=: [: ; [ cf@[&0 seed
 
    3 comb 5
 0 1 2
 0 1 3
 0 1 4
 0 2 3
 0 2 4
 0 3 4
 1 2 3
 1 2 4
 1 3 4
 2 3 4
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
/:
#+end_src
**** Name (monadic • dyadic)
Grade Up • Sort Up
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d422.htm
#+begin_example
 
 Grade Up                             /:  _ _ _                             Sort Up
 
 /: grades any argument, yielding a         x/:y is (/:y){x ; i.e., x is sorted to 
 permutation vector; (/:y){y sorts y in     an order specified by y . In           
 ascending order. For example:              particular, y/:y (or /:~y) sorts y .   
                                            For example:                           
    n=: 3 1 4 2 1 3 3                                                              
    ]g=: /: n                                  y=: 'popfly'                        
 1 4 3 0 5 6 2                                 y /: 3 1 4 1 5 9                    
                                            ofpply                                 
    g { n                                                                          
 1 1 2 3 3 3 4                                 y /: y                              
                                            floppy                                 
 
 Elements of /:y that select equal elements of y are in ascending order. If y is a
 table, /:y grades the base value of the rows, using a base larger than twice the
 magnitude of any of the elements. Higher ranks are treated as ,.y , (as if its
 items were each ravelled).
 
 If y is literal, /:y grades according to the collating sequence determined by the
 alphabet a. ; another collating sequence cs can be imposed by grading cs i. y .
 For example:
 
    ]n=: 3 1 4 1 6,2 7 1 8 3,:6 1 8 0 3
 3 1 4 1 6
 2 7 1 8 3
 6 1 8 0 3
 
    /: n
 1 0 2
 
    Aa=: ' ',. a. {~ 65 97 +/ i. 26
    x=: words=: >;: 'When eras die'
    j=: <./Aa i."1 _ x
    x ; (x/:x) ; (x/:j) ; Aa
 +----+----+----+---------------------------+
 |When|When|die | ABCDEFGHIJKLMNOPQRSTUVWXYZ|
 |eras|die |eras| abcdefghijklmnopqrstuvwxyz|
 |die |eras|When|                           |
 +----+----+----+---------------------------+
 
 The types: numeric or empty, symbol, literal (1 byte or 2 byte characters), and
 boxed, are so ordered; within them, a lower rank precedes a higher, and arrays to
 be compared are padded with fills if necessary to have the same shape. Complex
 arguments are ordered by real part, then by imaginary. Boxed arrays are ordered
 according to the opened elements.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
\:
#+end_src
**** Name (monadic • dyadic)
Grade Down • Sort Down
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d432.htm
#+begin_example
 
 Grade Down                           \:  _ _ _                           Sort Down
 
 \: grades any argument, yielding a         x\:y is (\:y){x ; i.e., x is sorted to 
 permutation vector; (\:y){y sorts y in     an order specified by y . In           
 descending order. For example:             particular, y\:y (or \:~y) sorts y .   
                                                                                   
    ]g=:\:y=:3 1 4 2 1 3 3                  For example:                           
 2 0 5 6 3 1 4                                                                     
                                               \:~ 'abecedarian'                   
    g{y                                     rnieedcbaaa                            
 4 3 3 3 2 1 1                                                                     
                                               \:~"1 'dozen',:'disk'               
                                            zoned                                  
                                            skid                                   
 
 Elements of \:y that select equal elements of y are in ascending order. If y is a
 table, \:y grades the base value of the rows, using a base larger than twice the
 magnitude of any of the elements. Higher ranks are treated as ,.y (as if the items
 were each ravelled).
 
 If y is literal, \:y grades according to the collating sequence specified by the
 alphabet a. ; another collating sequence cs can be imposed by grading cs i. y .
 For example:
 
    ]n=: 3 1 4 1 6,2 7 1 8 3,:6 1 8 0 3
 3 1 4 1 6
 2 7 1 8 3
 6 1 8 0 3
                 
    \: n
 2 0 1
 
    \:~ >;:'when eras die, their legacies'
 when    
 their   
 legacies
 eras    
 die     
 ,
 
 See [[file:///Applications/j64-806/addons/docs/help/dictionary/d422.htm][Grade Up (/:)]] for the treatment of complex and boxed arguments.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
[
#+end_src
**** Name (monadic • dyadic)
Same • Left
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d500.htm
#+begin_example
 
 Same                               [  ]  _ _ _                         Left, Right
 
 The monads [ and ] are each identity       x [ y (left bracket) yields the left   
 functions; each yields its argument.       argument x , and x ] y (right bracket) 
                                            yields the right argument y .          
 
 For example:
 
    n=: i. 2 3
    a=: 'abcde'
 
    ]n
 0 1 2
 3 4 5
                 
    [a
 abcde
            
    n[a
 0 1 2
 3 4 5
          
    n]a
 abcde
           
    ([\ ; ]\ ; [\. ; ]\.) 'ABCDEF'
 +------+------+------+------+
 |A     |A     |ABCDEF|ABCDEF|
 |AB    |AB    |BCDEF |BCDEF |
 |ABC   |ABC   |CDEF  |CDEF  |
 |ABCD  |ABCD  |DEF   |DEF   |
 |ABCDE |ABCDE |EF    |EF    |
 |ABCDEF|ABCDEF|F     |F     |
 +------+------+------+------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
[:
#+end_src
**** Name (monadic • dyadic)
Cap • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d502.htm
#+begin_example
 
 Cap                                 [:  _ _ _                                 Cap
 
 [: caps a left branch of a fork as described in [[file:///Applications/j64-806/addons/docs/help/dictionary/dictf.htm][Section II F]]. For example, the    
 verb p=: [: +/ + * - applies the monad +/ to the result of the fork + * - .       
                                                                                   
 [: signals error on any argument.                                                 
 
 Caps make it possible to define a wider range of functions as unbroken trains. For
 example, the maximum divided by the product of the sum and difference would be
 defined by a single train, whereas (without the use of the cap) the definition of
 the maximum divided by the (monad) floor of the product of the sum and difference
 would require the use of trains interrupted by the monad. Thus:
 
    f=: >. % + * -
    g=: >. % <. @ (+ * -)
 
    2.5 f 4
 _0.410256
 
    2.5 g 4
 _0.4
 
 The cap makes possible the use of an unbroken train as follows:
 
    h=: >. % [: <. + * -
 
    2.5 h 4
 _0.4
 
 Since the domain of the cap is empty, it can be used (with[[file:///Applications/j64-806/addons/docs/help/dictionary/d310v.htm][:]]) to define a function
 whose monadic or dyadic case invokes an error. For example:
 
    abs=: | : [:
    res=: [: : |
 
    res _4 0 5
 |valence error: res
 |       res _4 0 5
     
    abs _4 0 5
 4 0 5
           
    3 res _4 0 5
 2 0 2
           
    3 abs _4 0 5
 |valence error: abs
 |   3     abs _4 0 5
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
]
#+end_src
**** Name (monadic • dyadic)
Same • Right
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d500.htm
#+begin_example
 
 Same                               [  ]  _ _ _                         Left, Right
 
 The monads [ and ] are each identity       x [ y (left bracket) yields the left   
 functions; each yields its argument.       argument x , and x ] y (right bracket) 
                                            yields the right argument y .          
 
 For example:
 
    n=: i. 2 3
    a=: 'abcde'
 
    ]n
 0 1 2
 3 4 5
                 
    [a
 abcde
            
    n[a
 0 1 2
 3 4 5
          
    n]a
 abcde
           
    ([\ ; ]\ ; [\. ; ]\.) 'ABCDEF'
 +------+------+------+------+
 |A     |A     |ABCDEF|ABCDEF|
 |AB    |AB    |BCDEF |BCDEF |
 |ABC   |ABC   |CDEF  |CDEF  |
 |ABCD  |ABCD  |DEF   |DEF   |
 |ABCDE |ABCDE |EF    |EF    |
 |ABCDEF|ABCDEF|F     |F     |
 +------+------+------+------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
{
#+end_src
**** Name (monadic • dyadic)
Catalogue • From
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d520.htm
#+begin_example
 
 Catalogue                            {  1 0 _                                 From
 
 {y forms a catalogue from the atoms of     If x is an integer in the range from -n
 its argument, its shape being the chain    =: #y to n-1 , then x{y selects item n|
 of the shapes of the opened items of y     x from y . Thus:                       
 . The common shape of the boxed results                                           
 is $y . For example:                          2 0 _1 _3 { 'abcdefg'               
                                            cage                                   
    { 'ht';'ao';'gtw'                                                              
 +---+---+---+                                 t=:3 4$'abcdefghijkl'               
 |hag|hat|haw|                                 1{t                                 
 +---+---+---+                              efgh                                   
 |hog|hot|how|                                                                     
 +---+---+---+                              More generally, >x may be a list whose 
 +---+---+---+                              successive elements are (possibly)     
 |tag|tat|taw|                              boxed arrays that specify selection    
 +---+---+---+                              along successive axes of y .           
 |tog|tot|tow|                                                                     
 +---+---+---+                              Finally, if any r=:>j{>x used in the   
                                            selection is itself boxed, selection is
 The Cartesian product is readily           made by the indices along that axis    
 defined in terms of { , thus:              that do not occur in >r .              
                                                                                   
    CP=: {@(,&<)                            Note that the result in the very last  
    0 1 CP 2 3 4                            dyadic example, that is, (<<<_1){m , is
 +---+---+---+                              all except the last item.              
 |0 2|0 3|0 4|                                                                     
 +---+---+---+                                                                     
 |1 2|1 3|1 4|                                                                     
 +---+---+---+                                                                     
 
    t=: 3 4 $ 'abcdefghijkl'
    t; (1{t); (2 1{t); (1{"1 t); ((,1){"1 t); (2 1{"1 t)
 +----+----+----+---+-+--+
 |abcd|efgh|ijkl|bfj|b|cb|
 |efgh|    |efgh|   |f|gf|
 |ijkl|    |    |   |j|kj|
 +----+----+----+---+-+--+
 
    t; (2 0{t); ((<2 0){t); ((2 0;1 3){t); ((<2 0;1 3){t)
 +----+----+-+--+--+
 |abcd|ijkl|i|ih|jl|
 |efgh|abcd| |  |bd|
 |ijkl|    | |  |  |
 +----+----+-+--+--+
 
    (_1{m); (_1{"2 m); (_1{"1 m); (<<<_1){m=:i.2 3 4
 +-----------+-----------+--------+---------+
 |12 13 14 15| 8  9 10 11| 3  7 11|0 1  2  3|
 |16 17 18 19|20 21 22 23|15 19 23|4 5  6  7|
 |20 21 22 23|           |        |8 9 10 11|
 +-----------+-----------+--------+---------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
{.
#+end_src
**** Name (monadic • dyadic)
Head • Take
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d521.htm
#+begin_example
 
 Head                                {.  _ 1 _                                Take
 
 {.y selects the leading item of y , or     If x is an atom, x{.y takes from y an  
 an item of fills if y has no items;        interval of |x items; beginning at the 
 that is, {.y ↔ 0{1{.y . Thus:              front if x is positive, ending at the  
                                            tail if it is negative.                
    a=: i. 3 2 3                                                                   
    a;({.a);({."2 a);({."1 a)               In an overtake (in which the number to 
 +--------+-----+--------+-----+            be taken exceeds the number of items), 
 | 0  1  2|0 1 2| 0  1  2| 0  3|            extra items consist of fills; zeros if 
 | 3  4  5|3 4 5| 6  7  8| 6  9|            y is numeric, a: if it is boxed, spaces
 |        |     |12 13 14|12 15|            if literal, and s: ' ' if symbol. The  
 | 6  7  8|     |        |     |            fill atom f is also specified by fit,  
 | 9 10 11|     |        |     |            as in {.!.f .                          
 |        |     |        |     |                                                   
 |12 13 14|     |        |     |            In general, if y is not an atom, x may 
 |15 16 17|     |        |     |            be a list of length not more than $$y ,
 +--------+-----+--------+-----+            and if y is an atom, it is replaced by 
                                            ((#x)$1)$y . Element k produces (k{x)  
    ]b=: ;/a                                {."(($$y)-k) y ; an infinite value is  
 +-----+-------+--------+                   replaced by the length of the          
 |0 1 2|6  7  8|12 13 14|                   corresponding axis.                    
 |3 4 5|9 10 11|15 16 17|                                                          
 +-----+-------+--------+                                                          
                                                                                   
    {.&> b                                                                         
  0  1  2                                                                          
  6  7  8                                                                          
 12 13 14                                                                          
                                                                                   
    {. i.0 3                                                                       
 0 0 0                                                                             
 
 The following examples illustrate the use of the dyad take:
 
    y=: i. 3 4
    y;(2{.y);(5{.y);(_5{.y);(_6{.'abcd');(2 _3{.y)
 +---------+-------+---------+---------+------+-----+
 |0 1  2  3|0 1 2 3|0 1  2  3|0 0  0  0|  abcd|1 2 3|
 |4 5  6  7|4 5 6 7|4 5  6  7|0 0  0  0|      |5 6 7|
 |8 9 10 11|       |8 9 10 11|0 1  2  3|      |     |
 |         |       |0 0  0  0|4 5  6  7|      |     |
 |         |       |0 0  0  0|8 9 10 11|      |     |
 +---------+-------+---------+---------+------+-----+
 
    2 {."1 y
 0 1
 4 5
 8 9
   
    _ 2 {. y
 0 1
 4 5
 8 9
 
    6{.'ab';'cde';'fghi'
 +--+---+----++++
 |ab|cde|fghi||||
 +--+---+----++++
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
{:
#+end_src
**** Name (monadic • dyadic)
Tail • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d522.htm
#+begin_example
 
 Tail                                   {:  _                                      
 
 {:y selects the last item of y , or an                                            
 item of [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm#fill][fills]] if y has no items; that                                             
 is, {:y ↔ 0{_1{.y . The fill atom f is                                            
 also specified by fit, as in {:!.f .                                              
 
    ]y=: a.{~ (a.i.'A') + i.4 5
 ABCDE
 FGHIJ
 KLMNO
 PQRST
 
    f=: }: ; {:
    f y
 +-----+-----+
 |ABCDE|PQRST|
 |FGHIJ|     |
 |KLMNO|     |
 +-----+-----+
 
    g=: }: ,.@; {:
    g y
 +-----+
 |ABCDE|
 |FGHIJ|
 |KLMNO|
 +-----+
 |PQRST|
 +-----+
 
    h=: {. ,.@; }.
    h y
 +-----+
 |ABCDE|
 +-----+
 |FGHIJ|
 |KLMNO|
 |PQRST|
 +-----+
 
    {:"1 y
 EJOT
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
{::
#+end_src
**** Name (monadic • dyadic)
Map • Fetch
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d523.htm
#+begin_example
 
 Map                                {::  _ 1 _                                Fetch
 
 {::y has the same boxing as y and its      x{::y fetches a subarray of y according
 elements are the paths to each leaf        to path x ; the selection at each level
 (each open array).                         is based on { and, except at the last  
                                            level, must result in an atom.         
 
 Map and Fetch can be modeled as follows:
 
    cat  =: { @: (i.&.>) @: $
    mapp =: 4 : 'if. L. y do. (<"0 x,&.><"0 cat y) mapp&.> y else. >x end.'
    map  =: a:&mapp
    fetch=: >@({&>/)@(<"0@|.@[ , <@]) " 1 _
 
 The following phrases illustrate the use of Map and Fetch:
 
    ] y=: 1 2 3;4 5;i.4 5
 +-----+---+--------------+
 |1 2 3|4 5| 0  1  2  3  4|
 |     |   | 5  6  7  8  9|
 |     |   |10 11 12 13 14|
 |     |   |15 16 17 18 19|
 +-----+---+--------------+
 
   (2;_1 _1){::y                The number 19            
   (_1;3 4) {::y                The number 19            
   {::y                         Paths to each open array 
   {::cat L: 0 y                Paths to each open scalar
 
    ] t=: 5!:2 <'fetch'         An array with an interesting structure
 +------------------------------------------------------+-+---+
 |+-----------------+-+--------------------------------+|"|1 _|
 ||+-+-+-----------+|@|+--------------------+-+-------+|| |   |
 |||>|@|+-------+-+|| ||+--------------+-+-+|,|+-+-+-+||| |   |
 ||| | ||+-+-+-+|/||| |||+-------+-+--+|@|[|| ||<|@|]|||| |   |
 ||| | |||{|&|>|| ||| ||||+-+-+-+|@||.|| | || |+-+-+-+||| |   |
 ||| | ||+-+-+-+| ||| |||||<|"|0|| |  || | || |       ||| |   |
 ||| | |+-------+-+|| ||||+-+-+-+| |  || | || |       ||| |   |
 ||+-+-+-----------+| |||+-------+-+--+| | || |       ||| |   |
 ||                 | ||+--------------+-+-+| |       ||| |   |
 ||                 | |+--------------------+-+-------+|| |   |
 |+-----------------+-+--------------------------------+| |   |
 +------------------------------------------------------+-+---+
 
   (0;2;0;0;0){:: t             Fetch the subarray corresp. to <"0 in t
   (0;2;0;0;0;_1){:: t          Fetch the 0 in that                    
   t ,&< L: 0 1 {:: t           Label each leaf with its path          
   < S: 0 t                     The boxed leaves of t                  
   < S: 1 {:: t                 The boxed paths of t                   
   t ,&< S: 0 1 {:: t           A 2-column table of leaves and paths   
   # 0: S: 0 t                  The number of leaves in t              
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
}.
#+end_src
**** Name (monadic • dyadic)
Behead • Drop
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d531.htm
#+begin_example
 
 Behead                               }.  _ 1 _                                Drop
 
 }. drops the leading item of its           x }. y drops (at most) |x items from y,
 argument.                                  dropping from the front if x is        
                                            positive and from the tail if negative.
                                                                                   
                                            In general, if y is not an atom, x may 
                                            be a list of length at most r=:$$y, and
                                            the effect of element k is (k{x) }."   
                                            (r-k) y; if y is an atom, the result is
                                            (0=x)$y .                              
 
    ]y=: a. {~ (a. i. 'A') + i. 4 5
 ABCDE
 FGHIJ
 KLMNO
 PQRST
 
    f=: }. ; {.
    f y
 +-----+-----+
 |FGHIJ|ABCDE|
 |KLMNO|     |
 |PQRST|     |
 +-----+-----+
 
    g=: }. ,.@; {.
    g y
 +-----+
 |FGHIJ|
 |KLMNO|
 |PQRST|
 +-----+
 |ABCDE|
 +-----+
 
    (2}.y) ; (_2}.y) ; (6}.y) ; ($ 6}.y) ; (}."1 y) ; (3}."1 y)
 +-----+-----+-----+---+----+--+
 |KLMNO|ABCDE|     |0 5|BCDE|DE|
 |PQRST|FGHIJ|     |   |GHIJ|IJ|
 |     |     |     |   |LMNO|NO|
 |     |     |     |   |QRST|ST|
 +-----+-----+-----+---+----+--+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
}:
#+end_src
**** Name (monadic • dyadic)
Curtail • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d532.htm
#+begin_example
 
 Curtail                                }:  _                                      
 
 }:y drops the last item of y, and is                                              
 equivalent to _1 }. y . Thus:                                                     
 
    ]y=: a. {~ (a. i. 'A') + i. 4 5
 ABCDE
 FGHIJ
 KLMNO
 PQRST
 
    f=: }: ; {:
    f y
 +-----+-----+
 |ABCDE|PQRST|
 |FGHIJ|     |
 |KLMNO|     |
 +-----+-----+
 
    g=: }: ,.@; {:
    g y
 +-----+
 |ABCDE|
 |FGHIJ|
 |KLMNO|
 +-----+
 |PQRST|
 +-----+
 
    h=: {. ,.@; }.
    h y
 +-----+
 |ABCDE|
 +-----+
 |FGHIJ|
 |KLMNO|
 |PQRST|
 +-----+
 
    }:"1 y
 ABCD
 FGHI
 KLMN
 PQRS
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
".
#+end_src
**** Name (monadic • dyadic)
Do • Numbers
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d601.htm
#+begin_example
 
 Do                                  ".  1 _ _                              Numbers
 
 ".y executes the sentence y . If the       x".y converts character array y into   
 execution results in a noun, the result    numbers. The shape of the result is    
 of ".y is that noun; if the execution      (}:$y),(1=n)}.n where n is the maximum 
 result is a verb, adverb, or               number of numbers in any row. x is a   
 conjunction, or if there is no             scalar number used to replace illegal  
 execution result, the result of ".y is     numbers and to pad narrow rows. In the 
 an empty vector.                           conversion, the normal rules for       
                                            numeric constants are relaxed as       
                                            follows:                               
                                                                                   
                                              * the negative sign can be - or _    
                                              * commas within numbers are ignored  
                                              * fractions need not have a digit 0  
                                                before the decimal point           
                                              * a number may be preceded by a +    
                                                sign; the exponent of a number in  
                                                exponential format may be preceded 
                                                by a + sign                        
 
 For example:
 
    ". s=: '5 * a=: 3 + i. 6'
 15 20 25 30 35 40
 
    a
 3 4 5 6 7 8
 
    do=: ".
    do t=: '3 % 5'
 0.6
    do |. t
 1.66667
    $ do ''
 0
 
    ]program=: 'a=: 2^3' ,: '5*a'
 a=: 2^3
 5*a
 
    do program
 8 40
 
    do 'sum=: +/'
 
    sum 1 2 3 4
 10
 
    s ; _999". s=: '1 2 3','-4 .5',:'bad 3,141'
 +---------+--------------+
 |1 2 3    |   1    2    3|
 |-4 .5    |  _4  0.5 _999|
 |bad 3,141|_999 3141 _999|
 +---------+--------------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
":
#+end_src
**** Name (monadic • dyadic)
Default Format • Format
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d602.htm
#+begin_example
 
 Default Format                       ":  _ 1 _                              Format
 
 Default output is identical to this        x":y produces a literal representation 
 monadic case, providing a minimum of       of y in a format specified by x . Each 
 one space between columns. For example:    element of x is a complex number w j. d
                                            , controlling the representation of the
    ]text=: ": i. 2 5                       corresponding column of y as follows:  
 0 1 2 3 4                                                                         
 5 6 7 8 9                                  |w specifies the width allocated; if   
                                            this space is inadequate, the entire   
    $ text                                  space is filled with asterisks. If w is
 2 9                                        zero, enough space is allocated.       
                                                                                   
    3 + text                                |d specifies the number of digits      
 |domain error                              following the decimal point (itself    
 |   3  +text                               included only if d is not zero).       
                                                                                   
    '*#' ,. text                            Any negative sign is placed just before
 *0 1 2 3 4                                 the leading digit. If w>:0 and d>:0,   
 #5 6 7 8 9                                 the result is right-justified in the   
                                            space. Otherwise (if w<0 or d<0), the  
    ": 'abcd'                               result is put in exponential form (with
 abcd                                       one digit before the decimal point) and
                                            is left-justified and aligned on the   
    $ ": ''                                 decimal point.                         
 0                                                                                 
                                            Only the real part of complex y is     
                                            formatted. See below for boxed y .     
 
    n ; 6j2 ": n=: % i. 2 4
 +--------------------------+------------------------+
 |   _   1      0.5 0.333333|     _  1.00  0.50  0.33|
 |0.25 0.2 0.166667 0.142857|  0.25  0.20  0.17  0.14|
 +--------------------------+------------------------+
 
    (7j2 ": -n) ; (3j2 ": n)
 +----------------------------+------------+
 |     __  _1.00  _0.50  _0.33|  _*********|
 |  _0.25  _0.20  _0.17  _0.14|************|
 +----------------------------+------------+
 
    6j3 0j_6 ": 1r2 ^ 1 1000 *"1 i.5 2
  1.000  9.332636e_302 
  0.250  8.128549e_904 
  0.063  7.079811e_1506
  0.016  6.166381e_2108
  0.004  5.370801e_2710
 
 The fit conjunction (!.) and [[file:///Applications/j64-806/addons/docs/help/dictionary/dx009.htm#10][9!:10]] specify the number of digits for floating-point
 numbers. For example:
 
    (": ; ":!.6 ; ":!.4 ; ":!.15) %7
 +--------+--------+------+-----------------+
 |0.142857|0.142857|0.1429|0.142857142857143|
 +--------+--------+------+-----------------+
 
 For a boxed right argument, a two-element left argument specifies position in the
 display, using 0, 1, and 2 for top/center/bottom, and left/center/right. [[file:///Applications/j64-806/addons/docs/help/dictionary/dx009.htm#16][9!:16]] and
 [[file:///Applications/j64-806/addons/docs/help/dictionary/dx009.htm#16][9!:17]] specify the default positions. [[file:///Applications/j64-806/addons/docs/help/dictionary/dx009.htm#6][9!:6]] and [[file:///Applications/j64-806/addons/docs/help/dictionary/dx009.htm#7][9!:7]] specify the box drawing
 characters used.
 
    x=: 2 3 $ (2 #&.> 1+i.6) $&.> 'abcdef'
    (": x) ,. ' ' ,. (2 1 ": x)
 +----+-----+------+ +----+-----+------+
 |a   |bb   |ccc   | |    |     | ccc  |
 |    |bb   |ccc   | |    | bb  | ccc  |
 |    |     |ccc   | | a  | bb  | ccc  |
 +----+-----+------+ +----+-----+------+
 |dddd|eeeee|ffffff| |    |     |ffffff|
 |dddd|eeeee|ffffff| |    |eeeee|ffffff|
 |dddd|eeeee|ffffff| |dddd|eeeee|ffffff|
 |dddd|eeeee|ffffff| |dddd|eeeee|ffffff|
 |    |eeeee|ffffff| |dddd|eeeee|ffffff|
 |    |     |ffffff| |dddd|eeeee|ffffff|
 +----+-----+------+ +----+-----+------+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
?
#+end_src
**** Name (monadic • dyadic)
Roll • Deal
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d640.htm
#+begin_example
 
 Roll                                ?  0 0 0                                 Deal
 
 ? y yields a uniform random selection      x ? y is a list of x items randomly    
 from the population i.y if y is a          chosen without repetition from i.y .   
 positive integer, or from the interval                                            
 of numbers greater than 0 and less than                                           
 1 if y is 0. The random seed used                                                 
 begins at 7^5 (16807).                                                            
 
    ? 6 
 0
                 
    ? 6 6 6 6 6 6 6 6
 0 5 5 4 2 3 2 1
 
    6 ? 6                      NB. A random permutation
 0 1 5 4 3 2
 
    mean=: +/ % #
    mean ? 1000 # 6
 2.459
 
    ] m=: ? 4 4 $ 9            NB. A random matrix for experimentation
 3 8 8 4
 2 0 2 7
 4 2 3 5
 1 1 7 2
           
    -/ . * m                   NB. The determinant of m
 _659
 
    f=: ?@$ % ] - 1:
    3 6 f 9                    NB. Random 3 by 6 table in range zero to one with resolution 9
 0.375     1     1  0.5  0.25     0
  0.25 0.875   0.5 0.25 0.375 0.625
 0.125 0.125 0.875 0.25 0.875  0.75
 
    ? 2 1 $ !38x
 202466594106002578660243928542852207957556146
  79605116563118621090926071782092415123181713
 
 Several instances of the foreign conjunction are provided to work with random
 numbers. 9!:(2*n) queries a parameter and 9!:(1+2*n) sets it.
 
 9!:42 y     RNG Select. Select the random number generator                         
 9!:43 y                                                                            
                                                                                    
             y   RNG             upper      period                period       speed
                                 bound                                              
             1   GB_Flip         2^31       _1+2^55               3.60e16        1.0
             2   Mersenne        2^32       _1+2^19937            4.32e6001      1.1
                 Twister                                                            
             3   DX-1597-4d      _1+2^31    _1+(_1+2^31)^1597     1.24e14903     3.0
             4   MRG32k3a        _209+2^    -:*/<:3^~_209         3.14e57        7.6
                                 32         _22853+2^32                             
             0   sum of above                                                   11.8
                 RNGs                                                               
                                                                                    
             “Speed” is the time for generating one million U(0,1) numbers, with    
             1.0 being the fastest. ? uses Mersenne Twister as the default RNG. ?.  
             uses GB_Flip as the fixed RNG.                                         
 
 9!:44 y     RNG State. The sequence of random numbers generated by an RNG depends  
 9!:45 y     completely on the state. The state is a boxed vector whose             
             interpretation depends on the particular RNG. For example:             
                                                                                    
                t=: 9!:44 ''  NB. query the RNG state                               
                5 ?@$ 10000                                                         
             8590 6147 5158 4729 3522                                               
                2 4 ?@$ 10                                                          
             2 5 5 5                                                                
             3 8 0 0                                                                
                9!:45 t       NB. set the RNG state                                 
                                                                                    
                5 ?@$ 10000                                                         
             8590 6147 5158 4729 3522                                               
                                                                                    
 9!:0 y      Random Seed. Queries and sets the random seed used in random number    
 9!:1 y      generation. The initial value is 7^5 . The seed may be a single        
             integer or (for the Mersenne Twister RNG) a list of integers.          
                                                                                    
 128!:4 y    RNG Raw. Produces y integers as generated directly by an RNG, used     
             typically for debugging the RNG.                                       
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
?.
#+end_src
**** Name (monadic • dyadic)
Roll • Deal (fixed seed)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d641.htm
#+begin_example
 
 Roll                                ?.  _ 0 0                                Deal
 
 ?. proceeds from a fixed random seed of 7^5 and a fixed random number generator   
 (RNG), and has no effect on the results of ? (monad or dyad). Use of ?. makes     
 examples reproducible.                                                            
 
    ?. 6 
 0
    x=: 8$6
    ?. x
 0 5 5 4 2 3 2 1
    ?. x
 0 5 5 4 2 3 2 1
    ?."0 x
 0 0 0 0 0 0 0 0
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
A.
#+end_src
**** Name (monadic • dyadic)
Anagram Index • Anagram
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dacapdot.htm
#+begin_example
 
 Anagram Index                        A.  1 0 _                             Anagram
 
 If T is the table of all !n                The expression k A. b permutes items of
 permutations of order n arranged in        b by the permutation of order #b whose 
 lexical order (i.e., /:T is i.!n), then    anagram index is k .                   
 k is said to be the anagram index of                                              
 the permutation k{T .                                                             
                                                                                   
 A. applied to a cycle or direct                                                   
 permutation yields its anagram index:                                             
 A. 0 3 2 1 is 5, as are A. 3 2 1 and A.                                           
 <3 1 and A.0;2;3 1 .                                                              
 
 For example:
 
    (A. 0 3 2 1) , (A. <3 1)
 5 5
 
    A. |. i.45
 119622220865480194561963161495657715064383733759999999999
 
    <: ! 45x
 119622220865480194561963161495657715064383733759999999999
 
    tap=: i.@! A. i.           NB. Table of all permutations
 
    (tap 3);(/: tap 3);({/\ tap 3);(/:{/\ tap 3)
 +-----+-----------+-----+-----------+
 |0 1 2|0 1 2 3 4 5|0 1 2|0 1 5 2 4 3|
 |0 2 1|           |0 2 1|           |
 |1 0 2|           |1 2 0|           |
 |1 2 0|           |2 0 1|           |
 |2 0 1|           |1 2 0|           |
 |2 1 0|           |1 0 2|           |
 +-----+-----------+-----+-----------+
 
 In particular, 1 A. b transposes the last two items of b, and _1 A. b reverses the
 list of items, and 3 A. b and 4 A. b rotate the last three items of b. For
 example:
 
    b=: 'ABCD'
 
    (0 3 2 1{b);(0 3 2 1 C.b);((<3 1)C.b);(3 4 A.b)
 +----+----+----+----+
 |ADCB|ADCB|ADCB|ACDB|
 |    |    |    |ADBC|
 +----+----+----+----+
 
    (_19 5 A. b) ; (_19 |~ ! # b)
 +----+-+
 |ADCB|5|
 |ADCB| |
 +----+-+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
C.
#+end_src
**** Name (monadic • dyadic)
Cycle-Direct • Permute
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dccapdot.htm
#+begin_example
 
 Cycle                               C.  1 1 _                              Permute
 
 If p is a permutation of the atoms of i.n, then p is said to be a permutation
 vector of order n, and if n=#b, then p{b is a permutation of the items of b .
 
 C.p yields a list of boxed lists of the    If p and c are standard and cycle      
 atoms of i.#p, called the standard         representations of order #b, then p C. 
 cycle representation of the permutation    b and c C. b produce the permutation of
 p . Thus, if p=:4 5 2 1 0 3, then C.p      b . The arguments p and c can be       
 is (,2);4 0;5 3 1 because the              non-standard in ways to be defined. In 
 permutation p moves to position 2 the      particular, negative integers down to -
 item 2, to 4 the item 0, to 0 the item     #b may be used, and are treated as     
 4, to 5 the item 3, to 3 the item 1,       their residues modulo #b .             
 and to 1 the item 5. The monad C. is                                              
 self-inverse; applied to a standard        If q is not boxed, and the elements of 
 cycle it gives the corresponding direct    (#b)|q are distinct, then q C. b is    
 representation.                            equivalent to p{b , where p is the     
                                            standard form of q that is given by p=:
 A given permutation could be               ((i.n)-.n|q),n|q , for n=:#b . In other
 represented by cycles in a variety of      words, positions occurring in q are    
 ways; the standard form is made unique     moved to the tail end.                 
 by the following restrictions: the                                                
 cycles are disjoint and exhaustive         If q is boxed, the elements of (#b)|>j 
 (i.e., the atoms of the boxed elements     {q must be distinct for each j , and   
 together form a permutation vector);       the boxes are applied in succession.   
 each boxed cycle is rotated to begin       For example:                           
 with its largest element; and the boxed                                           
 cycles are put in ascending order on          (2 1;3 0 1) C. i.5                  
 their leading elements.                    1 2 3 0 4                              
                                                                                   
 C. is extended to non-negative                (<2 1) C. (<3 0 1) C. i.5           
 non-standard cases by treating any         1 2 3 0 4                              
 argument q as a representation of a                                               
 permutation of order 1+>./; q .               q=: C. p=: 1 2 3 0 4 [ a=: 'abcde'  
                                               q ; (q C. a) ; (p C. a) ; (p { a)   
 The monad C.!.2 computes the parity of     +-----------+-----+-----+-----+        
 a permutation p ; it is 1 or _1 as the     |+-------+-+|bcdae|bcdae|bcdae|        
 number is even or odd of pairwise          ||3 0 1 2|4||     |     |     |        
 interchanges necessary to get p from       |+-------+-+|     |     |     |        
 the identity permutation i.#p (and 0 if    +-----------+-----+-----+-----+        
 p is not a permutation). For example:                                             
                                               a ; (<0 _1) C. a                    
    ] x=: 2 , (i.4) ,: 1 0 2 3              +-----+-----+                          
 2 2 2 2                                    |abcde|ebcda|                          
 0 1 2 3                                    +-----+-----+                          
 1 0 2 3                                                                           
    C.!.2 x                                                                        
 0 1 _1                                                                            
 
 Further examples:
 
    ] p=: 22 ?. 22             NB. A random permutation of order 22
 16 18 21 8 6 15 10 14 7 11 0 2 5 3 9 12 20 17 4 19 13 1
 
    C. p                       NB. Its cycles
 +-------+--+--+-----------------------------------------+
 |15 12 5|17|19|21 1 18 4 6 10 0 16 20 13 3 8 7 14 9 11 2|
 +-------+--+--+-----------------------------------------+
 
    *./ #&> C. p               NB. LCM of the cycle lengths
 51
 
    # ~. p&{^:(i.200) i.#p     NB. Size of the subgroup generated by p
 51
 
 The verb CT computes the complete tensor of order n as a sparse array; entry (<i)
 {CT n is the parity of the index i .
 
    CT=: 3 : '(C.!.2 p) (<"1 p=. (i.!y) A. i.y)}1$.$~y'
 
    CT 3
 0 1 2 |  1
 0 2 1 | _1
 1 0 2 | _1
 1 2 0 |  1
 2 0 1 |  1
 2 1 0 | _1
 
    ($.^:_1 CT 3) ; ,"2 ' ' ,"1 '012'{~ >{ i.&.> $~3
 +--------+------------+
 | 0  0  0| 000 001 002|
 | 0  0  1| 010 011 012|
 | 0 _1  0| 020 021 022|
 |        |            |
 | 0  0 _1| 100 101 102|
 | 0  0  0| 110 111 112|
 | 1  0  0| 120 121 122|
 |        |            |
 | 0  1  0| 200 201 202|
 |_1  0  0| 210 211 212|
 | 0  0  0| 220 221 222|
 +--------+------------+
 
    (CT 3) -: C.!.2&> { i.&.> $~ 3
 1
 
    ] m=: ?. 3 3$10
 6 5 9
 2 4 9
 0 7 0
 
    +/ , (CT #m) * *// m
 _252
    -/ .* m                    NB. [[file:///Applications/j64-806/addons/docs/help/dictionary/d300.htm][Determinant]] 
 _252
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
e.
#+end_src
**** Name (monadic • dyadic)
Raze In • Member (In)
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dedot.htm
#+begin_example
 
 Raze In                             e.  _ _ _                          Member (In)
 
 e.y produces a boolean result that         If x has the shape of an item of y ,   
 determines for each atom of y whether      then x e. y is 1 if x matches an item  
 its open contains an item of the raze      of y . In general, x e. y ↔ (#y)>y i. x
 of y .                                     .                                      
                                                                                   
                                            The fit conjunction provides tolerant  
                                            comparison, as in e.!.t .              
 
 For example:
 
    ]y=:'abc';'dc';'a'
 +---+--+-+
 |abc|dc|a|
 +---+--+-+
 
    ;y
 abcdca
 
    e. y
 1 1 1 0 1 1
 0 0 1 1 1 0
 1 0 0 0 0 1
 
    f=: ] e.~&>/ ;
    f y
 1 1 1 0 1 1
 0 0 1 1 1 0
 1 0 0 0 0 1
 
    'cat' e. 'abcd'
 1 1 0
 
    ]z=: 2 3$'catdog'
 cat
 dog
 
    'cat' e. z
 1
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
E.
#+end_src
**** Name (monadic • dyadic)
 • Member of Interval
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/decapdot.htm
#+begin_example
 
                                      E.  _ _                    Member of Interval
 
                                            The ones in x E. y indicate the        
                                            beginning points of occurrences of the 
                                            pattern x in y .                       
 
 For example:
 
    'co' E. 'cocoa'
 1 0 1 0 0
 
    s #~ -. '**' E. s=: 'Remove***multiple**stars.'
 Remove*multiple*stars.
 
    ] x =: 0 1 2 ,: 2 3 4
 0 1 2
 2 3 4
 
    ] y=: 5 | i. 5 7
 0 1 2 3 4 0 1
 2 3 4 0 1 2 3
 4 0 1 2 3 4 0
 1 2 3 4 0 1 2
 3 4 0 1 2 3 4
 
    x E. y
 1 0 0 0 0 0 0
 0 0 0 1 0 0 0
 0 1 0 0 0 0 0
 0 0 0 0 1 0 0
 0 0 0 0 0 0 0
 
    ($x) x&-: ;. 3 y
 1 0 0 0 0 0 0
 0 0 0 1 0 0 0
 0 1 0 0 0 0 0
 0 0 0 0 1 0 0
 0 0 0 0 0 0 0
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
i.
#+end_src
**** Name (monadic • dyadic)
Integers • Index Of
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/didot.htm
#+begin_example
 
 Integers                            i.  1 _ _                            Index Of
 
 The shape of i.y is |y , and its atoms     If rix is the rank of an item of x,    
 are the first */|y non-negative            then the shape of the result of x i. y 
 integers. A negative element in y          is (-rix)}.$y . Each atom of the result
 causes reversal of the atoms along the     is either #x or the index of the first 
 corresponding axis. For example:           occurrence among the items of x of the 
                                            corresponding rix-cell of y .          
    i. 5                                                                           
 0 1 2 3 4                                  The comparison in x i. y is tolerant,  
                                            and fit can be used to specify the     
    i. 2 _5                                 tolerance, as in i. !. t .             
 4 3 2 1 0                                                                         
 9 8 7 6 5                                                                         
 
    (i.4);(i._4);(i.2 3 4);(i.2 _3 4);(i.'')
 +-------+-------+-----------+-----------+-+
 |0 1 2 3|3 2 1 0| 0  1  2  3| 8  9 10 11|0|
 |       |       | 4  5  6  7| 4  5  6  7| |
 |       |       | 8  9 10 11| 0  1  2  3| |
 |       |       |           |           | |
 |       |       |12 13 14 15|20 21 22 23| |
 |       |       |16 17 18 19|16 17 18 19| |
 |       |       |20 21 22 23|12 13 14 15| |
 +-------+-------+-----------+-----------+-+
 
    A=: 'abcdefghijklmnopqrstuvwxyz'
    (A i. 'Now');(A i. 'now');(A {~ A i. 'now')
 +--------+--------+---+
 |26 14 22|13 14 22|now|
 +--------+--------+---+
 
    m=: 5 4 $ 12{. A
    m;(m i. 'efgh');(1{m);(4{m)
 +----+-+----+----+
 |abcd|1|efgh|efgh|
 |efgh| |    |    |
 |ijkl| |    |    |
 |abcd| |    |    |
 |efgh| |    |    |
 +----+-+----+----+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
i:
#+end_src
**** Name (monadic • dyadic)
Steps • Index Of Last
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dico.htm
#+begin_example
 
 Steps                               i:  0 _ _                        Index Of Last
 
 i: y is the list of integers from -y to    i: is like i. but gives the index of   
 y ; in general, i: a j. b produces the     the last occurrence. Thus:             
 list of numbers from -a to a in b equal                                           
 steps (or in 1+2*a steps if b is 0).          1 2 3 4 1 2 3 i: 1 2 2 3 3 3 4 4 5  
 Thus:                                      4 5 5 6 6 6 3 3 7                      
                                                                                   
    i: 3                                       1 2 3 4 1 2 3 i. 1 2 2 3 3 3 4 4 5  
 _3 _2 _1 0 1 2 3                           0 1 1 2 2 2 3 3 7                      
                                                                                   
    i: _2                                                                          
 2 1 0 _1 _2                                                                       
                                                                                   
    i: _2.5j4                                                                      
 2.5 1.25 0 _1.25 _2.5                                                             
                                                                                   
    i: 0                                                                           
 0                                                                                 
 
 For example:
 
    (3 # i.3 4) i: (i.2 4)
 2 5
 
    (3 # i.3 4) i. (i.2 4)
 0 3
 
    (#~ i.@# = i.~) 'eleemosynary'     NB. first occurrence of each letter
 elmosynar
 
    (#~ i.@# = i:~) 'eleemosynary'     NB. last  occurrence of each letter
 lemosnary
 
    (#~ i.~ = i:~) 'eleemosynary'      NB. letters that are unique
 lmosnar
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
I.
#+end_src
**** Name (monadic • dyadic)
Indices • Interval Index
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dicapdot.htm
#+begin_example
 
 Indices                             I.  1 _ _                       Interval Index
 
 I. y  ↔  (# i.@#) y                        x is assumed to be sorted in ascending 
                                            or descending order; ascending is      
                                            assumed if all the items of x are the  
                                            same. The comparison used in the       
                                            ordering is not tolerant.              
                                                                                   
                                            If y has the shape of an item of x ,   
                                            then x I. y is the least non-negative j
                                            such that j{x follows y in the         
                                            ordering, or #x if y follows {:x in the
                                            ordering or if x has no items. In      
                                            general, the search applies to the rank
                                            0>.(#$x)-1 cells of higher-ranked y .  
 
 For example:
 
    I. 0 0 1 0 1 0
 2 4
 
    ] x=: ?. 10$20
 6 15 19 12 14 19 0 17 0 14
    10 I.@:< x
 1 2 3 4 5 7 9
 
    0 2 2 5 I. _5 1 2 3 9 0
 0 1 1 3 4 0
 
    histogram=: <: @ (#/.~) @ (i.@#@[ , I.)
 
    d=: +/ 10 1e6 ?.@$ 21  NB. data
    e=: 5 * i.40           NB. interval end-points
 
    h=: e histogram d
    $ h
 40
    h
 0 0 0 0 1 6 38 151 400 1093 2417 5274 9732 17014 26482 39266 
    54622 70277 85594 96077 101359 101033 94374 82241 67322 
    52201 36777 24419 15174 8526 4666 2091 880 348 99 34 12 0 0 0
 
    load 'plot'
    plot e;h
 
 [histogram]
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
j.
#+end_src
**** Name (monadic • dyadic)
Imaginary • Complex
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/djdot.htm
#+begin_example
 
 Imaginary                            j.  0 0 0                             Complex
 
 j. y  ↔  0j1 * y                           x j. y  ↔  x + j. y                    
 
 For example:
 
    j. 4
 0j4
 
    3 j. 4
 3j4
 
    a=: i. 3 3
    a;(j. 2*a);(a j. 2*a)
 +-----+--------------+--------------+
 |0 1 2|   0  0j2  0j4|   0  1j2  2j4|
 |3 4 5| 0j6  0j8 0j10| 3j6  4j8 5j10|
 |6 7 8|0j12 0j14 0j16|6j12 7j14 8j16|
 +-----+--------------+--------------+
 
    (+ a j. 2*a);(|a j. 2*a)
 +-----------------+-----------------------+
 |    0  1j_2  2j_4|      0 2.23607 4.47214|
 | 3j_6  4j_8 5j_10| 6.7082 8.94427 11.1803|
 |6j_12 7j_14 8j_16|13.4164 15.6525 17.8885|
 +-----------------+-----------------------+
 
    1 2 3 j./ 4 5 6 7
 1j4 1j5 1j6 1j7
 2j4 2j5 2j6 2j7
 3j4 3j5 3j6 3j7
 
    j./?. 2 3 4$1000            A table of random complex numbers
 146j713 755j318  79j151  852j92
 854j178 439j260  660j90 257j862
  60j631 594j116 246j960 478j564
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
L.
#+end_src
**** Name (monadic • dyadic)
Level Of • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dlcapdot.htm
#+begin_example
 
 Level Of                               L.  _                                      
 
 If y is open or empty, L. y is 0; if it                                           
 is boxed and non-empty, the level is                                              
 one plus the maximum of the levels of                                             
 the opened elements.                                                              
 
 For example:
 
    ]y=: (<<2 3 4),<(5 6 ; <<i. 2 3)
 +-------+-------------+
 |+-----+|+---+-------+|
 ||2 3 4|||5 6|+-----+||
 |+-----+||   ||0 1 2|||
 |       ||   ||3 4 5|||
 |       ||   |+-----+||
 |       |+---+-------+|
 +-------+-------------+
 
    L. y
 3
 
    L."0 y
 2 3
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
o.
#+end_src
**** Name (monadic • dyadic)
Pi Times • Circle Function
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dodot.htm
#+begin_example
 
 Pi Times                            o.  0 0 0                      Circle Function
 
 o. y yields π times y . Thus o. 1 is       The function x&o. is even or odd as x  
 approximately 3.14159 .                    is even or odd; (-x)&o. is its inverse 
                                            (that is, y = (-x) o. x o. y for y in a
                                            significant sub-domain).               
 
     x o. y                   x        (-x) o. y                                   
 
     Sqrt 1-(Sqr y)           0        Sqrt 1-(Sqr y)         0&o.@(1&o.) ↔ 2&o.   
     Sine y                   1        Arcsine y              Radian arg/result    
     Cosine y                 2        Arccos y               "                    
     Tangent y                3        Arctan y               "                    
     Sqrt (Sqr y)+1           4        Sqrt (Sqr y)-1         4&o.@(5&o.) ↔ 6&o.   
     Sinh y                   5        Arcsinh y              Sinh is hyperbolic   
                                                              sine                 
     Cosh y                   6        Arccosh y                                   
     Tanh y                   7        Arctanh y                                   
     Sqrt - (1 + Sqr y)       8        - Sqrt - (1 + Sqr y)                        
                                                                                   
     RealPart y               9        y                                           
     Magnitude y             10        Conjugate (+y)                              
     ImaginaryPart y         11        j. y                                        
     AngleOf y               12        ^j. y                                       
 
 Examples:
 
    rfd=: 180 %~ o.    NB. Radians from degrees
    sin=: 1&o.
    SIN=: sin@rfd
    (rfd 0 90 180);(sin 0 1.5708);(SIN 0 90)
 +----------------+---+---+
 |0 1.5708 3.14159|0 1|0 1|
 +----------------+---+---+
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
p.
#+end_src
**** Name (monadic • dyadic)
Roots • Polynomial
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dpdot.htm
#+begin_example
 
 Roots                               p.  1 1 0                           Polynomial
 
   p. c   ↔ (m;r)                           There are three cases -- coefficients; 
   p.p. c ↔ c                               multiplier and roots; multinomial      
                                            (boxed matrix of coefficients and      
 If e is a vector whose elements are all    exponents):                            
 non-negative integers, then p.<c,.e                                               
 gives the coefficients of the                     c p. x  ↔  +/c*x^i.#c           
 equivalent polynomial:                        (m;r) p. x  ↔  m * */x-r            
                                                  (<r)&p.  ↔  (1;r)&p.             
   (p. <c,.e)&p. ↔ (<c,.e)&p.                 (<c,.e)p.<y  ↔  c+/ .*e*/ .(^~)y     
                                                                                   
                                            where m is a scalar; c and r are       
                                            scalars or vectors; and e is a vector  
                                            or matrix such that ($e)-:(#c),(#y) . A
                                            scalar y is extended normally.         
 
    p. 1 0 0 1
 +-+-----------------------------+
 |1|_1 0.5j0.866025 0.5j_0.866025|
 +-+-----------------------------+
 
    ]mr=: p. c=: 0 16 _12 2     NB. Multiplier/Roots from Coefficients
 +-+-----+
 |2|4 2 0|
 +-+-----+
 
    x=: 0 1 2 3 4 5
    (c p. x), ((<c,.i.4)p. x), (mr p. x),: 2*(x-4)*(x-2)*(x-0)
 0 6 0 _6 0 30
 0 6 0 _6 0 30
 0 6 0 _6 0 30
 0 6 0 _6 0 30
 
    c=: 1 3 3 1
    c p. x
 1 8 27 64 125 216
    (x+1)^3
 1 8 27 64 125 216
 
    bc=: !~/~i.5                NB. Binomial coefficients
    bc;(bc p./ x);((i.5) ^~/ x+1)
 +---------+--------------------+--------------------+
 |1 0 0 0 0|1  1  1   1   1    1|1  1  1   1   1    1|
 |1 1 0 0 0|1  2  3   4   5    6|1  2  3   4   5    6|
 |1 2 1 0 0|1  4  9  16  25   36|1  4  9  16  25   36|
 |1 3 3 1 0|1  8 27  64 125  216|1  8 27  64 125  216|
 |1 4 6 4 1|1 16 81 256 625 1296|1 16 81 256 625 1296|
 +---------+--------------------+--------------------+
 
    c&p. d. 1 x                 NB. First derivative of polynomial
 3 12 27 48 75 108
 
    (<1 _1 ,. 5 0) p. 3         NB. Coefficients / Exponents
 242
               
    _1 0 0 0 0 1 p. 3
 242
               
    p. <1 _1 ,. 5 0             NB. Coefficients / Exponents to Coefficients
 _1 0 0 0 0 1
 
    c=: _1 1 2 3 [ e=: 4 2$2 1 1 1 1 2 0 2
    c,.e                        NB. Coefficients / Exponents
 _1 2 1
  1 1 1
  2 1 2
  3 0 2
                   
    (<c,.e) p. <y=:2.5 _1       NB. Multinomial
 11.75
 
    c +/ .* e */ .(^~) y
 11.75
 
 Note that (<c,.e)p.<y is a “proper” multinomial only if the elements of e are all
 non-negative integers. In general the powers are not so limited, as in the
 weighted sum of square root and 4-th root:
 
    ] t=: <2 3,.1r2 1r4
 +-----+
 |2 1r2|
 |3 1r4|
 +-----+
 
    (t p. 16), +/ 2 3 * 16 ^ 1r2 1r4
 14 14
 
 The variant p.!.s is a stope polynomial; it differs from p. in that its definition
 is based upon the stope ^!.s instead of on ^ (power).
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
p..
#+end_src
**** Name (monadic • dyadic)
Poly. Deriv. • Poly. Integral
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dpdotdot.htm
#+begin_example
 
 Polynomial Derivative               p..  1 0 1                 Polynomial Integral
 
 Applied to a polynomial (coefficients      x p.. y produces the integral of       
 or boxed roots), p.. produces the          polynomial y with a constant term of x 
 coefficients of the derivative of          . Thus:                                
 polynomial. For example:                                                          
                                               5 p.. 4 6 6 4                       
    p.. 1 2 3 4 5                           5 4 3 2 1                              
 2 6 12 20                                     1 p.. 2 6 12 20                     
    p.. 5 4 3 2 1                           1 2 3 4 5                              
 4 6 6 4                                                                           
                                                                                   
    p.. 2; 1j1 1j_1                                                                
 _4 4                                                                              
    p.. p. 2; 1j1 1j_1                                                             
 _4 4                                                                              
 
 Further examples:
 
    p.. 1&o. t. i. 11x              NB. derivative of sine
 1 0 _1r2 0 1r24 0 _1r720 0 1r40320 0
    2&o. t. i.10x                   NB. cosine
 1 0 _1r2 0 1r24 0 _1r720 0 1r40320 0
 
    p.. 2&o. t. i. 11x              NB. derivative of cosine
 0 _1 0 1r6 0 _1r120 0 1r5040 0 _1r362880
    -@(1&o.) t. i.10x               NB. minus sine
 0 _1 0 1r6 0 _1r120 0 1r5040 0 _1r362880
    - (1&o. t. i.10x)
 0 _1 0 1r6 0 _1r120 0 1r5040 0 _1r362880
 
    p..^:(i.@#) 8 $ 1
    1    1    1   1   1  1 1 1
    1    2    3   4   5  6 7 0
    2    6   12  20  30 42 0 0
    6   24   60 120 210  0 0 0
   24  120  360 840   0  0 0 0
  120  720 2520   0   0  0 0 0
  720 5040    0   0   0  0 0 0
 5040    0    0   0   0  0 0 0
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
p:
#+end_src
**** Name (monadic • dyadic)
Primes • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dpco.htm
#+begin_example
 
 Primes                              p:  0 _ _                              Primes
 
 The result of p: i is the i-th prime.      _4 p: y is the next prime smaller than 
 For example:                               y and is the same as                   
                                            <:^:(0&p:)^:_"0 >.y-1 .                
    p: 0                                                                           
 2                                          _1 p: y is the same as p:^:_1 y , the  
    p: i. 15                                number of primes less than y .         
 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47                                          
                                            0 p: y is the same as -.1 p: y .       
 The inverse of p: is the number of                                                
 primes less than the argument, often       1 p: y is 1 if and only if y is prime. 
 denoted by π(n):                                                                  
                                            2 p: y is the same as __ q: y , a 2-row
    pi=: p:^:_1                             table of the prime factors and         
    pi i. 15                                exponents in the factorization of y .  
 0 0 0 1 2 2 3 3 4 4 4 4 5 5 6                                                     
    (] , pi ,: p:@pi) i.15                  3 p: y is the same as q: y , the list  
 0 1 2 3 4 5 6 7  8  9 10 11 12 13 14       of prime factors of y whose product is 
 0 0 0 1 2 2 3 3  4  4  4  4  5  5  6       equal to y .                           
 2 2 2 3 5 5 7 7 11 11 11 11 13 13 17                                              
                                            4 p: y is the next prime larger than y 
    y=: (2^31)-1                            and is the same as                     
    ] a=: pi y                              >:^:(0&p:)^:_"0 <.y+1 .                
 105097564                                                                         
    ] b=: p: a                              5 p: y computes the totient function   
 2147483647                                 (Euler’s phi function) of y , the      
    b=y                                     number of non-negative integers less   
 1                                          than y relatively prime to it, the sum 
                                            +/1=y+.i.y .                           
                                                                                   
                                            Currently, arguments larger than 2^31  
                                            are tested to be prime according to a  
                                            probabilistic algorithm (Miller-Rabin).
 
    4 p: 20
 23
    4&p:^:(i.8) 20
 20 23 29 31 37 41 43 47
 
    _4 p: 50
 47
    _4&p:^:(i.8) 50
 50 47 43 41 37 31 29 23
 
    ] y=: !14x
 87178291200
    ] c=: _4 4 p:"0 y
 87178291199 87178291219
    1 p: ({.c)+i.1--/c
 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
    1 p: _1+2^67x
 0
    m=: 366384x * */ p: i.9x
    1 p: 6171054912832631x + m * i.25
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 
    2 p: y
  2 3 5 7 11 13
 11 5 2 2  1  1
    'p e'=: 2 p: y
    */p^e
 87178291200
    y
 87178291200
 
    3 p: y
 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 5 5 7 7 11 13
    */ 3 p: y
 87178291200
    y
 87178291200
    e#p
 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 5 5 7 7 11 13
 
    5 p: y
 16721510400
    */(p-1)*p^e-1
 16721510400
    (- ~:)&.q: y
 16721510400
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
q:
#+end_src
**** Name (monadic • dyadic)
Prime Factors • Prime Exponents
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dqco.htm
#+begin_example
 
 Prime Factors                       q:  0 0 0                      Prime Exponents
 
 q: y is the list of prime factors of a     If x is positive and finite, x q: y is 
 positive integer argument y . For          the list of exponents in the prime     
 example:                                   decomposition of positive integer y,   
                                            based upon the first x primes; if x is 
    y=: 105600                              _ , a sufficient number of primes is   
    q: y                                    used.                                  
 2 2 2 2 2 2 2 3 5 5 11                                                            
    */ q: y                                 If x is negative and finite, x q: y is 
 105600                                     a 2-row table of the last |x primes and
    $ q: 1                                  exponents in the prime factorization of
 0                                          y ; if x is __ , a sufficient number of
    */ q: 1                                 primes is used. For example:           
 1                                                                                 
    q: b. _1                                                                       
 */                                            2 q: 700                            
    q: _1+2^67x                             2 0                                    
 193707721 761838257287                        10 q: 700                           
                                            2 0 2 1 0 0 0 0 0 0                    
                                               _ q: 700                            
                                            2 0 2 1                                
 
 Currently, factors in the result of q: larger than 2^31 are tested to be prime
 according to a probabilistic algorithm (Miller-Rabin).
 
    ~.@q: 700                            NB. Distinct prime factors
 2 5 7
 
    +/"1@=@q: 700                        NB. Exponents in prime factorization
 2 2 1
 
    5 q: 144^100x
 400 200 0 0 0
 
    __ q: 700
 2 5 7
 2 2 1
 
    __ q: !20x
  2 3 5 7 11 13 17 19
 18 8 4 2  1  1  1  1
 
    y=: 100
    e=: _&q:                             NB. Completed list of exponents
    (e ; +:&.e ; -:&.e ; %&3&.e)y        NB. Exponents, square, sqrt, cube root
 +-----+-----+--+-------+
 |2 0 2|10000|10|4.64159|
 +-----+-----+--+-------+
 
    V=: /@,:                             NB. For vectors of disparate lengths
 
    12 (+V&.e; -V&.e; >.V&.e; <.V&.e) y  NB. Product, quotient, LCM, GCD
 +----+----+---+-+
 |1200|0.12|300|4|
 +----+----+---+-+
 
    totient=: * -.@%@~.&.q:              NB. Euler's totient function
    totient 700
 240
 
    +/ 1 = 700 +. i.700
 240
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
r.
#+end_src
**** Name (monadic • dyadic)
Angle • Polar
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/drdot.htm
#+begin_example
 
 Angle                               r.  0 0 0                               Polar
 
 r.y ↔ ^j.y                                 x r. y ↔ x*r. y                        
 
 The result of r. y is a complex number of magnitude 1, whose real and imaginary
 parts are coordinates of the point on the unit circle at an angle of y radians.
 For example:
 
    r. 2
 _0.416147j0.909297
 
    +. r. 2
 _0.416147 0.909297
 
    | r. 2
 1
 
    y=: 1r4 * o. i.7            NB. Multiples of one-quarter π
    format=: 8j3&":
    (format ,.y);(format +. r.y);(format +. 2 r.y)
 +--------+----------------+----------------+
 |   0.000|   1.000   0.000|   2.000   0.000|
 |   0.785|   0.707   0.707|   1.414   1.414|
 |   1.571|   0.000   1.000|   0.000   2.000|
 |   2.356|  _0.707   0.707|  _1.414   1.414|
 |   3.142|  _1.000   0.000|  _2.000   0.000|
 |   3.927|  _0.707  _0.707|  _1.414  _1.414|
 |   4.712|   0.000  _1.000|   0.000  _2.000|
 +--------+----------------+----------------+
 
    3 r. _2
 _1.24844j_2.72789
 
    *. 3 r. _2
 3 _2
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
s:
#+end_src
**** Name (monadic • dyadic)
Symbol • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dsco.htm
#+begin_example
 
 Symbol                              s:  _ _ _                              Symbol
 
 Symbols are a data type and are created by the verb s:. Symbols provide a
 mechanism for searching, sorting, and comparisons more efficient than alternative
 mechanisms such as boxed strings. Structural, selection, and relational verbs work
 on symbols. Arithmetic verbs do not work on symbols.
 
 The monad s: produces an array of symbols. Several types of arguments are         
 acceptable:                                                                       
                                                                                   
   * string with the leading character as the separator                            
   * literal array where each row, excluding trailing blanks, is the name of a     
     symbol                                                                        
   * array of boxed strings                                                        
                                                                                   
 s:^:_1, the inverse of s:, is 5&s: .                                              
                                                                                   
 The dyad s: takes a scalar integer left argument and computes a variety of        
 functions:                                                                        
 
 Left   Right                   Function                                           
  0     0                     the cardinality of the set of symbols                
  0     1                     the string length (the number of characters used in  
                              the string table)                                    
  0     2                     the table of symbols; the columns are:               
                                                                                   
                                0   index in the string table                      
                                1   length in bytes                                
                                2   hash value                                     
                                3   color                                          
                                4   parent                                         
                                5   left                                           
                                6   right                                          
                                7   order #                                        
                                8   predecessor                                    
                                9   successor                                      
                                10  bit flags                                      
                                                                                   
                              The details of this data may change from one version 
                              of J to the next.                                    
  0     3                     the string table                                     
  0     4                     the hash table. _1 indicates free entries;           
                              non-negative values are indices into the table of    
                              symbols.                                             
  0     5                     the binary tree root                                 
  0     6                     the binary tree fill factor                          
  0     7                     the binary tree gap                                  
  0     10                    get the global symbols data, equivalent to 0 s:&.>   
                              i.8. The details of this data may change from one    
                              version of J to the next.                            
  0     11                    perform an integrity check on the global symbols data
  0     12                    the number of queries required for each symbol       
  1     array of symbols      a string of the symbol names each prefaced by a      
                              leading '`'                                          
 _1     string                the symbols list for a string containing symbol names
                              each prefaced by the leading character               
  2     array of symbols      a string of the symbol names each suffixed by a      
                              trailing zero character                              
 _2     string                the symbols list for a string containing symbol names
                              each suffixed by the trailing character              
  3     array of symbols      a literal array of the symbol names padded with zero 
                              characters                                           
 _3     literal array         the symbols array for the literal array wherein each 
                              row, excluding trailing zero characters, is the name 
                              of a symbol                                          
  4     array of symbols      a literal array of the symbol names padded with      
                              blanks                                               
 _4     literal array         the symbols array for the literal array wherein each 
                              row, excluding trailing blanks, is the name of a     
                              symbol                                               
  5     array of symbols      an array of boxed strings of the symbol names        
 _5     boxed strings         the symbols array for the boxed array wherein each   
                              box is a string of a symbol name                     
  6     array of symbols      an integer array of the symbol indices (indices into 
                              the table of symbols)                                
 _6     indices               the symbols for the indices                          
  7     array of symbols      an integer array of the order numbers for the symbols
 10     global symbols data   set the global symbols data (as previously returned  
                              by 0 s: 10) after performing an integrity check on   
                              it. Incorrect global symbols data may cause          
                              misinterpretation of symbol arrays, or data          
                              corruption, or a system crash, or the end of         
                              civilization as we know it.                          
 
 The inverse of k&s: is (-k)&s:, for non-zero integer k between _6 and 6 .         
 
 The remainder of this text is divided into the following sections: [[file:///Applications/j64-806/addons/docs/help/dictionary/dsco.htm#display][Display]], 
 [[file:///Applications/j64-806/addons/docs/help/dictionary/dsco.htm#examples][Annotated Examples]], [[file:///Applications/j64-806/addons/docs/help/dictionary/dsco.htm#spacetime][Space and Time]], and [[file:///Applications/j64-806/addons/docs/help/dictionary/dsco.htm#persistence][Persistence]].
 
 Display
 
 The display of a symbol is the character ` (96{a.) prefaced to the symbol name;
 the display of a symbol array is similar to that display of numeric arrays, except
 that columns are aligned on the left. See [[file:///Applications/j64-806/addons/docs/help/dictionary/dsco.htm#examples][Annotated Examples]] below.
 
 Annotated Examples
 
    ] t=: s: ' zero one two three four five'
 `zero `one `two `three `four `five
 
    $ t                              NB. a list of 6 symbols
 6
    3 5 $ t                          NB. a matrix of symbols
 `zero `one  `two  `three `four 
 `five `zero `one  `two   `three
 `four `five `zero `one   `two  
 
    1 3 5 3 1 { t
 `one `three `five `three `one
    |. t
 `five `four `three `two `one `zero
    _2 |. t
 `four `five `zero `one `two `three
    1 0 2 0 4 0 # t
 `zero `two `two `four `four `four `four
 
    <"0 t                            NB. symbols can be boxed
 +-----+----+----+------+-----+-----+
 |`zero|`one|`two|`three|`four|`five|
 +-----+----+----+------+-----+-----+
    (2|i.#t) </. t
 +----------------+-----------------+
 |`zero `two `four|`one `three `five|
 +----------------+-----------------+
 
    <:/~ t                           NB. relations work on symbols
 1 0 0 0 0 0
 1 1 1 1 0 0
 1 0 1 0 0 0
 1 0 1 1 0 0
 1 1 1 1 1 0
 1 1 1 1 1 1
 
    t + t                            NB. arithmetic functions don't work on symbols
 |domain error
 |   t    +t
 
    /: t                             NB. symbols can be graded/sorted
 5 4 1 3 2 0
 
    5 s: t                           NB. convert symbols to boxed strings
 +----+---+---+-----+----+----+
 |zero|one|two|three|four|five|
 +----+---+---+-----+----+----+
    (/: t) -: /: 5 s: t
 1
 
    /:~ t
 `five `four `one `three `two `zero
 
    <:/~ /:~ t
 1 1 1 1 1 1
 0 1 1 1 1 1
 0 0 1 1 1 1
 0 0 0 1 1 1
 0 0 0 0 1 1
 0 0 0 0 0 1
 
    t i.  s: ' three one four one five nine'
 3 1 4 1 5 6
    t e.~ s: ' three one four one five nine'
 1 1 1 1 1 0
 
    10{. t                           NB. the fill for symbols is the 0-length symbol
 `zero `one `two `three `four `five ` ` ` `
 
    _10{.t
 ` ` ` ` `zero `one `two `three `four `five
 
    0 s: 0                           NB. cardinality (current # of unique symbols)
 8
 
    a=:   ;:'A AAPL AMAT AMD AMZN ATT BA CRA CSCO DELL F GE GM HWP IBM INTC'
    a=: a,;:'JDSU LLY LU MOT MSFT NOK NT PFE PG QCOM RMBS T XRX YHOO'
    b=: ;:'NY SF LDN TOK HK FF TOR'
    c=: ;:'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'
    d=: <;._1 ' 00 01 02 03 04 05 06 07 08 09'
    e=: ;:'open high low close'
 
    t=: }.@;&.>{' ',&.>&.>a;b;c;d;<e
    $t
 30 7 12 10 4
    */ $t
 100800
    2 4 ($,) t
 +----------------+----------------+---------------+-----------------+
 |A NY Jan 00 open|A NY Jan 00 high|A NY Jan 00 low|A NY Jan 00 close|
 +----------------+----------------+---------------+-----------------+
 |A NY Jan 01 open|A NY Jan 01 high|A NY Jan 01 low|A NY Jan 01 close|
 +----------------+----------------+---------------+-----------------+
    y=: s: t                         NB. create a whole lot of symbols
    $y
 30 7 12 10 4
    2 4 ($,) y
 `A NY Jan 00 open `A NY Jan 00 high `A NY Jan 00 low `A NY Jan 00 close
 `A NY Jan 01 open `A NY Jan 01 high `A NY Jan 01 low `A NY Jan 01 close
 
    0 s: 11                          NB. system integrity check
 1
    0 s: 0                           NB. cardinality
 100808
 
    (+/ % #) 0 s: 12                 NB. mean # of queries per symbol
 1.31213
 
    h=: 100808 {. 2 {"1 ] 0 s: 2     NB. hash values
 
    (+/ ~: h) % #h                   NB. fraction of distinct hash values
 0.999821
    (+/ ~: h |~ #0 s: 4) % #h        NB. fraction with respect to hash table
 0.831005
 
 Space and Time
 
 In the current implementation, a symbol y requires 4 bytes for an index, 8 or more
 bytes in the hash table, 44 bytes in the table of symbols, and len y bytes (times
 2 or 4 if literal2 or literal4) in the string table, where len=: #&>@(5&s:) , the
 length of the symbol name. (A symbol requires a single 4-byte entry in the hash
 table, but for efficient hashing the system maintains at least 2*n entries for n
 symbols.) Multiple occurrences of a symbol require just multiple indices; entries
 in the hash table, the table of symbols, and the string table are not duplicated.
 
 Computations on symbols generally require linear time. Specifically:
 
   query (new)         O((len y) * ^. 0 s: 0)
   query (old)         O(len y)              
   /:y                 O(*/$y)               
   i{y                 O((*/$i) * */}.$y)    
   x < y etc.          O(x >.&(*/@$) y)      
   x i. y              O(x + &(*/@$) y)      
 
 Persistence
 
 The interpretation of symbols depend on the global symbols data 0 s: 10. For this
 interpretation to persist across J sessions the global symbols data must be
 restored at the beginning of a session. Thus:
 
 ((3!:1) 0 s: 10) 1!:2 <'symb.dat'         to    store the global symbols data
 10 s: (3!:2) 1!:1 <'symb.dat'             to restore the global symbols data 
 
 See the cautionary statements under 10 s: x.
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
u:
#+end_src
**** Name (monadic • dyadic)
Unicode • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/duco.htm
#+begin_example
 
 Unicode                             u:  _ _ _                             Unicode
 
 J             char (1-byte char) — an 8-bit value from 0 to 255                   
 datatypes:                                                                        
               literal2 (2-byte char) — a 16-bit value from 0 to 65535             
               literal4 (4-byte char) — an unsigned 32-bit value                   
 Encodings:    ASCII — 0 to 127, a subset of U8                                    
               U8 — Unicode code point value in multibyte encoding                 
               U16 — Unicode code point value in multi-literal2 encoding           
               U32 — Each unicode code point is represented by exactly one literal4
               char                                                                
 
 All J primitives and most u: dyads work with values, not encodings, the only
 exception is ": which convert literal2 and literal4 to U8 encoded 1-byte char.
 ASCII, U8, U16 and U32 encodings are used in 7&u: , 8&u: and 9&u: .
 
 The monad u: applies to several kinds     The dyad u: takes a scalar integer left 
 of arguments:                             argument and applies to several kinds of
                                           right arguments.                        
                                                                                   
 Argument          Result                                                          
 char literal4   same as 2&u:              Left    Result       Right              
 literal2        copy of argument                                                  
 integers        same as 4&u:              1       char       char       as is     
                                                                         high-order
                                                              literal2   8 bits    
 The inverse of the monad u: is 3&u:                                     discarded 
                                                                         high 3    
                                                              literal4   bytes     
                                                                         discarded 
                                                                                   
                                           2       literal2              high-order
                                                              char       8 bits are
                                                                         0         
                                                              literal2   as is     
                                                                         high 2    
                                                              literal4   bytes     
                                                                         discarded 
                                                                                   
                                           3       integers   char,literal2 or     
                                                              literal4             
                                           4       literal2   integers in the range
                                                              -65536 to 65535      
                                           5       char       literal2 or literal4 
                                                              in the range 0 to 255
                                           6       literal2   pairs of chars are   
                                                              converted to         
                                                              literal2s            
                                           7       char or    U8         converted 
                                                   U16                   to U16    
                                                              ASCII      as is     
                                                              literal2   if all    
                                                                         values    
                                                                         <128,     
                                                                         convert to
                                                                         ASCII,    
                                                                         otherwise 
                                                                         as is     
                                                              U32        if all    
                                                                         values    
                                                                         <128,     
                                                                         convert to
                                                                         ASCII,    
                                                                         otherwise 
                                                                         converted 
                                                                         to U16    
                                                              integers   the range 
                                                                         0 to      
                                                                         16b10ffff 
                                                                         converted 
                                                                         to U16    
                                                                                   
                                                              an empty right       
                                                              argument produces an 
                                                              empty char result    
                                           8       U8         U16        converted 
                                                                         to U8     
                                                              U32        converted 
                                                                         to U8     
                                                              char       as is     
                                                              integers   the range 
                                                                         0 to      
                                                                         16b10ffff 
                                                                         converted 
                                                                         to U8     
                                                                                   
                                                              an empty right       
                                                              argument produces an 
                                                              empty char result    
                                           9       char or    U8         converted 
                                                   U32                   to U32    
                                                              ASCII      as is     
                                                              U16        if all    
                                                                         values    
                                                                         <128,     
                                                                         convert to
                                                                         ASCII,    
                                                                         otherwise 
                                                                         converted 
                                                                         to U32    
                                                                         as is, and
                                                                         any valid 
                                                              literal4   surrogate 
                                                                         pairs are 
                                                                         converted 
                                                              integers   converted 
                                                                         to        
                                                                         literal4  
                                                                                   
                                                              an empty right       
                                                              argument produces an 
                                                              empty char result    
                                           10                            promoted  
                                                   literal4   char       to        
                                                                         literal4  
                                                              literal2   promoted  
                                                                         to        
                                                                         literal4  
                                                              literal4   as is     
                                                              integers   converted 
                                                                         to        
                                                                         literal4  
                                                                                   
                                                              each char or literal2
                                                              is promoted to       
                                                              literal4 character by
                                                              character, no U8 or  
                                                              U16 encoding assumed 
 
                                           1&u: and 2&u: , 3&u: and 4&u: , and 7&u:
                                           and 8&u: are inverse pairs.             
 
 The display of an array x of 2-byte or 4-byte characters is that of 8 u:"1 x ,
 that is, converting to 1-byte characters in utf-8 encoding.
 
 Examples:
 
    ] t=: u: 'We the people' 
 We the people
    3!:0 t
 131072                         NB. the literal2 datatype numeric code is 131072
 
    ] t=: 10 u: 'We the people' 
 We the people
    3!:0 t
 262144                         NB. the literal4 datatype numeric code is 262144
 
    u: 97 98 99 +/ 0 256 512 1024
 ašɡѡ                           NB. 2-byte characters have the same
 bŢɢѢ                           NB. display as U8 characters
 cţɣѣ
 
    'a' = u: 97 + 0 256 512 1024
 1 0 0 0
 
    ] t=: (2 4$'abcdefgh') , u: 'wxyz'
 abcd                           NB. 1- and 2-byte characters can be catenated together.
 efgh                           NB. The 1-byte characters are promoted.
 wxyz
    3!:0 t
 131072
 
    ] t=: t , 10 u: 'ABCD'
 abcd                           NB. The 2-byte characters are promoted to
 efgh                           NB. 4-byte characters.
 wxyz
 ABCD
    3!:0 t
 262144
 
#+end_example
*** Verb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
x:
#+end_src
**** Name (monadic • dyadic)
Extended Precision • Num/Denom
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dxco.htm
#+begin_example
 
 Extended Precision                   x:  _ _ _                           Num/Denom
 
 x: applies to real numbers and produces    1 x: y is the same as x: y ; and 2 x: y
 extended precision rational numbers. It    produces the two extended integers of  
 applies to integers and produces           the numerator and denominator of the   
 extended integers. The implied             argument.                              
 comparison in x: is tolerant. The                                                 
 inverse x:^:_1 converts rationals,         The inverse of k x: y is (-k)x: y ;    
 including extended integers, into          that is, _1 x: y is the same as x:^:_1 
 finite precision numbers (floating         y and _2 x: y is the same as %/"1 y .  
 point or integer).                                                                
 
    x: 1.2
 6r5
 
    2 x: 1.2
 6 5
 
    x: 1.2 _1.2 0 0.07
 6r5 _6r5 0 7r100
 
    x: 3j4
 |domain error
 |       x:3j4
 
    ] pi =: o.1
 3.14159
 
    x: pi
 1285290289249r409120605684
 
    pi - 1285290289249%409120605684
 1.49214e_13
 
    x:!.0 pi
 884279719003555r281474976710656
 
    pi - 884279719003555%281474976710656
 0
 
    2 x: 1r2 3r4 5r6 _7r8
  1 2
  3 4
  5 6
 _7 8
 
 See also [[file:///Applications/j64-806/addons/docs/help/dictionary/dictg.htm][Section II G]].
 
#+end_example
** Adverbs
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
~
#+end_src
**** Name (monadic • dyadic)
Reflex • Passive
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d220v.htm
#+begin_example
 
 Reflexive                           u~  _ ru lu                            Passive
 
 u~ y ↔ y u y . For example, ^~ 3 is 27,    ~ commutes or crosses connections to   
 and +/~ i. n is an addition table.         arguments: x u~ y ↔ y u x .            
 
 Certain uses of the reflexive and passive are illustrated below:
 
    x=: 1 2 3 4 [ y=: 4 5 6
    x (,.@[ ; ^/ ; ^/~ ; ^/~@[ ; ]) y
 +-+-------------+-------------+-----------+-----+
 |1|  1    1    1|4 16  64  256|1  1  1   1|4 5 6|
 |2| 16   32   64|5 25 125  625|2  4  8  16|     |
 |3| 81  243  729|6 36 216 1296|3  9 27  81|     |
 |4|256 1024 4096|             |4 16 64 256|     |
 +-+-------------+-------------+-----------+-----+
 
    into=: %~
    (i. 6) % 5
 0 0.2 0.4 0.6 0.8 1
 
    5 into i. 6
 0 0.2 0.4 0.6 0.8 1
 
    from=: -~
    (i.6) - 5
 _5 _4 _3 _2 _1 0
 
    5 from i.6
 _5 _4 _3 _2 _1 0
 
    (x %/ y);(x %~/ y);(x %/~ y)
 +-----------------+-------------------+------------------+
 |0.25 0.2 0.166667|      4       5   6|4   2 1.33333    1|
 | 0.5 0.4 0.333333|      2     2.5   3|5 2.5 1.66667 1.25|
 |0.75 0.6      0.5|1.33333 1.66667   2|6   3       2  1.5|
 |   1 0.8 0.666667|      1    1.25 1.5|                  |
 +-----------------+-------------------+------------------+
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
/
#+end_src
**** Name (monadic • dyadic)
Insert • Table
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d420.htm
#+begin_example
 
 Insert                            m/ u/  _ _ _                               Table
 
 u/y applies the dyad u between the         If x and y are numeric lists, then x */
 items of y . Thus:                         y is their multiplication table. Thus: 
                                                                                   
    m=: i. 3 2                                 1 2 3 */ 4 5 6 7                    
    m;(+/m);(+/"1 m);(+/2 3 4)               4  5  6  7                            
 +---+---+-----+-+                           8 10 12 14                            
 |0 1|6 9|1 5 9|9|                          12 15 18 21                            
 |2 3|   |     | |                                                                 
 |4 5|   |     | |                          In general, each cell of x is applied  
 +---+---+-----+-+                          to the entire of y . Thus x u/ y is    
                                            equivalent to x u"(lu,_) y where lu is 
 m/y inserts successive verbs from the      the left rank of u .                   
 gerund m between items of y, extending                                            
 m cyclically as required. Thus, +`*/i.6    The case */ is called outer product in 
 is 0+1*2+3*4+5 .                           tensor analysis.                       
 
 If y has no items (that is, 0=#y), the result of u/y is the neutral or identity
 element of the function u . A neutral of a function u is a value e such that x u e
 ↔ x or e u x ↔ x, for every x in the domain (or some significant sub-domain such
 as boolean) of u . This definition of insertion over an argument having zero items
 extends partitioning identities of the form u/y ↔ (u/k{.y) u (u/k}.y) to the cases
 k e. 0,#y .
 
 The identity function of u is a function ifu such that ifu y ↔ u/y if 0=#y . The
 identity functions used are:
 
 Identity function       For                                          
                                                                      
 0  $~ }.@$              <  >  +  -  +.  ~:  |  (2 4 5 6 b.)          
 1  $~ }.@$              =  <:  >:  *  %  *.  %:  ^  !  (1 9 11 13 b.)
 _  $~ }.@$              <.                                           
 __ $~ }.@$              >.                                           
 (v^:_1 ifu$0) $~ }.@$   u&.v                                         
 i.@(0&,)@(2&}.)@$       ,                                            
 /:@{.                   C.  {                                        
 =@/:@{.                 %.  +/ . *                                   
 ifu@#                   u/                                           
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
/.
#+end_src
**** Name (monadic • dyadic)
Oblique • Key
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d421.htm
#+begin_example
 
 Oblique                           m/.  u/. _ _ _                               Key
 
 u/.y applies u to each of the oblique      x u/.y ↔ (=x) u@# y , that is, items of
 lines of a table y . For example:          x specify keys for corresponding items 
                                            of y and u is applied to each          
    i.3 4                                   collection of y having identical keys. 
 0 1  2  3                                  For example:                           
 4 5  6  7                                                                         
 8 9 10 11                                     1 2 3 1 3 2 1 </. 'abcdefg'         
                                            +---+--+--+                            
    </. i.3 4                               |adg|bf|ce|                            
 +-+---+-----+-----+----+--+                +---+--+--+                            
 |0|1 4|2 5 8|3 6 9|7 10|11|                                                       
 +-+---+-----+-----+----+--+                x m/.y applies successive verbs from   
                                            the gerund m to the collections of y,  
 In general, u/.y is the result of          extending m cyclically as required.    
 applying u to the oblique lines of                                                
 _2-cells of y . If the rank of y is                                               
 less than two, y is treated as the                                                
 table ,.y .                                                                       
                                                                                   
 m/.y applies successive verbs from the                                            
 gerund m to the oblique lines of                                                  
 _2-cells of y, extending m cyclically                                             
 as required. Thus:                                                                
                                                                                   
    <`(<@|.) /. i.3 4                                                              
 +-+---+-----+-----+----+--+                                                       
 |0|4 1|2 5 8|9 6 3|7 10|11|                                                       
 +-+---+-----+-----+----+--+                                                       
 
 The application of a function to diagonals of a table is commonly useful, as in
 correlation, in convolution, and in products of polynomial coefficients (or,
 equivalently, products of numbers in a fixed base). For example:
 
    t=: p */ q [ p=: 1 2 1 [ q=: 1 3 3 1
 
    t ; (+//.t) ; 1 1 &(+//.@(*/)) ^: (i.6) 1
 +-------+-------------+-------------+
 |1 3 3 1|1 5 10 10 5 1|1 0  0  0 0 0|
 |2 6 6 2|             |1 1  0  0 0 0|
 |1 3 3 1|             |1 2  1  0 0 0|
 |       |             |1 3  3  1 0 0|
 |       |             |1 4  6  4 1 0|
 |       |             |1 5 10 10 5 1|
 +-------+-------------+-------------+
 
    ((10#.p)*10#.q), 10 #. +//. p */ q
 161051 161051
 
 Unlike polynomial coefficients, the diagonal sums of a multiplication table of
 digits should be “normalized” if any equal or exceed the radix.
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
f.
#+end_src
**** Name (monadic • dyadic)
Fix • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dfdot.htm
#+begin_example
 
 Fix                                 m f.  u f.                                    
 
 If x is a proverb, then y=: x f. is equivalent to it, except that any names that  
 occur in the definition of x are (recursively) replaced by their referents.       
 Consequently, any subsequent change in these referents that might change the      
 definition of x will not affect the definition of y .                             
                                                                                   
 If x is the name of any entity (that is, a pronoun, proverb, pro-adverb, or       
 pro-conjunction), then 'x' f. is equivalent, but with all names in its definition 
 recursively replaced by their referents.                                          
                                                                                   
 x f. will not fix any part of x that contains [[file:///Applications/j64-806/addons/docs/help/dictionary/d212.htm][$:]] .                                
 
 For example:
 
    sum=: +/
    mean=: sum % #
    norm=: - mean
    norm a=: 2 3 4 5
 _1.5 _0.5 0.5 1.5
 
    N=: norm f.
    N a
 _1.5 _0.5 0.5 1.5
 
    norm
 - mean
 
    N
 - (+/ % #)
 
    sum=: -/
    norm a
 2.5 3.5 4.5 5.5
 
    N a
 _1.5 _0.5 0.5 1.5
 
    adv=: norm@
    *: adv
 norm@*:
    adv
 norm@
 
    'adv' f.
 (- (-/ % #))@
 
    'a' f.
 2 3 4 5
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
\
#+end_src
**** Name (monadic • dyadic)
Prefix • Infix
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d430.htm
#+begin_example
 
 Prefix                            m\  u\  _ 0 _                              Infix
 
 u\y has #y items resulting from            If x>:0 , the items of x u\ y result   
 applying u to each of the prefixes k{.y    from applying u to each infix of length
 , for k from 1 to #y .                     x . If x<0 , u is applied to           
                                            non-overlapping infixes of length |x , 
 m\y applies successive verbs from the      including any final shard.             
 gerund m to the prefixes of y ,                                                   
 extending m cyclically as required.        x m\ y applies successive verbs from   
                                            the gerund m to the infixes of y ,     
                                            extending m cyclically as required.    
 
    +/\a=: 1 2 4 8 16                     NB. Subtotals, or partial sums
 1 3 7 15 31
 
    */\a                                  NB. Partial products
 1 2 8 64 1024
 
    <\a
 +-+---+-----+-------+----------+
 |1|1 2|1 2 4|1 2 4 8|1 2 4 8 16|
 +-+---+-----+-------+----------+
 
    <\i.3 4
 +-------+-------+---------+
 |0 1 2 3|0 1 2 3|0 1  2  3|
 |       |4 5 6 7|4 5  6  7|
 |       |       |8 9 10 11|
 +-------+-------+---------+
 
    (+/\^:_1 +/\ a) ,: */\^:_1 a
 1 2 4 8 16
 1 2 2 2  2
 
 The following examples illustrate the use of the dyad infix:
 
    (2 -/\ ])  a                          NB. Backward differences
 _1 _2 _4 _8
    (2 -~/\ ]) a                          NB. Forward  differences
 1 2 4 8
 
    3  <\ 'abcdefgh'
 +---+---+---+---+---+---+
 |abc|bcd|cde|def|efg|fgh|
 +---+---+---+---+---+---+
    _3 <\ 'abcdefgh'
 +---+---+--+
 |abc|def|gh|
 +---+---+--+
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
\.
#+end_src
**** Name (monadic • dyadic)
Suffix • Outfix
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d431.htm
#+begin_example
 
 Suffix                           m\.  u\.  _ 0 _                            Outfix
 
 u\.y has #y items resulting from           If x>:0 in x u\. y , then u applies to 
 applying u to suffixes of y , beginning    outfixes of y obtained by suppressing  
 with one of length #y (that is, y          successive infixes of length x . If x<0
 itself), and continuing through a          , the outfixes result from suppressing 
 suffix of length 1 .                       non-overlapping infixes, the last of   
                                            which may be a shard.                  
 m\.y applies successive verbs from the                                            
 gerund m to the suffixes of y ,            x m\.y applies successive verbs from   
 extending m cyclically as required.        the gerund m to the outfixes of y,     
                                            extending m cyclically as required.    
 
    */\. y=: 1 2 3 4 5
 120 120 60 20 5
 
    <\. y
 +---------+-------+-----+---+-+
 |1 2 3 4 5|2 3 4 5|3 4 5|4 5|5|
 +---------+-------+-----+---+-+
 
    3 <\. 'abcdefgh'
 +-----+-----+-----+-----+-----+-----+
 |defgh|aefgh|abfgh|abcgh|abcdh|abcde|
 +-----+-----+-----+-----+-----+-----+
 
    _3 <\. 'abcdefgh'
 +-----+-----+------+
 |defgh|abcgh|abcdef|
 +-----+-----+------+
 
    ]m=: i.3 3
 0 1 2
 3 4 5
 6 7 8
 
    <"_2 (minors=: 1&(|:\.)"2^:2) m
 +---+---+---+
 |4 5|3 5|3 4|
 |7 8|6 8|6 7|
 +---+---+---+
 |1 2|0 2|0 1|
 |7 8|6 8|6 7|
 +---+---+---+
 |1 2|0 2|0 1|
 |4 5|3 5|3 4|
 +---+---+---+
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
}
#+end_src
**** Name (monadic • dyadic)
Item Amend • Amend
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d530n.htm
#+begin_example
 
 Item Amend                           m}  _ _ _                               Amend
 
 If m is numeric and z=: m} y , then $z     If m is not a gerund, x m} y is formed 
 equals $m , which equals the shape of      by replacing by x those parts of y     
 an item of y . The atom j{z is j{(j{m)     selected by m&{ (an error is signalled 
 {y . For example:                          if such selection requires fill). Thus:
                                                                                   
    y=: a.{~(a.i.'A')+i.4 5                    y; '%*'(1 3;2 _1)} y                
    m=: 3 1 0 2 1                           +-----+-----+                          
    y ; m ; m}y                             |ABCDE|ABCDE|                          
 +-----+---------+-----+                    |FGHIJ|FGH%J|                          
 |ABCDE|3 1 0 2 1|PGCNJ|                    |KLMNO|KLMN*|                          
 |FGHIJ|         |     |                    |PQRST|PQRST|                          
 |KLMNO|         |     |                    +-----+-----+                          
 |PQRST|         |     |                                                           
 +-----+---------+-----+                    $x must be a suffix of $m{y , and x has
                                            the same effect as ($m{y)$,x . Thus:   
                                                                                   
                                               y; 'think' 1 2} y                   
                                            +-----+-----+                          
                                            |ABCDE|ABCDE|                          
                                            |FGHIJ|think|                          
                                            |KLMNO|think|                          
                                            |PQRST|PQRST|                          
                                            +-----+-----+                          
 
 If m is a gerund, one of its elements determines the index argument to the adverb
 } , and the others modify the arguments x and y :
 
 x (v0`v1`v2)} y  ↔  (x v0 y) (x v1 y)} (x v2 y)
 (v0`v1`v2)} y    ↔  (v1 y)} (v2 y)             
 (v1`v2)} y       ↔  (v1 y)} (v2 y)             
 
 For example, the following functions E1, E2, and E3 interchange two rows of a
 matrix, multiply a row by a constant, and add a multiple of one row to another:
 
    E1=: <@] C. [  
    E2=: f`g`[}  
    E3=: F`g`[}
    f=: {:@] * {.@] { [
    F=: [: +/ (1:,{:@]) * (}:@] { [)
    g=: {.@]
    M=: i. 4 5
    M;(M E1 1 3);(M E2 1 10);(M E3 1 3 10)
 +--------------+--------------+--------------+-------------------+
 | 0  1  2  3  4| 0  1  2  3  4| 0  1  2  3  4|  0   1   2   3   4|
 | 5  6  7  8  9|15 16 17 18 19|50 60 70 80 90|155 166 177 188 199|
 |10 11 12 13 14|10 11 12 13 14|10 11 12 13 14| 10  11  12  13  14|
 |15 16 17 18 19| 5  6  7  8  9|15 16 17 18 19| 15  16  17  18  19|
 +--------------+--------------+--------------+-------------------+
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
b.
#+end_src
**** Name (monadic • dyadic)
Boolean • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dbdotn.htm
#+begin_example
 
 Boolean                             m b.  _ 0 0                                   
 
 The monad is equivalent to a zero left     If f is a dyadic boolean function and d
 argument; that is,                         =: 0 1 , then d f/ d (or f/~d) is its  
 m b. y ↔ 0 m b. y                          complete table. For example the tables 
                                            for or, nor, and, and not-and appear as
                                            follows:                               
                                                                                   
                                               (+./~ ; +:/~ ; *./~ ; *:/~) d=: 0 1 
                                            +---+---+---+---+                      
                                            |0 1|1 0|0 0|1 1|                      
                                            |1 1|0 0|0 1|1 0|                      
                                            +---+---+---+---+                      
                                                                                   
                                            If ordered by their tables, each of the
                                            sixteen possible boolean dyads can be  
                                            characterized by its index k ; the     
                                            phrase k b. produces the corresponding 
                                            function. Moreover, negative indexing  
                                            and array arguments may be used.       
                                                                                   
                                            An atom m=16+k specifies bitwise       
                                            boolean functions on integer arguments.
                                            An argument atom is treated as a list  
                                            of length w of bits, where w is the    
                                            word size of the underlying machine.   
                                            For example, 17 b. specifies bitwise   
                                            and.                                   
                                                                                   
                                            Finally, 32 b. specifies rotate, 33 b. 
                                            specifies shift, and 34 b. specifies   
                                            signed shift.                          
 
 The following table lists all the possible boolean functions:
 
                 Ravelled                 
      m           Table       Function    
 0   _16  16     0 0 0 0      0           
 1   _15  17     0 0 0 1      x *. y      
 2   _14  18     0 0 1 0      x > y       
 3   _13  19     0 0 1 1      x           
 4   _12  20     0 1 0 0      x < y       
 5   _11  21     0 1 0 1      y           
 6   _10  22     0 1 1 0      x ~: y      
 7   _9   23     0 1 1 1      x +. y      
 8   _8   24     1 0 0 0      x +: y      
 9   _7   25     1 0 0 1      x = y       
 10  _6   26     1 0 1 0      -. y        
 11  _5   27     1 0 1 1      x >: y      
 12  _4   28     1 1 0 0      -. x        
 13  _3   29     1 1 0 1      x <: y      
 14  _2   30     1 1 1 0      x *: y      
 15  _1   31     1 1 1 1      1           
          32                  rotate      
          33                  shift       
          34                  signed shift
 
 Further examples:
 
    (7 b./~ ; 8 b./~ ; 1 b./~ ; 14 b./~) d=: 0 1
 +---+---+---+---+
 |0 1|1 0|0 0|1 1|
 |1 1|0 0|0 1|1 0|
 +---+---+---+---+
 
    (_1 b./~ ; _3 b./~ ; _15 b./~) d       NB. negative indexing
 +---+---+---+
 |1 1|1 1|0 0|
 |1 1|0 1|0 1|
 +---+---+---+
 
    (<"2) 2 0 1 |: 7 8 1 15 b./~ d         NB. array arguments
 +---+---+---+---+
 |0 1|1 0|0 0|1 1|
 |1 1|0 0|0 1|1 1|
 +---+---+---+---+
 
    12345 (17 b.) 67890                    NB. bitwise and
 48
    f=: (32#2)&#: { '.x'"_
    f 12345 67890 48
 ..................xx......xxx..x
 ...............x....x..x..xx..x.
 ..........................xx....
 
    _12345 (23 b.) 67890                   NB. bitwise or
 _12297
    f _12345 67890 _12297
 xxxxxxxxxxxxxxxxxx..xxxxxx...xxx
 ...............x....x..x..xx..x.
 xxxxxxxxxxxxxxxxxx..xxxxxxxx.xxx
 
    20 b./~ i.10                           NB. bitwise less than table
 0 1 2 3 4 5 6 7 8 9
 0 0 2 2 4 4 6 6 8 8
 0 1 0 1 4 5 4 5 8 9
 0 0 0 0 4 4 4 4 8 8
 0 1 2 3 0 1 2 3 8 9
 0 0 2 2 0 0 2 2 8 8
 0 1 0 1 0 1 0 1 8 9
 0 0 0 0 0 0 0 0 8 8
 0 1 2 3 4 5 6 7 0 1
 0 0 2 2 4 4 6 6 0 0
 
    23 b./\ 2^i.10                         NB. cumulative bitwise or
 1 3 7 15 31 63 127 255 511 1023
 
    _5 (33 b.) 12345                       NB. shift
 385
    f 12345 385   
 ..................xx......xxx..x
 .......................xx......x
 
    _5 (33 b.) _12345                      NB. shift
 134217342
    f _12345 134217342
 xxxxxxxxxxxxxxxxxx..xxxxxx...xxx
 .....xxxxxxxxxxxxxxxxxx..xxxxxx.
 
    _5 (34 b.) _12345                      NB. signed shift
 _386
    f _12345 _386
 xxxxxxxxxxxxxxxxxx..xxxxxx...xxx
 xxxxxxxxxxxxxxxxxxxxxxx..xxxxxx.
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
b.
#+end_src
**** Name (monadic • dyadic)
Basic • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dbdotu.htm
#+begin_example
 
 Basic Characteristics                          u b.  _                            
 
 u b. y gives the linear representation                                            
 of the [[file:///Applications/j64-806/addons/docs/help/dictionary/d202n.htm][obverse]] of u if y is _1; its                                               
 [[file:///Applications/j64-806/addons/docs/help/dictionary/dictb.htm][ranks]] if y is 0; and the linear                                                   
 representation of the [[file:///Applications/j64-806/addons/docs/help/dictionary/d420.htm][identity function]]                                           
 if y is 1 .                                                                       
 
 For example:
 
    ^ b. _1
 ^.
 
    ^ b. 0
 0 0 0
 
    ^ b. 1
 $&1@(}.@$)
 
    g=: +&2@(*&3@*:)
    ]y=: g 5
 77
 
    g ^:_1 y
 5
 
    g b. _1
 %:@(%&3)@(-&2)
 
    %:@(%&3)@(-&2) y
 5
 
    g b. 0
 0 0 0
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
M.
#+end_src
**** Name (monadic • dyadic)
Memo • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dmcapdot.htm
#+begin_example
 
 Memo                                    u M.  mu lu ru                            
 
 u M. is the same as u but may keep a record of the arguments and results for      
 reuse. It is commonly used for multiply-recursive verbs.                          
 
 The following examples illustrate the difference that memoization can make. fib n
 is the n-th Fibonacci number. pn finds the number of partitions of an integer
 using a recurrence relation due to Euler, equation 11 in 
 [[http://mathworld.wolfram.com/PartitionFunctionP.html][http://mathworld.wolfram.com/PartitionFunctionP.html]] .
 
 fib=: 3 : 0 M.
  if. 1>:y do. y else. (fib y-1)+fib y-2 end.
 )
 
 fibx=: 3 : 0
  if. 1>:y do. y else. (fibx y-1)+fibx y-2 end.
 )
 
    timer=: 6!:2
 
    timer 'fib 32'
 0.000479377
    timer 'fibx 32'
 43.696
 
    fib"0 i.18
 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597
 
 pn =: -/@(+/)@:($:"0)@rec ` (x:@(0&=)) @. (0>:]) M.
 pnx=: -/@(+/)@:($:"0)@rec ` (x:@(0&=)) @. (0>:])
 rec=: - (-: (*"1) _1 1 +/ 3 * ]) @ (>:@i.@>.@%:@((2%3)&*))
 
    timer 'pn 28'
 0.000675355
    timer 'pnx 28'
 61.7146
 
    pn"0 i.18
 1 1 2 3 5 7 11 15 22 30 42 56 77 101 135 176 231 297
    pn 1000
 24061467864032622473692149727991
 
 Subsequent applications of a memoized verb to a previously evaluated argument
 produce the result quickly:
 
    timer 'fib 32'
 2.62393e_5
    timer 'pn 28'
 4.01456e_5
 
 M. is applicable to anonymous verbs and to verbs with non-atomic results. Thus:
 
    timer '+/@:($:"0)@:(-&1 2)`]@.(1>:]) M. 32'
 0.000186387
    timer '+/@:($:"0)@:(-&1 2)`]@.(1>:])    32'
 8.61349
 
 comb=: 4 : 0 M.   NB. All size x combinations of i.y
  if. (x>:y)+.0=x do. i.(x<:y),x else. (0,.x comb&.<: y),1+x comb y-1 end.
 )
 
    3 comb 5
 0 1 2
 0 1 3
 0 1 4
 0 2 3
 0 2 4
 0 3 4
 1 2 3
 1 2 4
 1 3 4
 2 3 4
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
t.
#+end_src
**** Name (monadic • dyadic)
Taylor Coeff. • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dtdotu.htm
#+begin_example
 
 Taylor Coefficient                           u t.  0 0 0                          
 
 u t. y is the yth coefficient in the       x u t.y is the product of (x^y) and u  
 Taylor series approximation to the         t. y .                                 
 function u . The domain of the adverb                                             
 t. is the same as the left domain of                                              
 the derivative D. . See the case m t. .                                           
 
 For example:
 
    f=: 1 2 1&p. 
    g=: 1 3 3 1&p. 
    x=: 10%~i=: i.8
    ]c=: (f*g) t. i
 1 5 10 10 5 1 0 0
 
    6j2 ":(c p. x),:(f*g) x
   1.00  1.61  2.49  3.71  5.38  7.59 10.49 14.20
   1.00  1.61  2.49  3.71  5.38  7.59 10.49 14.20
 
    (c p. x)=(f*g) x
 1 1 1 1 1 1 1 1
             
    ]d=: f@g t. i 
 4 12 21 22 15 6 1 0
 
    (d p. x)=(f g x)
 1 1 1 1 1 1 1 1
 
    sin=: 1&o. 
    cos=: 2&o.
    8j4":t=: (^ t. i),(sin t. i),:(cos t. i)
   1.0000  1.0000  0.5000  0.1667  0.0417  0.0083  0.0014  0.0002
   0.0000  1.0000  0.0000 _0.1667  0.0000  0.0083  0.0000 _0.0002
   1.0000  0.0000 _0.5000  0.0000  0.0417  0.0000 _0.0014  0.0000
 
    * t
 1 1  1  1 1 1  1  1
 0 1  0 _1 0 1  0 _1
 1 0 _1  0 1 0 _1  0
 
    ((sin*sin)+(cos*cos)) t. i
 1 0 0 0 _2.71051e_20 0 0 0
 
    rf=: n%d 
    n=: 0 1&p. 
    d=: 1 _1 _1&p.
    ]fibonacci=: rf t. i. 20
 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
 
    2 +/\ fibonacci
 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765
 
    (% -. - *:) t. i.20
 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
 
#+end_example
*** Adverb               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
t:
#+end_src
**** Name (monadic • dyadic)
Weighted Taylor • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dtco.htm
#+begin_example
 
 Weighted Taylor                              u t:  0 0 0                          
 
 The result of u t: k is (!k)*u t. k . In other words, the coefficients produced by
 t: are the Taylor coefficients weighted by the factorial. As a consequence, the   
 coefficients produced by it when applied to functions of the exponential family   
 show simple patterns. For this reason it is sometimes called the exponential      
 generating function.                                                              
 
 For example:
 
    k=: i. 12
    ^ t: k
 1 1 1 1 1 1 1 1 1 1 1 1
 
    %@^t: k                    NB. Decaying exponential
 1 _1 1 _1 1 _1 1 _1 1 _1 1 _1
 
    sin =: 1&o.
    cos =: 2&o.
    sinh=: 5&o.
    cosh=: 6&o.
    exp=: ^
    dec=: %@^
 
    (exp t:,dec t:,sinh t:,cosh t:,sin t:,:cos t:) k
 1  1  1  1 1  1  1  1 1  1  1  1
 1 _1  1 _1 1 _1  1 _1 1 _1  1 _1
 0  1  0  1 0  1  0  1 0  1  0  1
 1  0  1  0 1  0  1  0 1  0  1  0
 0  1  0 _1 0  1  0 _1 0  1  0 _1
 1  0 _1  0 1  0 _1  0 1  0 _1  0
 
#+end_example
** Conjunctions
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
^:
#+end_src
**** Name (monadic • dyadic)
Power • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d202n.htm
#+begin_example
 
 Power                               u^:n  _ _ _                                   
 
 n may be integer, boxed, or a gerund.      n may be integer, boxed, or a gerund.  
                                                                                   
 Integer. The verb u is applied n times.    Integer or Boxed. x u^:n y ↔ x&u^:n y  
 An infinite power n produces the limit                                            
 of the application of u . For example,     Gerund. (Compare with the gerund cases 
 (2&o.^:_)1 is 0.73908 , the solution of    of the [[file:///Applications/j64-806/addons/docs/help/dictionary/d530n.htm][merge adverb }]])                 
 the equation y=Cos y . If n is             x u^:(v0`v1`v2)y ↔ (x v0 y)u^:(x v1 y) 
 negative, the obverse u^:_1 (see below)    (x v2 y)                               
 is applied |n times. Finally, u^:n y       x u^:(   v1`v2)y ↔ x u^:([`v1`v2) y    
 for an array n is produced by                u^:(   v1`v2)y ↔ u^:(v1 y) (v2 y)    
 assembling u^:a y (for all the atoms a                                            
 in n) into an overall result.                                                     
                                                                                   
 The obverse is used in [[file:///Applications/j64-806/addons/docs/help/dictionary/d631.htm][u&.v]] and is                                                
 produced by [[file:///Applications/j64-806/addons/docs/help/dictionary/dbdotu.htm][v b. _1]] . Repeated                                                    
 application of a verb is also provided                                            
 by [[file:///Applications/j64-806/addons/docs/help/dictionary/d630n.htm][Bond (&)]].                                                                      
                                                                                   
 Boxed. If n is boxed it must be an                                                
 atom, and u^:(<m)                                                                 
                                                                                   
  ↔ u^:(i.m) y        if m is a                                                    
                      non-negative                                                 
                      integer                                                      
  ↔ u^:(i.k) y        if m is _ or '' ,                                            
                      where k is the                                               
                      smallest positive                                            
                      integer such that                                            
                      (u^:(k-1) y) -: u                                            
                      ^:k y                                                        
  ↔ u^:_1^:(<|m) y    if m is negative                                             
                                                                                   
 Gerund. See on the right.                                                         
 
 The obverse (which is normally the inverse) is specified for six cases:
 
 1.   The self-inverse functions + - -. % %. |. |: /: [ ] C. p.                    
                                                                                   
 2.   The pairs in the following tables:                                           
                                                                                   
        <    >                !      3 : '(-(!-y"_)%1e_3&* !"0 D:1 ])^:_^.y'       
        <:   >:               3!:1   3!:2                                          
        +.   j./"1"_          3!:3   3!:2                                          
        +:   -:               \:     /:@|.                                         
        *.   r./"1"_          ".     ":                                            
        *:   %:               j.     %&0j1                                         
        ^    ^.               o.     %&1p1                                         
        $.   $.^:_1           p:     π(n)                                          
        ,:   {.               q:     */                                            
        ;:   ;@(,&' '&.>"1)   r.     %&0j1@^.                                      
        #.   #:               s:     5&s:                                          
                              u:     3&u:                                          
                              x:     _1&x:                                         
                                                                                   
        +~    -:                                                                   
        *~    %:                                                                   
        ^~    3 : '(- -&b@(*^.) % >:@^.)^:_ b=.^.y'"0                              
        ,~    <.@-:@# {. ]                                                         
        ,:~   {.                                                                   
        ;~    >@{.                                                                 
        j.~   %&1j1                                                                
 
 3.   Obviously invertible bonded dyads such as -&3 and 10&^. and 1 0 2&|: and 3&|.
      and 1&o. and a.&i. as well as u@v and u&v if u and v are invertible.         
                                                                                   
 4.   Monads of the form v/\ and v/\. where v is one of + * - % = ~:               
                                                                                   
 5.   Obverses specified by the conjunction :.                                     
                                                                                   
 6.   The following cases merit special mention:                                   
      p:^:_1 n gives the number of primes less than n, denoted by π(n) in math     
      q:^:_1 is */                                                                 
      b&#^:_1 where b is a boolean list is Expand (whose fill atom f can be        
      specified by fit, b&#^:_1!.f or #^:_1!.f )                                   
      a&#.^:_1 produces the base-a representation                                  
      !^:_1 and !&n^:_1 and n&!^:_1 produce the appropriate results                
      {= and i."1&1 are inverses of each other; these convert between integer      
      permutation vectors and boolean permutation matrices                         
 
 Example 1:
 
    (] ; +/\ ; +/\^:2 ; +/\^:0 1 2 3 _1 _2 _3 _4) 1 2 3 4 5
 +---------+-----------+------------+-------------+
 |1 2 3 4 5|1 3 6 10 15|1 4 10 20 35|1  2  3  4  5|
 |         |           |            |1  3  6 10 15|
 |         |           |            |1  4 10 20 35|
 |         |           |            |1  5 15 35 70|
 |         |           |            |1  1  1  1  1|
 |         |           |            |1  0  0  0  0|
 |         |           |            |1 _1  0  0  0|
 |         |           |            |1 _2  1  0  0|
 +---------+-----------+------------+-------------+
 
 Example 2: Fibonacci Sequence
 
    +/\@|.^:(i.10) 0 1
  0  1
  1  1
  1  2
  2  3
  3  5
  5  8
  8 13
 13 21
 21 34
 34 55
    {. +/\@|.^:n 0 1x [ n=:128       NB. n-th term of the Fibonacci sequence
 251728825683549488150424261
    {.{: +/ .*~^:k 0 1,:1 1x [ k=:7  NB. (2^k)-th term of the Fibonacci sequence
 251728825683549488150424261
 
 Example 3: Newton Iteration
 
    -:@(+2&%)^:(0 1 2 3) 1
 1 1.5 1.41667 1.41422
    -:@(+2&%)^:(_) 1
 1.41421
    -:@(+2&%)^:a: 1
 1 1.5 1.41667 1.41422 1.41421 1.41421
    %: 2
 1.41421
 
 Example 4: Subgroup Generated by a Set of Permutations
 
    sg=: ~. @ (,/) @ ({"1/~) ^: _ @ (i.@{:@$ , ])
    sg ,: 1 2 3 0 4
 0 1 2 3 4
 1 2 3 0 4
 2 3 0 1 4
 3 0 1 2 4
    # sg 1 2 3 4 5 0 ,: 1 0 2 3 4 5
 720
 
 Example 5: Transitive Closure
 
    x=: (#x)<. (#x),~x=: (i.20)+1+20 ?.@# 3
    (i.#x) ,: x
 0 1 2 3 4 5 6 7  8  9 10 11 12 13 14 15 16 17 18 19 20
 1 4 5 5 7 6 9 9 10 12 11 14 14 15 16 18 18 18 20 20 20
    {&x^:(<15) 0
 0 1 4 7 9 12 14 16 18 20 20 20 20 20 20
    {&x^:a: 0
 0 1 4 7 9 12 14 16 18 20
    x {~^:a: 0
 0 1 4 7 9 12 14 16 18 20
 
 Interpretation: x specifies a directed graph with nodes numbered i.#x and links
 from i to i{x . For example, the links are: 0 1 , 1 4 , 2 5 , 3 5 and so on. Then
 {&x^:a:0 or x{~^:a:0 computes all the nodes reachable from node 0.
 
 Example 6: Transitive Closure
 
 Each record of a file begins with a byte indicating the record length (excluding
 the record length byte itself), followed by the record contents. Given a file, the
 verb rec below produces the list of boxed records.
 
 rec=: 3 : 0
  n=. #y
  d=. _1 ,~ n<.1+(i.n)+a.i.y
  m=. d {~^:a: 0
  ((i.n) e. m) <;._1 y
 )
 
 randomfile=: 3 : 0
  c  =. 1+y ?@$ 255           NB. record lengths
  rec=. {&a.&.> c ?@$&.> 256  NB. record contents
  (c{a.),&.> rec              NB. records with lengths
 )
 
    boxed_rec=: randomfile 1000
    $ boxed_rec
 1000
 
    file=: ; boxed_rec
    $ file
 132045
 
    r=: rec file
    $r
 1000
 
    r -: }.&.> boxed_rec
 1
 
 The last phrase verifies that the result of rec are the records without the
 leading length bytes.
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
.;
#+end_src
**** Name (monadic • dyadic)
Determinant • Dot Product
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d300.htm
#+begin_example
 
 Determinant                       u . v  2 _ _                         Dot Product
 
 The phrases -/ . * and +/ . * are the      For vectors and matrices, the phrase x 
 determinant and permanent of square        +/ . * y is equivalent to the dot,     
 matrix arguments. More generally, the      inner, or matrix product of math; other
 phrase u . v is defined in terms of a      rank-0 verbs such as <. and *. are     
 recursive expansion by minors along the    treated analogously. In general, u . v 
 first column, as discussed below.          is defined by u@(v"(1+lv,_)) , restated
                                            in English below.                      
 
 For example:
 
    x=: 1 2 3 [ m=: >1 6 4;4 1 0;6 6 8
    det=: -/ . * 
    mp=: +/ . *
    x ([ ; ] ; det@] ; mp ; mp~ ; mp~@]) m
 +-----+-----+----+--------+-------+--------+
 |1 2 3|1 6 4|_112|27 26 28|25 6 42|49 36 36|
 |     |4 1 0|    |        |       | 8 25 16|
 |     |6 6 8|    |        |       |78 90 88|
 +-----+-----+----+--------+-------+--------+
 
 The monad u . v is defined as illustrated below:
 
    DET=: 2 : 'v/@,`({."1 u . v $:@minors)@.(0<{:@$) @ ,. "2'
      minors=: }."1 @ (1&([\.))
 
    -/ DET * m
 _112
 
    -/ DET * 1 16 64
 49
 
    -/ DET * i.3 0
 1
 
    +/ DET * m
 320
 
 The definition u@(v"(1+lv,_)) given above for the dyadic case may be re-stated in
 words as follows: u is applied to the result of v on lists of “left argument
 cells” and the right argument in toto. The number of items in a list of left
 argument cells must agree with the number in the right argument. Thus, if v has
 ranks 2 3 and the shapes of x and y are 2 3 4 5 6 and 4 7 8 9 10 11, then there
 are 2 3 lists of left argument cells (each shaped 4 5 6); and if the shape of a
 result cell is sr, the overall shape is 2 3,sr .
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
..
#+end_src
**** Name (monadic • dyadic)
Even • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d301.htm
#+begin_example
 
 Even , Odd                                   u .. v  u .: v                       
 
 u .. v  ↔  (u + u&v) % 2:                                                         
 u .: v  ↔  (u - u&v) % 2:                                                         
 
 In the most commonly used case, v is arithmetic negation, and f=: u .. v is
 therefore f=: (u + u&-) % 2: ; that is, one-half the sum of u y and u -y . The
 resulting function is therefore even in the sense that f y ↔ f -y for any y ; its
 graph is reflected in the vertical axis. Similarly, u .: - is odd (f y ↔ -f-y),
 and its graph is reflected in the origin. Less commonly, v is matrix transpose
 (|:), and may be any monadic function.
 
    y=: _2 _1 0 1 2
    1 2 3 4 5 & p. y            NB. Polynomial with odd and even terms
 57 3 1 15 129
  
    1 2 3 4 5 & p. .. - y       NB. Even part of polynomial
 93 9 1 9 93
    
    1 0 3 0 5 & p. y            NB. Polynomial with even terms only
 93 9 1 9 93
 
    E=: .. -                    NB. Even adverb
    O=: .: -                    NB. Odd adverb
    d=: 5j2&":@,.&.>            NB. Display as columns with two digits
 
    d (5&o. ; ^O ; 6&o. ; ^E ; ^ ; (^E + ^O) ; 2&o. ; ^@j.E) y
 +-----+-----+-----+-----+-----+-----+-----+-----+
 |_3.63|_3.63| 3.76| 3.76| 0.14| 0.14|_0.42|_0.42|
 |_1.18|_1.18| 1.54| 1.54| 0.37| 0.37| 0.54| 0.54|
 | 0.00| 0.00| 1.00| 1.00| 1.00| 1.00| 1.00| 1.00|
 | 1.18| 1.18| 1.54| 1.54| 2.72| 2.72| 0.54| 0.54|
 | 3.63| 3.63| 3.76| 3.76| 7.39| 7.39|_0.42|_0.42|
 +-----+-----+-----+-----+-----+-----+-----+-----+
 
    m=: ?. 4 4 $ 9
    (] ; (] .. |:) ; (] .: |:)) m
 +-------+-----------+-------------+
 |3 8 8 4|  3 5 6 2.5|   0  3 2 1.5|
 |2 0 2 7|  5 0 2   4|  _3  0 0   3|
 |4 2 3 5|  6 2 3   6|  _2  0 0  _1|
 |1 1 7 2|2.5 4 6   2|_1.5 _3 1   0|
 +-------+-----------+-------------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
.:
#+end_src
**** Name (monadic • dyadic)
Odd • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d301.htm
#+begin_example
 
 Even , Odd                                   u .. v  u .: v                       
 
 u .. v  ↔  (u + u&v) % 2:                                                         
 u .: v  ↔  (u - u&v) % 2:                                                         
 
 In the most commonly used case, v is arithmetic negation, and f=: u .. v is
 therefore f=: (u + u&-) % 2: ; that is, one-half the sum of u y and u -y . The
 resulting function is therefore even in the sense that f y ↔ f -y for any y ; its
 graph is reflected in the vertical axis. Similarly, u .: - is odd (f y ↔ -f-y),
 and its graph is reflected in the origin. Less commonly, v is matrix transpose
 (|:), and may be any monadic function.
 
    y=: _2 _1 0 1 2
    1 2 3 4 5 & p. y            NB. Polynomial with odd and even terms
 57 3 1 15 129
  
    1 2 3 4 5 & p. .. - y       NB. Even part of polynomial
 93 9 1 9 93
    
    1 0 3 0 5 & p. y            NB. Polynomial with even terms only
 93 9 1 9 93
 
    E=: .. -                    NB. Even adverb
    O=: .: -                    NB. Odd adverb
    d=: 5j2&":@,.&.>            NB. Display as columns with two digits
 
    d (5&o. ; ^O ; 6&o. ; ^E ; ^ ; (^E + ^O) ; 2&o. ; ^@j.E) y
 +-----+-----+-----+-----+-----+-----+-----+-----+
 |_3.63|_3.63| 3.76| 3.76| 0.14| 0.14|_0.42|_0.42|
 |_1.18|_1.18| 1.54| 1.54| 0.37| 0.37| 0.54| 0.54|
 | 0.00| 0.00| 1.00| 1.00| 1.00| 1.00| 1.00| 1.00|
 | 1.18| 1.18| 1.54| 1.54| 2.72| 2.72| 0.54| 0.54|
 | 3.63| 3.63| 3.76| 3.76| 7.39| 7.39|_0.42|_0.42|
 +-----+-----+-----+-----+-----+-----+-----+-----+
 
    m=: ?. 4 4 $ 9
    (] ; (] .. |:) ; (] .: |:)) m
 +-------+-----------+-------------+
 |3 8 8 4|  3 5 6 2.5|   0  3 2 1.5|
 |2 0 2 7|  5 0 2   4|  _3  0 0   3|
 |4 2 3 5|  6 2 3   6|  _2  0 0  _1|
 |1 1 7 2|2.5 4 6   2|_1.5 _3 1   0|
 +-------+-----------+-------------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
:
#+end_src
**** Name (monadic • dyadic)
Explicit • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d310n.htm
#+begin_example
 
 Explicit Definition                        m : n  _ _ _                           
 
 m is an integer producing the following cases:
 
    0 : n     noun                                                 
    1 : n     adverb                                               
    2 : n     conjunction                                          
    3 : n     verb                                                 
    4 : n     dyad-only verb                                       
   13 : n     tacit verb if possible, otherwise equivalent to 3 : n
 
 n is usually 0, indicating a script ([[file:///Applications/j64-806/addons/docs/help/dictionary/dicth.htm][Section II H]]) taken from the keyboard, or a
 script represented as a literal list s , a boxed list b=: <._2 s , or a literal
 table t=: ];._2 s . Thus:
 
 f=: 3 : 0
 a=: 2+b=. y ^ 2
 a+a*b
 :
 x*x+y
 )
 
    a=: b=: 19
    f 3
 110
 
    a,b           NB. Only the globally assigned name is changed.
 11 19
 
 As illustrated by the foregoing:
 
 1. The definitions of the monadic and dyadic cases produced by 3 : 0 are separated
    by a colon on a line by itself; if none occurs, the domain of the dyadic case  
    is empty.                                                                      
 2. The explicit result is the result of the last non-test block sentence executed;
    that result must be a noun in the 3 : and 4 : cases. See [[file:///Applications/j64-806/addons/docs/help/dictionary/ctrl.htm][Control Structures]] for
    the definition of a block.                                                     
 3. A name assigned by the copula =. is made local; values assigned to it have no  
    effect on the use of the same name without the entity defined or within other  
    entities invoked by it. A name assigned by =: is global, except that global    
    assignment to a local name is not permitted. Locative assignment (using either 
    =: or =.) is always global.                                                    
 4. The arguments to a definition are initialized by =. . The effects for a dyadic 
    verb are as follows:                                                           
      f=: 4 : 0                                                                    
       x=. (left   argument)                                                       
       y=. (right argument)                                                        
       (rest of verb)                                                              
      )                                                                            
 5. The names x and y denote the left and right arguments. In defining a           
    conjunction it may be necessary to refer to its left and right arguments (using
    u and v) as well as to the arguments of the resulting verb (x and y); likewise,
    an adverb may refer to its left argument (using u) as well as to the arguments 
    of the resulting verb (x and y). The use of m instead of u restricts the       
    corresponding argument to being a noun, as does the use of n instead of v . For
    example:                                                                       
 
    conj=: 2 : '(u y)+ (v y)'
    mc=: 2 : 0
 (u y)+(v y)
 )
 
    dc=: 2 : 0                 Dyadic case
 :
 (u y)+(v x)
 )
 
    (!conj% 2 4 5);(!mc% 2 4 5);(1 2 3 !dc% 2 4 5)
 +---------------+---------------+--------------+
 |2.5 24.25 120.2|2.5 24.25 120.2|3 24.5 120.333|
 +---------------+---------------+--------------+
 
 Control Structures. The sequence of execution of an explicit definition may be
 determined by control words such as if. do. else. end. and while. . For example, a
 function to find the root of a function f from a two-element list that brackets
 the root may be written and executed as follows:
 
    root=: 3 : 'm=.+/%#while.~:/y do.if.~:/*f b=.(m,{.)y do.y=.b else.y=.(m,{:)y end.end.m y'
 
    f=: 2 - *:
    b=: 1 10
    root b
 1.41421
 
 Such a definition may also be written on multiple lines and made more readable as
 follows:
 
 root=: 3 : 0
  m=. +/ % #
  while. ~:/y do. 
   if. ~:/*f b=. (m,{.) y do. 
    y=. b 
   else. 
    y=. (m,{:) y
   end.
  end. 
  m y
 )
 
 As illustrated by the foregoing, the word if. and a matching end. mark the
 beginning and end of a control structure, as do while. and a matching end.; such
 structures may be nested as is the if. structure within the while. structure. The
 words do. and else. break the if. structure into three simple blocks, each
 comprising a sentence, whereas the do. in the while. structure breaks it into two
 blocks, the first being a simple sentence, and the second being itself an if.
 control structure. Therefore, control words provide a form of punctuation.
 
 Additional explanations and examples can be found in the [[file:///Applications/j64-806/addons/docs/help/dictionary/ctrl.htm][Control Structures]]
 section.
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
:.
#+end_src
**** Name (monadic • dyadic)
Obverse • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d311.htm
#+begin_example
 
 Obverse                                u :. v  mu lu ru                           
 
 The result of u :. v is the verb u, but with an assigned obverse v (used as the   
 “inverse” under the conjunctions &. and ^:).                                      
 
 For example:
 
    y=: _4 0 4 3j4
    rp=: <@(%: , -@%:)"0        NB. Root pairs
    rp y
 +--------+---+----+---------+
 |0j2 0j_2|0 0|2 _2|2j1 _2j_1|
 +--------+---+----+---------+
 
    I=: ^: _1
    rp I                        NB. No assigned obverse
 rp^:_1
 
    rp I rp y
 |domain error
 |     rp I rp y
 
    inv=: *:@{.@,@>
    inv rp y
 _4 0 4 3j4
 
    RP=: rp :. inv              NB. Assigned obverse in RP
    RP I RP y
 _4 0 4 3j4
 
    rc=: <@(,: +)@(, -)@%:"0    NB. Root companions
    rc y
 +---------+---+----+----------+
 | 0j2 0j_2|0 0|2 _2| 2j1 _2j_1|
 |0j_2  0j2|0 0|2 _2|2j_1  _2j1|
 +---------+---+----+----------+
 
    RC=: rc :. inv
    RC I RC y
 _4 0 4 3j4
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
::
#+end_src
**** Name (monadic • dyadic)
Adverse • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d312.htm
#+begin_example
 
 Adverse                                    u :: v  _ _ _                          
 
 The result of u :: v is that of u, provided that u completes without error;       
 otherwise the result is the result of v .                                         
 
 For example:
 
    p=: 3 1 0 2                 A permutation vector
    x=: 'ABCD'
    p{x
 DBAC
 
    ]i=: A. p                   Atomic index in ordered list of permutations
 20
 
    i A. x                      Permutation by atomic representation
 DBAC
 
    q=: 3 1 1 0                 Not a permutation
    q{x
 DBBA
           
    A. q
 |index error
 |       A.q
 
    A=: A. :: (!@#)             Give index outside range in case of error
    A p
 20
         
    A q
 24
 
    24 A. x
 |index error
 |   24   A.x
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
;.
#+end_src
**** Name (monadic • dyadic)
Cut • "
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d331.htm
#+begin_example
 
 Cut                            m;.n  u;.n  _ 1/2 _                             Cut
 
 u;.0 y applies u to y after reversing y    x u;.0 y applies u to a rectangle or   
 along each axis; it is equivalent to (0    cuboid of y with one vertex at the     
 _1 */$y) u;.0 y .                          point in y indexed by v=:0{x , and with
                                            the opposite vertex determined as      
 The fret 0{y (the leading item of y)       follows: the dimension is |1{x , but   
 marks the start of an interval of items    the rectangle extends back from v along
 of y ; the phrase u;.1 y applies u to      any axis j for which the index j{v is  
 each such interval. The phrase u;._1 y     negative. Finally, the order of the    
 differs only in that frets are excluded    selected items is reversed along each  
 from the result. In u;.2 and u;._2 the     axis k for which k{1{x is negative. If 
 fret is the last item, and marks the       x is a vector, it is treated as the    
 ends of intervals.                         matrix 0,:x .                          
                                                                                   
 The monads u;.3 and u;._3 apply u to       The frets in the dyadic cases 1 , _1 , 
 tesselation by “maximal cubes”, that       2 , and _2 are determined by the 1s in 
 is, they are defined by their dyadic       boolean vector x ; an empty vector x   
 cases using the left argument ($$y)$<./    and non-zero #y indicates the entire of
 $y .                                       y . If x is the atom 0 or 1 it is      
                                            treated as (#y)#x . In general, boolean
 m;.n y applies successive verbs from       vector >j{x specifies how axis j is to 
 the gerund m to the cuts of y ,            be cut, with an atom treated as (j{$y) 
 extending m cyclically as required.        #>j{x .                                
                                                                                   
                                            u;.3 and u;._3 yield (possibly         
                                            overlapping) tesselations. x u;._3 y   
                                            applies u to each complete rectangle of
                                            size |1{x beginning at integer         
                                            multiples of (each item of) the        
                                            movement vector 0{x , with an infinite 
                                            size being replaced by the signed      
                                            length of the corresponding axis. As in
                                            u;.0 , reversal occurs along each axis 
                                            for which the size 1{x is negative. The
                                            case of a list x is equivalent to 1,:x 
                                            , and therefore provides a complete    
                                            tesselation of size x . The case u;.3  
                                            differs in that shards of length less  
                                            than |1{x are included.                
                                                                                   
                                            x m;.n y applies successive verbs from 
                                            the gerund m to the cuts of y ,        
                                            extending m cyclically as required.    
                                                                                   
                                            The 0- and 3-cuts have a left rank of  
                                            2; the 1- and 2-cuts have a left rank  
                                            of 1.                                  
 
    y=: 'worlds on worlds '
    (<;.2 y) ; ($;._2 y) ; (3 5$i.10) ; (+/ ;.1 (3 5$i.10))
 +---------------------+-+---------+-----------+
 |+-------+---+-------+|6|0 1 2 3 4|5 7 9 11 13|
 ||worlds |on |worlds ||2|5 6 7 8 9|0 1 2  3  4|
 |+-------+---+-------+|6|0 1 2 3 4|           |
 +---------------------+-+---------+-----------+
 
    1 0 1 0 0 <;.1 i.5 7
 +--------------------+
 |0 1 2  3  4  5  6   |
 |7 8 9 10 11 12 13   |
 +--------------------+
 |14 15 16 17 18 19 20|
 |21 22 23 24 25 26 27|
 |28 29 30 31 32 33 34|
 +--------------------+
    ('';1 0 0 0 1 0 1) <;.1 i.5 7
 +-----------+-----+--+
 | 0  1  2  3| 4  5| 6|
 | 7  8  9 10|11 12|13|
 |14 15 16 17|18 19|20|
 |21 22 23 24|25 26|27|
 |28 29 30 31|32 33|34|
 +-----------+-----+--+
    ('';1) <;.1 i.5 7
 +--+--+--+--+--+--+--+
 | 0| 1| 2| 3| 4| 5| 6|
 | 7| 8| 9|10|11|12|13|
 |14|15|16|17|18|19|20|
 |21|22|23|24|25|26|27|
 |28|29|30|31|32|33|34|
 +--+--+--+--+--+--+--+
    (1 0 1 0 0;1 0 0 0 1 0 1) <;.1 i.5 7
 +-----------+-----+--+
 |0 1 2  3   | 4  5| 6|
 |7 8 9 10   |11 12|13|
 +-----------+-----+--+
 |14 15 16 17|18 19|20|
 |21 22 23 24|25 26|27|
 |28 29 30 31|32 33|34|
 +-----------+-----+--+
 
    x=:1 _2,:_2 3 [ z=: i. 5 5
    x ; (x ];.0 z) ; z
 +-----+--------+--------------+
 | 1 _2|11 12 13| 0  1  2  3  4|
 |_2  3| 6  7  8| 5  6  7  8  9|
 |     |        |10 11 12 13 14|
 |     |        |15 16 17 18 19|
 |     |        |20 21 22 23 24|
 +-----+--------+--------------+
 
    (y=: a. {~ (a. i. 'a') + i. 4 4);(a=: 1 1 ,: 2 2)
 +----+---+
 |abcd|1 1|
 |efgh|2 2|
 |ijkl|   |
 |mnop|   |
 +----+---+
 
    (<;.3 y) ; ((($$y)$<./$y)<;.3 y) ; (a <;.3 y) ; <(a <;._3 y)
 +---------------+---------------+------------+----------+
 |+----+---+--+-+|+----+---+--+-+|+--+--+--+-+|+--+--+--+|
 ||abcd|bcd|cd|d|||abcd|bcd|cd|d|||ab|bc|cd|d|||ab|bc|cd||
 ||efgh|fgh|gh|h|||efgh|fgh|gh|h|||ef|fg|gh|h|||ef|fg|gh||
 ||ijkl|jkl|kl|l|||ijkl|jkl|kl|l||+--+--+--+-+|+--+--+--+|
 ||mnop|nop|op|p|||mnop|nop|op|p|||ef|fg|gh|h|||ef|fg|gh||
 |+----+---+--+-+|+----+---+--+-+||ij|jk|kl|l|||ij|jk|kl||
 ||efgh|fgh|gh|h|||efgh|fgh|gh|h||+--+--+--+-+|+--+--+--+|
 ||ijkl|jkl|kl|l|||ijkl|jkl|kl|l|||ij|jk|kl|l|||ij|jk|kl||
 ||mnop|nop|op|p|||mnop|nop|op|p|||mn|no|op|p|||mn|no|op||
 |+----+---+--+-+|+----+---+--+-+|+--+--+--+-+|+--+--+--+|
 ||ijkl|jkl|kl|l|||ijkl|jkl|kl|l|||mn|no|op|p||          |
 ||mnop|nop|op|p|||mnop|nop|op|p||+--+--+--+-+|          |
 |+----+---+--+-+|+----+---+--+-+|            |          |
 ||mnop|nop|op|p|||mnop|nop|op|p||            |          |
 |+----+---+--+-+|+----+---+--+-+|            |          |
 +---------------+---------------+------------+----------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
!.
#+end_src
**** Name (monadic • dyadic)
Fit (Customize) • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d411.htm
#+begin_example
 
 Fit (Customize)                         !.                                        
 
 This conjunction modifies certain verbs in ways prescribed in their definitions.  
 For example, =!.t is the relation of equality using tolerance t , and ^!.r is the 
 factorial function so defined that x ^!.r n is */x + r * i. n . Consequently,     
 ^!._1 is the falling factorial function.                                          
 
 Fit applies to the following verbs (to produce variants). The monadic case is
 shown before a bullet, and the dyadic case after it:
 
 < <: > >: +. *. -. -: | E. i. i:   •Tolerance                                   
 <. >. * ~.                         Tolerance •                                  
 #:                                 •Tolerance                                   
 = ~: #: e.                         Tolerance •Tolerance                         
 ^ p.                               •Stope function and polynomial based thereon 
 $ |. , ,. ,: # {.                  •Fill                                        
 ":                                 Print precision •                            
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
!:
#+end_src
**** Name (monadic • dyadic)
Foreign • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d412.htm
#+begin_example
 
 Foreign                                 !:                                        
 
 This conjunction is used to communicate with the host system as well as with the  
 keyboard (as an input file) and with the screen (as an output file). It is also   
 used to provide a variety of extra-lingual facilities, such as setting the form of
 function display, determining the class of a name (noun, verb, adverb, or         
 conjunction), and listing all existing names in specified classes.                
                                                                                   
 [[file:///Applications/j64-806/addons/docs/help/dictionary/xmain.htm][Appendix A]] shows all uses of the foreign conjunction.                             
 
    (mean=: +/ % #) a=: 2 3 5 7 11 13
 6.83333
 
    mean
 +/ % #
 
    9!:3 (4)
    mean
   +- / --- +                   Tree display of verb
 --+- %
   +- # 
 
    9!:3 (2 4 5)
    mean
 +-----+-+-+                    Boxed display
 |+-+-+|%|#|
 ||+|/|| | |
 |+-+-+| | |
 +-----+-+-+
   +- / --- +                   Tree display
 --+- % 
   +- #
 +/ % #                         Linear display
 
    4!:0 'a';'mean'             Classes of names (noun 0, verb 3)
 0 3
 
    4!:1 (3)                    List of names in class 3
 +----+
 |mean|
 +----+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
"
#+end_src
**** Name (monadic • dyadic)
Rank • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d600n.htm
#+begin_example
 
 Rank                                    m"n                                       
 
 The verb m"n produces the constant result m for each cell to which it applies. The
 rank used is 3 $&.|. n . For example, if n=:2, the three ranks are 2 2 2, and if n
 =: 2 3, they are 3 2 3 . A negative rank is complementary: m"(-r) y is equivalent 
 to m"(0>.(#$y)-r)"_ y .                                                           
 
 Thus:
 
    v=: 2 3 5 7
    m=: i. 2 3
    m ; (m"0 v) ; (m"1 v); (m"1 m)
 +-----+-----+-----+-----+
 |0 1 2|0 1 2|0 1 2|0 1 2|
 |3 4 5|3 4 5|3 4 5|3 4 5|
 |     |     |     |     |
 |     |0 1 2|     |0 1 2|
 |     |3 4 5|     |3 4 5|
 |     |     |     |     |
 |     |0 1 2|     |     |
 |     |3 4 5|     |     |
 |     |     |     |     |
 |     |0 1 2|     |     |
 |     |3 4 5|     |     |
 +-----+-----+-----+-----+
 
    v m" 1 2 m
 0 1 2
 3 4 5
 
 The verbs _9: through 9: are [[file:///Applications/j64-806/addons/docs/help/dictionary/dconsf.htm][constant verbs]], equivalent to _9"_ through 9"_ . For
 example:
 
    odds=: 1: + 2: * i.
    odds 5
 1 3 5 7 9
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
`
#+end_src
**** Name (monadic • dyadic)
Tie • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d610.htm
#+begin_example
 
 Tie                                     m`n  m`v  u`n  u`v                        
 
 In English, a gerund is a noun that carries the force of a verb, as does the noun 
 cooking in the art of cooking. The tie applies to two verbs to produce a gerund.  
 Gerunds are commonly used with [[file:///Applications/j64-806/addons/docs/help/dictionary/d420.htm][Insert (/)]] and with [[file:///Applications/j64-806/addons/docs/help/dictionary/d621.htm][Agenda (@.)]]:                   
 
    ]g=: +`*
 +-+-+
 |+|*|
 +-+-+
 
    (g/1 2 3 4 5) ; (1+2*3+4*5)
 +--+--+
 |47|47|
 +--+--+
 
 More generally, tie produces gerunds as follows: u`v is au,av , where au and av
 are the (boxed noun) atomic representations ([[file:///Applications/j64-806/addons/docs/help/dictionary/dx005.htm][5!:1]]) of u and v . Moreover, m`n is
 m,n and m`v is m,av and u`n is au,n . See [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#12][Bernecky and Hui {12}]]. Gerunds may also
 be produced directly by boxing. Thus:
 
    ]h=: '+' ; '*'
 +-+-+
 |+|*|
 +-+-+
 
    h/1 2 3 4 5
 47
 
 The atomic representation of a noun (used so as to distinguish a noun such as '+'
 from the verb +) is given by the following function:
 
    (ar=: [: < (,'0')"_ ; ]) '+'
 +-----+
 |+-+-+|
 ||0|+||
 |+-+-+|
 +-----+
 
    *`(ar '+')
 +-+-----+
 |*|+-+-+|
 | ||0|+||
 | |+-+-+|
 +-+-----+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
`:
#+end_src
**** Name (monadic • dyadic)
Evoke Gerund • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d612.htm
#+begin_example
 
 Evoke Gerund                        m`:n  _ _ _                                   
 
 This conjunction is defined for three cases:                                      
                                                                                   
 m `: 0   Append   Appends the results of the individual verbs.                    
 m `: 3   Insert   Inserts verbs between items. Equivalent to m/                   
 m `: 6   Train    Result is the train of individual verbs.                        
 
 For example:
 
    <+:`-:`% `: 0 a=: 1 2 3 4 5
 +-------------------------+
 |  2   4        6    8  10|
 |0.5   1      1.5    2 2.5|
 |  1 0.5 0.333333 0.25 0.2|
 +-------------------------+
 
    (+ b.0) ; (%. b.0) ; (+`%.`:0 b.0)
 +-----+-----+-----+
 |0 0 0|2 _ 2|_ _ _|
 +-----+-----+-----+
 
    (+`* `:3 a) ; (+`*/a) ; (1+2*3+4*5)
 +--+--+--+
 |47|47|47|
 +--+--+--+
 
    (+`*`- `: 6 a) ; ((+ * -) a)
 +----------------+----------------+
 |_1 _4 _9 _16 _25|_1 _4 _9 _16 _25|
 +----------------+----------------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
@:
#+end_src
**** Name (monadic • dyadic)
At • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d622.htm
#+begin_example
 
 At                                  u@:v  _ _ _                                   
 
 @: is equivalent to @ except that ranks are infinite.                             
 
 For example:
 
    x=: 1 2 3 4
    y=: 7 5 3 2
    x */ @: + y                 Applies product over sums to the entire lists
 2016
        
    x */ @ + y                  Applies product over sums to each item of the list
 8 7 6 6
      
    + b. 0
 0 0 0
 
    */ @: + b. 0
 _ _ _
 
    */ @ + b. 0
 0 0 0
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
@
#+end_src
**** Name (monadic • dyadic)
Atop • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d620.htm
#+begin_example
 
 Atop                                    u@v  mv lv rv                             
 
 u@v y ↔ u v y . For example, +:@- 7 is     x u@v y ↔ u x v y . For example, 3 +:@-
 _14 (double the negation). Moreover,       7 is _8 (double the difference).       
 the monadic uses of u@v and u&v are                                               
 equivalent.                                                                       
 
 Because adverbs and conjunctions are (as stated more precisely in [[file:///Applications/j64-806/addons/docs/help/dictionary/dicte.htm][Section II E]])
 executed before verbs, phrases involving them are commonly used in trains without
 parentheses. For example:
 
    mean=: +/ % #
    mean 1 2 3 4
 2.5
 
    f=: +:@*: +/ -:@%:          NB. Addition table of doubled square and halved sqrt
    f 1 2 3 4
  2.5 2.70711 2.86603  3
  8.5 8.70711 8.86603  9
 18.5 18.7071  18.866 19
 32.5 32.7071  32.866 33
 
 Because a conjunction applies to the entity immediately to its right, expressions
 to the right of conjunctions commonly require parenthesization. For example:
 
    g=: *:@(+/)
    h=: *:@+/
    g 1 2 3 4
 100
    h 1 2 3 4
 6770404
 
    k=: *:@+
    k/ 1 2 3 4
 6770404
 
 Compare the behaviour of @ with that of @: . They differ only in the ranks of the
 verbs that they produce.
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
@.
#+end_src
**** Name (monadic • dyadic)
Agenda • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d621.htm
#+begin_example
 
 Agenda                               m@.n  m@.v  mv lv rv                         
 
 m@.n is a verb defined by the gerund m with an agenda specified by n ; that is,   
 the verb represented by the train selected from m by the indices n . If n is      
 boxed, the train is parenthesized accordingly. The case m@.v uses the result of   
 the verb v to perform the selection.                                              
 
 For example:
 
    dorh=: +: ` -: @. (]>9:)           Double or halve (Case statement)
    dorh " 0 primes=: 2 3 5 7 11 13 17 19
 4 6 10 14 5.5 6.5 8.5 9.5
 
    _:`%:`*: @. * "0 a=: 2 1 0 _1 _2
 1.41421 1 _ 1 4
 
    g=: +`-`* 
    x=: 1 2 3 [ y=: 6 5 4
    (x g@.2: y)
 6 10 12
          
    (] * <:) y=: 5 4 3 2 1 0           Basis of factorial
 20 12 6 2 0 0
                     
    1:`(] * <:) @. (1: < ]) "0 y       Case statement
 20 12 6 2 1 1
       
    1:`(] * $:@<:)@.(1: < ])"0 y       [[file:///Applications/j64-806/addons/docs/help/dictionary/d212.htm][Self-reference]] for recursion
 120 24 6 2 1 1
 
    +`-`*`% @. (1 0 3;2 0)
 (- + %) (* +)
 
    3 +`-`*`% @. (1 0 3;2 0) 4
 _12.8125
 
    perm=: i.@i.@_2: ` ([: ,/ (0: ,. $:&.<:) {"2 1 \:"1@=@i.) @. *
    perm 3
 0 1 2
 0 2 1
 1 0 2
 1 2 0
 2 0 1
 2 1 0
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
&
#+end_src
**** Name (monadic • dyadic)
Bond • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d630n.htm
#+begin_example
 
 Bond             m&v  u&n  _ 0 _                                                  
 
 m&v y is defined as m v y ; that is,       x m&v y ↔ m&v^:x y                     
 the left argument m is bonded with the     x u&n y ↔ u&n^:x y                     
 dyad v to produce a monadic function.                                             
 Similarly, u&n y is defined as y u n ;                                            
 in other words, as the dyad u provided                                            
 with the right argument n to produce a                                            
 monadic function.                                                                 
 
 For example:
 
    10&^. 2 3 10 100 200
 0.30103 0.477121 1 2 2.30103
 
    base10log=: 10&^.
    base10log 2 3 10 100 200
 0.30103 0.477121 1 2 2.30103
 
    sine=: 1&o.
    sine o. 0 0.25 0.5 1.5 2
 0 0.707107 1 _1 0
 
    ^&3 (1 2 3 4 5)
 1 8 27 64 125
 
    ^&2 3"0 (1 2 3 4 5)
  1   1
  4   8
  9  27
 16  64
 25 125
 
 Use of the bond conjunction is often called Currying in honor of Haskell Curry.
 
 The phrase x f@[&0 y is equivalent to f^:x y , apply the monad f x times to y .
 For example:
 
    fib=: (0 1,:1 1)&(+/ .*)@[&0 & 0 1
    fib i.10
  0  1
  1  1
  1  2
  2  3
  3  5
  5  8
  8 13
 13 21
 21 34
 34 55
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
&.
#+end_src
**** Name (monadic • dyadic)
Under • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d631.htm
#+begin_example
 
 Under                                   u&.v  mv mv mv                            
 
 The verb u &.v is equivalent to the composition [[file:///Applications/j64-806/addons/docs/help/dictionary/d630v.htm][u & v]] except that the verb obverse
 to v is applied to the result for each cell. That is (subject to the monadic rank 
 of v),                                                                            
                                                                                   
     u&.v y ↔ vi u v y                                                             
   x u&.v y ↔ vi (v x) u (v y)                                                     
                                                                                   
 where vi is the obverse of v . The obverse is normally the inverse, as discussed  
 more fully under the [[file:///Applications/j64-806/addons/docs/help/dictionary/d202n.htm][power conjunction ^:]] .                                       
 
    3 +&.^. 4                   Inverse of natural log is the exponential
 12
               
    (^.^:_1) (^.3)+(^.4)
 12
 
    (<b), <|. b=: 1 2 3 ; 2 3 5 7 ; 'abcde'
 +---------------------+---------------------+
 |+-----+-------+-----+|+-----+-------+-----+|
 ||1 2 3|2 3 5 7|abcde|||abcde|2 3 5 7|1 2 3||
 |+-----+-------+-----+|+-----+-------+-----+|
 +---------------------+---------------------+
 
    each=: &.>                  An adverb
    (<|. &. > b),(<|. each b)   Reversal under open
 +---------------------+---------------------+
 |+-----+-------+-----+|+-----+-------+-----+|
 ||3 2 1|7 5 3 2|edcba|||3 2 1|7 5 3 2|edcba||
 |+-----+-------+-----+|+-----+-------+-----+|
 +---------------------+---------------------+
 
 In mathematics, certain cases of under are called dual or, dual with respect to:
 
    f=: +. &. -.                Dual with respect to boolean negation
    f/~ d=: 0 1
 0 0
 0 1
 
    D=: &. -.                   The adverb dual with respect to negation
    (+.D/~d);(*./~d);(=D/~d);(~:/~d)
 +---+---+---+---+
 |0 0|0 0|0 1|0 1|
 |0 1|0 1|1 0|1 0|
 +---+---+---+---+
 
    DWL=: &.^.                  Dual with respect to natural logarithm
    DAN=: &. -                  Dual with respect to arithmetic negation
    (3 + DWL 4),(3*4),(3 <. DAN 4) , (3 >. 4)
 12 12 4 4
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
&.:
#+end_src
**** Name (monadic • dyadic)
Under • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d631c.htm
#+begin_example
 
 Under                                    u&.:v  _ _ _                             
 
 u &.: v ↔ u&.(v"_)                                                                
 
    +/&.:^. 2 3 4
 24
    +/&.^. 2 3 4
 2 3 4
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
&:
#+end_src
**** Name (monadic • dyadic)
Appose • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d632.htm
#+begin_example
 
 Appose                              u&:v  _ _ _                                   
 
 &: is equivalent to & except that the ranks of the resulting function are         
 infinite; the relation is similar to that between @: and @ .                      
 
 For example:
 
    a=: 'abcd' ; 'efgh'
    b=: 'ABCD' ; 'EFGH'
                 
    a
 +----+----+
 |abcd|efgh|
 +----+----+
 
    b
 +----+----+
 |ABCD|EFGH|
 +----+----+
 
    a ,&:> b
 abcd
 efgh
 ABCD
 EFGH
 
    a ,&> b
 abcdABCD
 efghEFGH
 
    > b. 0
 0 0 0
 
    , & > b. 0
 0 0 0
 
    , &: > b. 0
 _ _ _
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
d.
#+end_src
**** Name (monadic • dyadic)
Derivative • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dddot.htm
#+begin_example
 
 Derivative                           u d. n  0                                    
 
 u d. n is like u D. n except that u is                                            
 treated as a rank-0 function.                                                     
 
    *: d. 1
 +:
 
    *: d. 2
 2"0
 
    (1: + _3&* + *:) d. 1
 _3 2&p.
 
    (1: + _3&* + *:) d. 2
 2"0
 
    (1: + _3&* + *:) d. 3
 0"0
 
    ^. d. 1
 %
 
    (^. * *:) d. 1
 (% * *:) + ^. * +:
 
    (^. % *:) d. 1
 ((% * *:) - ^. * +:) % 0 0 0 0 1&p.
 
    (^. @ *:) d. 1
 +: * %@*:
 
    *: d. _1
 0 0 0 0.33333333333333331&p.
 
    % d. _1
 ^.
 
    *: d. 1 x=: _3 _2 _1 0 1 2 3
 _6 _4 _2 0 2 4 6
    +: x
 _6 _4 _2 0 2 4
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
D.
#+end_src
**** Name (monadic • dyadic)
Derivative • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/ddcapdot.htm
#+begin_example
 
 Derivative                          m D. n  u D. n  mu                            
 
 u D. n is the n-th derivative of u, and u`v D. n is u with an assigned n-th       
 derivative v . For example:                                                       
                                                                                   
    (cube D.1;cube D.2; (cube=: ^&3"0) D.3)y=: 2 3 4                               
 +--------+--------+-----+                                                         
 |12 27 48|12 18 24|6 6 6|                                                         
 +--------+--------+-----+                                                         
 
 The derivative applies to constant functions, polynomials, the exponential ^, the
 integral powers ^&n, and those assigned by u`v D. n . It also applies to functions
 derived from these by addition, subtraction, multiplication, and division (u+v,
 etc.); by the composition u@v; and by the inverse u^:_1 . Since functions such as
 j. and - (negation) and %: (square root) and 1&o. (sin) and 6&o. (cosh) may all be
 so derived, they are also in the domain of the derivative. Others are treated by
 approximation. The derivative of an arbitrary function may also be treated by a
 polynomial approximation, (provided by the matrix divide), or by approximations
 using the secant slope D: .
 
 If the argument rank of u is a and the result rank is r, then the argument rank of
 u D.1 is also a, but its result rank is r+a : the result of u D.1 is the
 derivative of each atom of the result of u with respect to each element of its
 argument, giving what is commonly referred to as the partial derivatives. For
 example:
 
    volume=: */"1 
    VOLUMES=: */\"1
    (volume;volume D.1;VOLUMES;VOLUMES D.1) y
 +--+------+------+------+
 |24|12 8 6|2 6 24|1 3 12|
 |  |      |      |0 2  8|
 |  |      |      |0 0  6|
 +--+------+------+------+
 
    determinant=: -/ . * 
    permanent=: +/ . * 
    (];(determinant D.1);(permanent D.1))m=:*:i.3 3
 +--------+--------------+--------------+
 | 0  1  4|_201  324 _135|2249 1476 1017|
 | 9 16 25| 132 _144   36| 260  144   36|
 |36 49 64| _39   36   _9|  89   36    9|
 +--------+--------------+--------------+
 
 The adverbs D=: 1 : 'u"0 D.1' and VD=: 1 : 'u"1 D.1' assign ranks to their
 arguments, then take the first derivative; they are convenient for use in scalar
 and vector calculus:
 
    sin=: 1&o. 
    x=: 0.5p1 _0.25p1
    (*/\ VD y);(sin x);(sin D x);(sin D D x)
 +------+-----------+----------+-----------+
 |1 3 12|1 _0.707107|0 0.707107|_1 0.707107|
 |0 2  8|           |          |           |
 |0 0  6|           |          |           |
 +------+-----------+----------+-----------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
D:
#+end_src
**** Name (monadic • dyadic)
Secant Slope • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/ddcapco.htm
#+begin_example
 
                             u D: n  mu mu                             Secant Slope
 
                                            x u D: 1 y is the secant slope of the  
                                            function u through the points y and y+x
                                            . The secant slope is generalized to   
                                            the case x u D. n y in the manner of   
                                            the derivative D. . The argument x may 
                                            be a list, giving several slopes.      
                                                                                   
                                            In the general case, each item of x has
                                            the shape {. $$"r y, where r is the    
                                            rank of u, therefore specifying the    
                                            increment in each possible direction.  
                                            An argument x of lower rank is extended
                                            in the usual manner. For example, x=:  
                                            1e_8 provides the same increment in    
                                            each direction and, because of the     
                                            small magnitude, yields an             
                                            approximation to the derivative.       
 
    log=: ^.
    y=: 2 3 4
    1 log D:1 y
 0.405465 0.287682 0.223144
 
    incr=: 1 0.1 0.01 1e_8
    incr log D:1/y
 0.405465 0.287682 0.223144
 0.487902 0.327898 0.246926
 0.498754 0.332779 0.249688
      0.5 0.333333     0.25
 
    log D.1 y
 0.5 0.333333 0.25
    %y
 0.5 0.333333 0.25
 
    f=: +/@:*:"1 
    g=: +/@:*:\"1
    (f y) ; (1 f D:1 y) ; (1 0.1 1e_8 f D:1 y)
 +--+-----+--------------+
 |29|5 7 9|  5  0.61 8e_8|
 |  |     | 50   6.1 8e_7|
 |  |     |5e8 6.1e7    8|
 +--+-----+--------------+
 
    (g y) ; (1 g D:1 y)
 +-------+-----+
 |4 13 29|5 0 0|
 |       |5 7 0|
 |       |5 7 9|
 +-------+-----+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
H.
#+end_src
**** Name (monadic • dyadic)
Hypergeometric • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dhcapdot.htm
#+begin_example
 
 Hypergeometric                          m H. n  0 0 0                             
 
 The conjunction H. applies to two numeric lists to produce a monad which is the   
 hypergeometric function defined in Section 15 of [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#13][Abramowitz and Stegun {13}]]; it is
 the limit of the dyadic case, whose left argument restricts the number of terms of
 the approximating series.                                                         
                                                                                   
 As discussed in [[file:///Applications/j64-806/addons/docs/help/dictionary/ref.htm#14][Iverson {14}]], the conjunction is defined as follows:              
                                                                                   
    rf=: 1 : '(,m) ^!.1/ i.@['          NB. Rising factorial                       
    L1=: 2 : 'm rf %&(*/) n rf'                                                    
    L2=: (i.@[ ^~ ]) % !@i.@[                                                      
    H =: 2 : '(m L1 n +/ . * L2) " 0'                                              
 
 For example:
 
    'a b'=: 2 3 5; 6 5
 
    a L1 b
 (2 3 5 ^!.1/ i.@[) %&(*/) 6 5 ^!.1/ i.@[
 
    t=: 4 [ z=: 7
 
    t a L1 b z
 1 1 1.71429 4.28571
 
    t (a H b , a H. b) z
 295 295
 
    8 (1 H. 1) i. 6
 1 2.71825 7.38095 19.8464 51.8063 128.619
    (1 H. 1) i. 6
 1 2.71828 7.38906 20.0855 54.5982 148.413
    ^ i. 6
 1 2.71828 7.38906 20.0855 54.5982 148.413
 
    erf   =: (1 H. 1.5)@*: * 2p_0.5&* % ^@:*:    NB. error function
    n01cdf=: -: @: >: @: erf @: ((%:0.5)&*)      NB. CDF of normal 0,1
 
    erf 0.5 1 1.5
 0.5205 0.842701 0.966105
    n01cdf _2 _1.5 _1 _0.5 0 0.5 1 1.5 2
 0.0227501 0.0668072 0.158655 0.308538 0.5 0.691462 0.841345 0.933193 0.97725
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
L:
#+end_src
**** Name (monadic • dyadic)
Level At • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dlcapco.htm
#+begin_example
 
 Level At                                u L: n  _ _ _                             
 
 The conjunction L: applies the verb u at the levels specified by n . The right    
 argument n behaves like that of the rank conjunction in several respects:         
                                                                                   
   * It may have three elements, specifying levels for the monadic, left, and right
     cases                                                                         
   * The full form of the levels used is 3$&.|.n . For example, a 2-element list   
     p,q is equivalent to q,p,q .                                                  
   * Negative values are complementary: u L:(-r) y ↔ u L:(0>.(L.y)-r) y            
 
 For example:
 
    ] y=: (<<2 3 4),<(5 6 ; <<i. 2 3)
 +-------+-------------+
 |+-----+|+---+-------+|
 ||2 3 4|||5 6|+-----+||
 |+-----+||   ||0 1 2|||
 |       ||   ||3 4 5|||
 |       ||   |+-----+||
 |       |+---+-------+|
 +-------+-------------+
 
    +: L: 0 y                   The adverb L:0 may be called leaf
 +-------+----------------+
 |+-----+|+-----+--------+|
 ||4 6 8|||10 12|+------+||
 |+-----+||     ||0 2  4|||
 |       ||     ||6 8 10|||
 |       ||     |+------+||
 |       |+-----+--------+|
 +-------+----------------+
 
    2 # L: 0 y
 +-------------+-----------------+
 |+-----------+|+-------+-------+|
 ||2 2 3 3 4 4|||5 5 6 6|+-----+||
 |+-----------+||       ||0 1 2|||
 |             ||       ||0 1 2|||
 |             ||       ||3 4 5|||
 |             ||       ||3 4 5|||
 |             ||       |+-----+||
 |             |+-------+-------+|
 +-------------+-----------------+
 
    2 # L: 1 y
 +-------------+-----------------------+
 |+-----+-----+|+-------+-------------+|
 ||2 3 4|2 3 4|||5 5 6 6|+-----+-----+||
 |+-----+-----+||       ||0 1 2|0 1 2|||
 |             ||       ||3 4 5|3 4 5|||
 |             ||       |+-----+-----+||
 |             |+-------+-------------+|
 +-------------+-----------------------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
S:
#+end_src
**** Name (monadic • dyadic)
Spread • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dscapco.htm
#+begin_example
 
 Spread                                    u S: n  _ _ _                           
 
 u S: n produces the list resulting from applying u to the argument(s) at levels n 
 (which has the same interpretation as the right argument of L:). For example, #   
 0:S:0 y is the number of leaves (level 0 arrays) in y .                           
 
 For example:
 
    fetch=: >@({&>/)@(<"0@|.@[ , <@]) " 1 _
    ] t=: 5!:2 <'fetch'             NB. An array with an interesting structure
 +------------------------------------------------------+-+---+
 |+-----------------+-+--------------------------------+|"|1 _|
 ||+-+-+-----------+|@|+--------------------+-+-------+|| |   |
 |||>|@|+-------+-+|| ||+--------------+-+-+|,|+-+-+-+||| |   |
 ||| | ||+-+-+-+|/||| |||+-------+-+--+|@|[|| ||<|@|]|||| |   |
 ||| | |||{|&|>|| ||| ||||+-+-+-+|@||.|| | || |+-+-+-+||| |   |
 ||| | ||+-+-+-+| ||| |||||<|"|0|| |  || | || |       ||| |   |
 ||| | |+-------+-+|| ||||+-+-+-+| |  || | || |       ||| |   |
 ||+-+-+-----------+| |||+-------+-+--+| | || |       ||| |   |
 ||                 | ||+--------------+-+-+| |       ||| |   |
 ||                 | |+--------------------+-+-------+|| |   |
 |+-----------------+-+--------------------------------+| |   |
 +------------------------------------------------------+-+---+
 
    < S: 0 t                         NB. The boxed leaves of t
 +-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+-+-+-+-+---+
 |>|@|{|&|>|/|@|<|"|0|@||.|@|[|,|<|@|]|"|1 _|
 +-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+-+-+-+-+---+
 
    11 {. t (; <@;) S: 0 1 {:: t     NB. A 2-column table of leaves and paths
 +--+-----------+
 |> |0 0 0      |
 +--+-----------+
 |@ |0 0 1      |
 +--+-----------+
 |{ |0 0 2 0 0  |
 +--+-----------+
 |& |0 0 2 0 1  |
 +--+-----------+
 |> |0 0 2 0 2  |
 +--+-----------+
 |/ |0 0 2 1    |
 +--+-----------+
 |@ |0 1        |
 +--+-----------+
 |< |0 2 0 0 0 0|
 +--+-----------+
 |" |0 2 0 0 0 1|
 +--+-----------+
 |0 |0 2 0 0 0 2|
 +--+-----------+
 |@ |0 2 0 0 1  |
 +--+-----------+
 ||.|0 2 0 0 2  |
 +--+-----------+
 
#+end_example
*** Conjunction               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
T.
#+end_src
**** Name (monadic • dyadic)
Taylor Approximation • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dtcapdot.htm
#+begin_example
 
 Taylor Approximation                           u T. n                             
 
 u T. n is the n-term Taylor approximation to the function u .                     
 
 For example:
 
    6j2 ": ^ T. 8 x=: 2 %~ i.8
   1.00  1.65  2.72  4.48  7.38 12.13 19.85 32.23
 
    6j2 ": ^ x
   1.00  1.65  2.72  4.48  7.39 12.18 20.09 33.12
 
    ^ T. _
 3 : 0"0
 g=:p.&y@:((^) t.)@i.
 g +:^:(g ~: g@+:)^:_ ] 1
 )
    (^ = ^T._) i. 5
 1 1 1 1 1
 
 Compare the conjunction T. with the adverb t. .
 
#+end_example
** Others
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
=.
#+end_src
**** Name (monadic • dyadic)
Is (Local) • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d001.htm
#+begin_example
 
 Copula                              =. Local                             =: Global
 
 The copula is used to assign a referent to a name, as in a=:3 and in sum=:+/ . The
 copula =. is local as discussed under [[file:///Applications/j64-806/addons/docs/help/dictionary/d310n.htm][Explicit Definition (:)]], and =: is global,  
 except that global assignment to a local name is not permitted and an assignment  
 to a locative is always global.                                                   
                                                                                   
 Copulas may also be used indirectly, with the name or names specified as a        
 character or boxed list. If y is the expression to the right of the copula, then a
 single name is assigned y , otherwise each name is assigned >y if y is an atom,   
 otherwise the i-th name is assigned >i{y . If the character list begins with `    
 then gerund referents are evoked.                                                 
 
 For example:
 
    f=: 3 : 0
 a=. +:y
 b=: *:a
 10*b
 )
 
    a=: b=: 678
    a,b
 678 678
 
    f 3 
 360
 
    a,b 
 678 36
 
    x=: 'abc';'c'
    (x) =: 3 4 ; 5 6 7
    abc
 3 4
    c
 5 6 7
 
 Note that the parentheses around the name x force it to be evaluated before the
 assignment specified by the copula is effected.
 
    'alpha beta'=: i.2 4
    alpha
 0 1 2 3
 
    beta 
 4 5 6 7
 
    '`sum sqrt'=: +/ ` %:
    sum 3 1 4 2
 10
    sqrt 2
 1.41421
 
#+end_example
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
=:
#+end_src
**** Name (monadic • dyadic)
Is (Global) • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d001.htm
#+begin_example
 
 Copula                              =. Local                             =: Global
 
 The copula is used to assign a referent to a name, as in a=:3 and in sum=:+/ . The
 copula =. is local as discussed under [[file:///Applications/j64-806/addons/docs/help/dictionary/d310n.htm][Explicit Definition (:)]], and =: is global,  
 except that global assignment to a local name is not permitted and an assignment  
 to a locative is always global.                                                   
                                                                                   
 Copulas may also be used indirectly, with the name or names specified as a        
 character or boxed list. If y is the expression to the right of the copula, then a
 single name is assigned y , otherwise each name is assigned >y if y is an atom,   
 otherwise the i-th name is assigned >i{y . If the character list begins with `    
 then gerund referents are evoked.                                                 
 
 For example:
 
    f=: 3 : 0
 a=. +:y
 b=: *:a
 10*b
 )
 
    a=: b=: 678
    a,b
 678 678
 
    f 3 
 360
 
    a,b 
 678 36
 
    x=: 'abc';'c'
    (x) =: 3 4 ; 5 6 7
    abc
 3 4
    c
 5 6 7
 
 Note that the parentheses around the name x force it to be evaluated before the
 assignment specified by the copula is effected.
 
    'alpha beta'=: i.2 4
    alpha
 0 1 2 3
 
    beta 
 4 5 6 7
 
    '`sum sqrt'=: +/ ` %:
    sum 3 1 4 2
 10
    sqrt 2
 1.41421
 
#+end_example
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
_
#+end_src
**** Name (monadic • dyadic)
Negative Sign / Infinity • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d030.htm
#+begin_example
 
 Negative Sign and Infinity                        _                               
 
 The symbol _ followed by a digit denotes a negative number (as in _3.4), and      
 denotes infinity when used alone, or negative infinity (in __). It is also used in
 names, as discussed in [[file:///Applications/j64-806/addons/docs/help/dictionary/dict1.htm][Part I]] and in [[file:///Applications/j64-806/addons/docs/help/dictionary/dicti.htm][Part II Section I]].                           
 
 For example:
 
    2 % 0                      NB. Two divided by zero
 _
 
    10 ^. 0                    NB. Base ten logarithm of zero
 __
 
    _2 _ 3 + 5
 3 _ 8
 
    integer_test=: =<.         NB. Use of break in name
    integer_test 3 3.5
 1 0
 
 Although -2 may sometimes be used instead of _2, it is important to understand
 that the former is the application of a function to the number 2, whereas the
 symbol _ is an indivisible part of the number representation, just as the period
 is an indivisible part of a number such as 8.9 .
 
#+end_example
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
_.
#+end_src
**** Name (monadic • dyadic)
Indeterminate • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/d031.htm
#+begin_example
 
 Indeterminate                           _.                                        
 
 The indeterminate _. is a numeric atom. It is provided to aid in dealing with NaN 
 (not a number) in data from external sources, and should be removed from such data
 as soon as possible. The verb [[file:///Applications/j64-806/addons/docs/help/dictionary/dx128.htm#5][128!:5]] tests for _. .                               
                                                                                   
 The only ways to create _. are as follows:                                        
                                                                                   
     direct entry of _.                                                            
     ".                                                                            
     3!:n                                                                          
     DLL call (database, LAPACK, etc.)                                             
                                                                                   
 Primitives on arguments containing _. , that move data without interpreting the   
 value, produce correct and consistent results. These include $ |. |: # , ,. [ ] { 
 {. {: } }. }: . Other primitives on arguments containing _. may not produce       
 correct or consistent results. In particular, the dyads < <: = >: > ~: -: <. >. do
 not produce consistent results on arguments containing _. , nor the verbs /: \: , 
 nor the dyads i. i: e. -. , nor the monads ~. ~: , nor verbs defined in terms of  
 these.                                                                            
                                                                                   
 Primitives on arguments not containing _. signal NaN error instead of producing _.
 .                                                                                 
                                                                                   
    x+y        x and y are infinite with different signs                           
                                                                                   
    x-y        x and y are infinite with the same sign                             
                                                                                   
    *y         the real and imaginary parts of y are infinite                      
                                                                                   
    x%y        x and y are infinite                                                
                                                                                   
    x^.y       x and y are infinite or 0                                           
                                                                                   
    x!y        x and y are infinite                                                
                                                                                   
    m H. n     similar to the dyad p.                                              
                                                                                   
    x p. y     x and y that cause addition of infinities with opposite signs; for  
               example 1 _ _ p. _1                                                 
    u T. n     similar to the dyad p.                                              
    y                                                                              
                                                                                   
 0*_ , 0*__ , and 0%0 are all defined to be 0 .                                    
 
#+end_example
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
a.
#+end_src
**** Name (monadic • dyadic)
Alphabet • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dadot.htm
#+begin_example
 
 Alphabet/Ace                          a.  a:                                      
 
 a. is a list of the elements of the alphabet; it determines the collating sequence
 used in grading and sorting (/: and \:). The content of a. as well as the ordering
 of its elements may differ on different computing systems.                        
                                                                                   
 The number of elements in the alphabet is given by $a., and a 32-column display is
 given by an expression such as 8 32$a. . The inclusion of certain control         
 characters (such as the carriage return) and non-printing characters make such a  
 display difficult to decipher, but the major alphabet is usually given by:        
 
    1 2 3 { 8 32 $ a.                                                              
  !"#$%&'()*+,-./0123456789:;<=>?                                                  
 @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_                                                  
 `abcdefghijklmnopqrstuvwxyz{|}~                                                  
                                                                                   
 The index of the carriage return is commonly 13 (as may be tested by entering 13  
 {a.), and the indices of the space and other characters may be determined as      
 illustrated below:                                                                
                                                                                   
    a. i. 'aA +-*%'                                                                
 97 65 32 43 45 42 37                                                              
                                                                                   
 The ace (a unit, from Latin as) is denoted by a: . It is the boxed empty list <$0 
 .                                                                                 
 
#+end_example
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
a:
#+end_src
**** Name (monadic • dyadic)
Ace • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dadot.htm
#+begin_example
 
 Alphabet/Ace                          a.  a:                                      
 
 a. is a list of the elements of the alphabet; it determines the collating sequence
 used in grading and sorting (/: and \:). The content of a. as well as the ordering
 of its elements may differ on different computing systems.                        
                                                                                   
 The number of elements in the alphabet is given by $a., and a 32-column display is
 given by an expression such as 8 32$a. . The inclusion of certain control         
 characters (such as the carriage return) and non-printing characters make such a  
 display difficult to decipher, but the major alphabet is usually given by:        
 
    1 2 3 { 8 32 $ a.                                                              
  !"#$%&'()*+,-./0123456789:;<=>?                                                  
 @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_                                                  
 `abcdefghijklmnopqrstuvwxyz{|}~                                                  
                                                                                   
 The index of the carriage return is commonly 13 (as may be tested by entering 13  
 {a.), and the indices of the space and other characters may be determined as      
 illustrated below:                                                                
                                                                                   
    a. i. 'aA +-*%'                                                                
 97 65 32 43 45 42 37                                                              
                                                                                   
 The ace (a unit, from Latin as) is denoted by a: . It is the boxed empty list <$0 
 .                                                                                 
 
#+end_example
*** Other               :drill:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
**** Symbol
#+begin_src j
NB.
#+end_src
**** Name (monadic • dyadic)
Comment • 
**** Dictionary entry
file:///Applications/j64-806/addons/docs/help/dictionary/dnb.htm
#+begin_example
 
 Comment                                 NB.                                       
 
 The rest of the line following NB. is ignored.                                    
 
 For example:
 
    text=: 'i. 3 4 NB. 3-by-4 table'
    ;: text
 +--+---+----------------+
 |i.|3 4|NB. 3-by-4 table|
 +--+---+----------------+
 
    ". text                     NB. Execute text
 0 1  2  3
 4 5  6  7
 8 9 10 12
 
#+end_example
